   1               		.file	"unit_tests.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	glcd_test_circles
  12               	glcd_test_circles:
  13               	.LFB12:
  14               		.file 1 "glcd/unit_tests.c"
   1:glcd/unit_tests.c **** /**
   2:glcd/unit_tests.c ****  * \file unit_tests.c
   3:glcd/unit_tests.c ****  * \brief Various test functions to demonstrate features of the library
   4:glcd/unit_tests.c ****  * \author Andy Gock
   5:glcd/unit_tests.c ****  */
   6:glcd/unit_tests.c **** 
   7:glcd/unit_tests.c **** /*
   8:glcd/unit_tests.c **** 	Copyright (c) 2012, Andy Gock
   9:glcd/unit_tests.c **** 
  10:glcd/unit_tests.c **** 	All rights reserved.
  11:glcd/unit_tests.c **** 
  12:glcd/unit_tests.c **** 	Redistribution and use in source and binary forms, with or without
  13:glcd/unit_tests.c **** 	modification, are permitted provided that the following conditions are met:
  14:glcd/unit_tests.c **** 		* Redistributions of source code must retain the above copyright
  15:glcd/unit_tests.c **** 		  notice, this list of conditions and the following disclaimer.
  16:glcd/unit_tests.c **** 		* Redistributions in binary form must reproduce the above copyright
  17:glcd/unit_tests.c **** 		  notice, this list of conditions and the following disclaimer in the
  18:glcd/unit_tests.c **** 		  documentation and/or other materials provided with the distribution.
  19:glcd/unit_tests.c **** 		* Neither the name of Andy Gock nor the
  20:glcd/unit_tests.c **** 		  names of its contributors may be used to endorse or promote products
  21:glcd/unit_tests.c **** 		  derived from this software without specific prior written permission.
  22:glcd/unit_tests.c **** 
  23:glcd/unit_tests.c **** 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  24:glcd/unit_tests.c **** 	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:glcd/unit_tests.c **** 	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:glcd/unit_tests.c **** 	DISCLAIMED. IN NO EVENT SHALL ANDY GOCK BE LIABLE FOR ANY
  27:glcd/unit_tests.c **** 	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  28:glcd/unit_tests.c **** 	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  29:glcd/unit_tests.c **** 	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  30:glcd/unit_tests.c **** 	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  31:glcd/unit_tests.c **** 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  32:glcd/unit_tests.c **** 	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:glcd/unit_tests.c **** */
  34:glcd/unit_tests.c **** 
  35:glcd/unit_tests.c **** #include <stdio.h>
  36:glcd/unit_tests.c **** #include <stdlib.h>
  37:glcd/unit_tests.c **** #include "glcd.h"
  38:glcd/unit_tests.c **** #include "unit_tests.h"
  39:glcd/unit_tests.c **** 
  40:glcd/unit_tests.c **** /** Fonts */
  41:glcd/unit_tests.c **** #include "fonts/font5x7.h"
  42:glcd/unit_tests.c **** //#include "fonts/Liberation_Sans11x14_Numbers.h"
  43:glcd/unit_tests.c **** #include "fonts/Liberation_Sans15x21_Numbers.h"
  44:glcd/unit_tests.c **** //#include "fonts/Liberation_Sans17x17_Alpha.h"
  45:glcd/unit_tests.c **** //#include "fonts/Liberation_Sans27x36_Numbers.h"
  46:glcd/unit_tests.c **** //#include "fonts/Bebas_Neue20x36_Bold_Numbers.h"
  47:glcd/unit_tests.c **** 
  48:glcd/unit_tests.c **** volatile uint8_t unit_test_return = 0;
  49:glcd/unit_tests.c **** 
  50:glcd/unit_tests.c **** /**
  51:glcd/unit_tests.c ****  *  Return from test procedure. Global var \p unit_test_return is set to 1 elsewhere,
  52:glcd/unit_tests.c ****  *  to signal function to return.
  53:glcd/unit_tests.c ****  */
  54:glcd/unit_tests.c **** #define DEMO_RETURN() if (unit_test_return) { unit_test_return = 0; return; }
  55:glcd/unit_tests.c **** 
  56:glcd/unit_tests.c **** #if defined(GLCD_UNIT_TEST_BITMAP_ENABLE)
  57:glcd/unit_tests.c **** 	/* Open Source logo -- Size: 128x64 */
  58:glcd/unit_tests.c **** 	#if defined(GLCD_DEVICE_AVR8)
  59:glcd/unit_tests.c **** 		const unsigned char bmp_oslogo[] PROGMEM = {
  60:glcd/unit_tests.c **** 	#else
  61:glcd/unit_tests.c **** 		const unsigned char bmp_oslogo[] = {	
  62:glcd/unit_tests.c **** 	#endif /* GLCD_DEVICE_AVR8 */
  63:glcd/unit_tests.c **** 		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
  64:glcd/unit_tests.c **** 	};
  65:glcd/unit_tests.c **** #endif /* GLCD_UNIT_TEST_BITMAP_ENABLE */
  66:glcd/unit_tests.c **** 
  67:glcd/unit_tests.c **** void glcd_test_circles(void)
  68:glcd/unit_tests.c **** {
  15               		.loc 1 68 1 view -0
  16               		.cfi_startproc
  17 0000 6F92      		push r6
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 6, -2
  21 0002 7F92      		push r7
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 7, -3
  25 0004 8F92      		push r8
  26               	.LCFI2:
  27               		.cfi_def_cfa_offset 5
  28               		.cfi_offset 8, -4
  29 0006 9F92      		push r9
  30               	.LCFI3:
  31               		.cfi_def_cfa_offset 6
  32               		.cfi_offset 9, -5
  33 0008 AF92      		push r10
  34               	.LCFI4:
  35               		.cfi_def_cfa_offset 7
  36               		.cfi_offset 10, -6
  37 000a BF92      		push r11
  38               	.LCFI5:
  39               		.cfi_def_cfa_offset 8
  40               		.cfi_offset 11, -7
  41 000c CF92      		push r12
  42               	.LCFI6:
  43               		.cfi_def_cfa_offset 9
  44               		.cfi_offset 12, -8
  45 000e DF92      		push r13
  46               	.LCFI7:
  47               		.cfi_def_cfa_offset 10
  48               		.cfi_offset 13, -9
  49 0010 EF92      		push r14
  50               	.LCFI8:
  51               		.cfi_def_cfa_offset 11
  52               		.cfi_offset 14, -10
  53 0012 FF92      		push r15
  54               	.LCFI9:
  55               		.cfi_def_cfa_offset 12
  56               		.cfi_offset 15, -11
  57 0014 0F93      		push r16
  58               	.LCFI10:
  59               		.cfi_def_cfa_offset 13
  60               		.cfi_offset 16, -12
  61 0016 1F93      		push r17
  62               	.LCFI11:
  63               		.cfi_def_cfa_offset 14
  64               		.cfi_offset 17, -13
  65 0018 CF93      		push r28
  66               	.LCFI12:
  67               		.cfi_def_cfa_offset 15
  68               		.cfi_offset 28, -14
  69 001a DF93      		push r29
  70               	.LCFI13:
  71               		.cfi_def_cfa_offset 16
  72               		.cfi_offset 29, -15
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 14 */
  76               	.L__stack_usage = 14
  77               	.LBB80:
  69:glcd/unit_tests.c **** 	uint8_t x,y,radius;
  70:glcd/unit_tests.c **** 
  71:glcd/unit_tests.c **** 	while (1) {
  72:glcd/unit_tests.c **** 		uint8_t i;
  73:glcd/unit_tests.c **** 		
  74:glcd/unit_tests.c **** 		glcd_clear();
  75:glcd/unit_tests.c **** 
  76:glcd/unit_tests.c **** 		// generate random(ish) position on display
  77:glcd/unit_tests.c **** 		x = rand() % GLCD_LCD_WIDTH;
  78               		.loc 1 77 14 is_stmt 0 view .LVU1
  79 001c 04E5      		ldi r16,lo8(84)
  80 001e 10E0      		ldi r17,0
  78:glcd/unit_tests.c **** 		y = rand() % GLCD_LCD_HEIGHT;
  81               		.loc 1 78 14 view .LVU2
  82 0020 80E3      		ldi r24,lo8(48)
  83 0022 E82E      		mov r14,r24
  84 0024 F12C      		mov r15,__zero_reg__
  79:glcd/unit_tests.c **** 		radius = rand() % 50;
  85               		.loc 1 79 19 view .LVU3
  86 0026 92E3      		ldi r25,lo8(50)
  87 0028 C92E      		mov r12,r25
  88 002a D12C      		mov r13,__zero_reg__
  89               	.LBB81:
  90               	.LBB82:
  91               	.LBB83:
  92               	.LBB84:
  93               		.file 2 "/usr/avr/include/util/delay_basic.h"
   1:/usr/avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/avr/include/util/delay_basic.h **** 
   5:/usr/avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/avr/include/util/delay_basic.h **** 
   8:/usr/avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/avr/include/util/delay_basic.h **** 
  11:/usr/avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/util/delay_basic.h ****      distribution.
  15:/usr/avr/include/util/delay_basic.h **** 
  16:/usr/avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/avr/include/util/delay_basic.h **** 
  20:/usr/avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/avr/include/util/delay_basic.h **** 
  32:/usr/avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2453 2014-10-19 08:18:11Z saaadhu $ */
  33:/usr/avr/include/util/delay_basic.h **** 
  34:/usr/avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/avr/include/util/delay_basic.h **** 
  37:/usr/avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/avr/include/util/delay_basic.h **** 
  39:/usr/avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
  41:/usr/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
  42:/usr/avr/include/util/delay_basic.h **** #endif
  43:/usr/avr/include/util/delay_basic.h **** 
  44:/usr/avr/include/util/delay_basic.h **** /** \file */
  45:/usr/avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/avr/include/util/delay_basic.h ****     \code
  47:/usr/avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/avr/include/util/delay_basic.h ****     \endcode
  49:/usr/avr/include/util/delay_basic.h **** 
  50:/usr/avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/avr/include/util/delay_basic.h **** 
  58:/usr/avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/avr/include/util/delay_basic.h **** 
  65:/usr/avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/avr/include/util/delay_basic.h **** 
  67:/usr/avr/include/util/delay_basic.h **** */
  68:/usr/avr/include/util/delay_basic.h **** 
  69:/usr/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/avr/include/util/delay_basic.h **** 
  71:/usr/avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/avr/include/util/delay_basic.h ****     register.
  76:/usr/avr/include/util/delay_basic.h **** 
  77:/usr/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/avr/include/util/delay_basic.h **** */
  80:/usr/avr/include/util/delay_basic.h **** void
  81:/usr/avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/avr/include/util/delay_basic.h **** {
  83:/usr/avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/avr/include/util/delay_basic.h **** 	);
  89:/usr/avr/include/util/delay_basic.h **** }
  90:/usr/avr/include/util/delay_basic.h **** 
  91:/usr/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/avr/include/util/delay_basic.h **** 
  93:/usr/avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/avr/include/util/delay_basic.h **** 
  99:/usr/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/avr/include/util/delay_basic.h ****  */
 102:/usr/avr/include/util/delay_basic.h **** void
 103:/usr/avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/avr/include/util/delay_basic.h **** {
 105:/usr/avr/include/util/delay_basic.h **** 	__asm__ volatile (
  94               		.loc 2 105 2 view .LVU4
  95 002c 20E4      		ldi r18,lo8(64)
  96 002e A22E      		mov r10,r18
  97 0030 2FE1      		ldi r18,lo8(31)
  98 0032 B22E      		mov r11,r18
  99               	.LBE84:
 100               	.LBE83:
 101               	.LBE82:
 102               	.LBE81:
 103               	.LBB88:
 104               	.LBB89:
 105               	.LBB90:
 106               	.LBB91:
 107 0034 30EA      		ldi r19,lo8(-96)
 108 0036 832E      		mov r8,r19
 109 0038 3FE0      		ldi r19,lo8(15)
 110 003a 932E      		mov r9,r19
 111               	.L4:
 112               	.LBE91:
 113               	.LBE90:
 114               	.LBE89:
 115               	.LBE88:
 116               	.LBE80:
  69:glcd/unit_tests.c **** 
 117               		.loc 1 69 2 is_stmt 1 view .LVU5
  71:glcd/unit_tests.c **** 		uint8_t i;
 118               		.loc 1 71 2 view .LVU6
 119               	.LBB97:
  72:glcd/unit_tests.c **** 		
 120               		.loc 1 72 3 view .LVU7
  74:glcd/unit_tests.c **** 
 121               		.loc 1 74 3 view .LVU8
 122 003c 0E94 0000 		call glcd_clear
 123               	.LVL0:
  77:glcd/unit_tests.c **** 		y = rand() % GLCD_LCD_HEIGHT;
 124               		.loc 1 77 3 view .LVU9
  77:glcd/unit_tests.c **** 		y = rand() % GLCD_LCD_HEIGHT;
 125               		.loc 1 77 7 is_stmt 0 view .LVU10
 126 0040 0E94 0000 		call rand
 127               	.LVL1:
  77:glcd/unit_tests.c **** 		y = rand() % GLCD_LCD_HEIGHT;
 128               		.loc 1 77 14 view .LVU11
 129 0044 B801      		movw r22,r16
 130 0046 0E94 0000 		call __divmodhi4
  77:glcd/unit_tests.c **** 		y = rand() % GLCD_LCD_HEIGHT;
 131               		.loc 1 77 5 view .LVU12
 132 004a 782E      		mov r7,r24
 133               	.LVL2:
  78:glcd/unit_tests.c **** 		radius = rand() % 50;
 134               		.loc 1 78 3 is_stmt 1 view .LVU13
  78:glcd/unit_tests.c **** 		radius = rand() % 50;
 135               		.loc 1 78 7 is_stmt 0 view .LVU14
 136 004c 0E94 0000 		call rand
 137               	.LVL3:
  78:glcd/unit_tests.c **** 		radius = rand() % 50;
 138               		.loc 1 78 14 view .LVU15
 139 0050 B701      		movw r22,r14
 140 0052 0E94 0000 		call __divmodhi4
  78:glcd/unit_tests.c **** 		radius = rand() % 50;
 141               		.loc 1 78 5 view .LVU16
 142 0056 682E      		mov r6,r24
 143               	.LVL4:
 144               		.loc 1 79 3 is_stmt 1 view .LVU17
 145               		.loc 1 79 12 is_stmt 0 view .LVU18
 146 0058 0E94 0000 		call rand
 147               	.LVL5:
 148               		.loc 1 79 19 view .LVU19
 149 005c B601      		movw r22,r12
 150 005e 0E94 0000 		call __divmodhi4
 151               		.loc 1 79 10 view .LVU20
 152 0062 D82F      		mov r29,r24
 153               	.LVL6:
  80:glcd/unit_tests.c **** 
  81:glcd/unit_tests.c **** 		//x = 70; y=25; radius=50; // for debugging
  82:glcd/unit_tests.c **** 
  83:glcd/unit_tests.c **** 		// fill circle with black
  84:glcd/unit_tests.c **** 		
  85:glcd/unit_tests.c **** 		for (i=0; i<=radius; i++) {
 154               		.loc 1 85 3 is_stmt 1 view .LVU21
 155               		.loc 1 85 9 is_stmt 0 view .LVU22
 156 0064 C0E0      		ldi r28,0
 157               	.LVL7:
 158               	.L2:
  86:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,BLACK);
 159               		.loc 1 86 4 is_stmt 1 discriminator 3 view .LVU23
 160 0066 21E0      		ldi r18,lo8(1)
 161 0068 4C2F      		mov r20,r28
 162 006a 662D      		mov r22,r6
 163 006c 872D      		mov r24,r7
 164 006e 0E94 0000 		call glcd_fill_circle
 165               	.LVL8:
  87:glcd/unit_tests.c **** 			glcd_write();
 166               		.loc 1 87 4 discriminator 3 view .LVU24
 167 0072 0E94 0000 		call glcd_write
 168               	.LVL9:
  88:glcd/unit_tests.c **** 			delay_ms(2);
 169               		.loc 1 88 4 discriminator 3 view .LVU25
 170               	.LBB95:
 171               	.LBI81:
 172               		.file 3 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 173               		.loc 3 166 1 discriminator 3 view .LVU26
 174               	.LBB87:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 175               		.loc 3 168 2 discriminator 3 view .LVU27
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 176               		.loc 3 190 2 discriminator 3 view .LVU28
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 177               		.loc 3 191 2 discriminator 3 view .LVU29
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 178               		.loc 3 192 2 discriminator 3 view .LVU30
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 179               		.loc 3 194 7 discriminator 3 view .LVU31
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 180               		.loc 3 207 3 discriminator 3 view .LVU32
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 181               		.loc 3 208 2 discriminator 3 view .LVU33
 182               	.LBB86:
 183               	.LBI83:
 103:/usr/avr/include/util/delay_basic.h **** {
 184               		.loc 2 103 1 discriminator 3 view .LVU34
 185               	.LBB85:
 186               		.loc 2 105 2 discriminator 3 view .LVU35
 187 0076 C501      		movw r24,r10
 188               	/* #APP */
 189               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 190 0078 0197      		1: sbiw r24,1
 191 007a 01F4      		brne 1b
 192               	 ;  0 "" 2
 193               	.LVL10:
 194               		.loc 2 105 2 is_stmt 0 discriminator 3 view .LVU36
 195               	/* #NOAPP */
 196               	.LBE85:
 197               	.LBE86:
 198               	.LBE87:
 199               	.LBE95:
  85:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,BLACK);
 200               		.loc 1 85 25 discriminator 3 view .LVU37
 201 007c CF5F      		subi r28,lo8(-(1))
 202               	.LVL11:
  85:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,BLACK);
 203               		.loc 1 85 3 discriminator 3 view .LVU38
 204 007e DC17      		cp r29,r28
 205 0080 00F4      		brsh .L2
  89:glcd/unit_tests.c **** 		}
  90:glcd/unit_tests.c **** 
  91:glcd/unit_tests.c **** 		// fill the same circle above but with white
  92:glcd/unit_tests.c **** 		for (i=0; i<=radius; i++) {
 206               		.loc 1 92 9 view .LVU39
 207 0082 C0E0      		ldi r28,0
 208               	.LVL12:
 209               	.L3:
  93:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,WHITE);
 210               		.loc 1 93 4 is_stmt 1 discriminator 3 view .LVU40
 211 0084 20E0      		ldi r18,0
 212 0086 4C2F      		mov r20,r28
 213 0088 662D      		mov r22,r6
 214 008a 872D      		mov r24,r7
 215 008c 0E94 0000 		call glcd_fill_circle
 216               	.LVL13:
  94:glcd/unit_tests.c **** 			glcd_write();
 217               		.loc 1 94 4 discriminator 3 view .LVU41
 218 0090 0E94 0000 		call glcd_write
 219               	.LVL14:
  95:glcd/unit_tests.c **** 			delay_ms(1);
 220               		.loc 1 95 4 discriminator 3 view .LVU42
 221               	.LBB96:
 222               	.LBI88:
 166:/usr/avr/include/util/delay.h **** {
 223               		.loc 3 166 1 discriminator 3 view .LVU43
 224               	.LBB94:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 225               		.loc 3 168 2 discriminator 3 view .LVU44
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 226               		.loc 3 190 2 discriminator 3 view .LVU45
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 227               		.loc 3 191 2 discriminator 3 view .LVU46
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 228               		.loc 3 192 2 discriminator 3 view .LVU47
 194:/usr/avr/include/util/delay.h **** 	{
 229               		.loc 3 194 7 discriminator 3 view .LVU48
 207:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 230               		.loc 3 207 3 discriminator 3 view .LVU49
 231               		.loc 3 208 2 discriminator 3 view .LVU50
 232               	.LBB93:
 233               	.LBI90:
 103:/usr/avr/include/util/delay_basic.h **** {
 234               		.loc 2 103 1 discriminator 3 view .LVU51
 235               	.LBB92:
 236               		.loc 2 105 2 discriminator 3 view .LVU52
 237 0094 C401      		movw r24,r8
 238               	/* #APP */
 239               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 240 0096 0197      		1: sbiw r24,1
 241 0098 01F4      		brne 1b
 242               	 ;  0 "" 2
 243               	.LVL15:
 244               		.loc 2 105 2 is_stmt 0 discriminator 3 view .LVU53
 245               	/* #NOAPP */
 246               	.LBE92:
 247               	.LBE93:
 248               	.LBE94:
 249               	.LBE96:
  92:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,WHITE);
 250               		.loc 1 92 25 discriminator 3 view .LVU54
 251 009a CF5F      		subi r28,lo8(-(1))
 252               	.LVL16:
  92:glcd/unit_tests.c **** 			glcd_fill_circle(x,y,i,WHITE);
 253               		.loc 1 92 3 discriminator 3 view .LVU55
 254 009c DC17      		cp r29,r28
 255 009e 00F4      		brsh .L3
  96:glcd/unit_tests.c **** 		}
  97:glcd/unit_tests.c **** 		DEMO_RETURN();
 256               		.loc 1 97 3 is_stmt 1 view .LVU56
 257 00a0 8091 0000 		lds r24,unit_test_return
 258 00a4 8823      		tst r24
 259 00a6 01F0      		breq .L4
 260               		.loc 1 97 3 discriminator 1 view .LVU57
 261 00a8 1092 0000 		sts unit_test_return,__zero_reg__
 262               		.loc 1 97 3 discriminator 1 view .LVU58
 263               	/* epilogue start */
 264               	.LBE97:
  98:glcd/unit_tests.c **** 	}
  99:glcd/unit_tests.c **** }
 265               		.loc 1 99 1 is_stmt 0 discriminator 1 view .LVU59
 266 00ac DF91      		pop r29
 267               		.loc 1 99 1 discriminator 1 view .LVU60
 268 00ae CF91      		pop r28
 269               	.LVL17:
 270               		.loc 1 99 1 discriminator 1 view .LVU61
 271 00b0 1F91      		pop r17
 272 00b2 0F91      		pop r16
 273 00b4 FF90      		pop r15
 274 00b6 EF90      		pop r14
 275 00b8 DF90      		pop r13
 276 00ba CF90      		pop r12
 277 00bc BF90      		pop r11
 278 00be AF90      		pop r10
 279 00c0 9F90      		pop r9
 280 00c2 8F90      		pop r8
 281 00c4 7F90      		pop r7
 282               		.loc 1 99 1 discriminator 1 view .LVU62
 283 00c6 6F90      		pop r6
 284               		.loc 1 99 1 discriminator 1 view .LVU63
 285 00c8 0895      		ret
 286               		.cfi_endproc
 287               	.LFE12:
 289               		.section	.rodata.str1.1,"aMS",@progbits,1
 290               	.LC0:
 291 0000 2564 00   		.string	"%d"
 292               		.text
 293               	.global	glcd_test_counter_and_graph
 295               	glcd_test_counter_and_graph:
 296               	.LFB13:
 100:glcd/unit_tests.c **** 
 101:glcd/unit_tests.c **** void glcd_test_counter_and_graph(void)
 102:glcd/unit_tests.c **** {
 297               		.loc 1 102 1 is_stmt 1 view -0
 298               		.cfi_startproc
 299 00ca CF92      		push r12
 300               	.LCFI14:
 301               		.cfi_def_cfa_offset 3
 302               		.cfi_offset 12, -2
 303 00cc DF92      		push r13
 304               	.LCFI15:
 305               		.cfi_def_cfa_offset 4
 306               		.cfi_offset 13, -3
 307 00ce EF92      		push r14
 308               	.LCFI16:
 309               		.cfi_def_cfa_offset 5
 310               		.cfi_offset 14, -4
 311 00d0 FF92      		push r15
 312               	.LCFI17:
 313               		.cfi_def_cfa_offset 6
 314               		.cfi_offset 15, -5
 315 00d2 0F93      		push r16
 316               	.LCFI18:
 317               		.cfi_def_cfa_offset 7
 318               		.cfi_offset 16, -6
 319 00d4 1F93      		push r17
 320               	.LCFI19:
 321               		.cfi_def_cfa_offset 8
 322               		.cfi_offset 17, -7
 323 00d6 CF93      		push r28
 324               	.LCFI20:
 325               		.cfi_def_cfa_offset 9
 326               		.cfi_offset 28, -8
 327 00d8 DF93      		push r29
 328               	.LCFI21:
 329               		.cfi_def_cfa_offset 10
 330               		.cfi_offset 29, -9
 331 00da CDB7      		in r28,__SP_L__
 332 00dc DEB7      		in r29,__SP_H__
 333               	.LCFI22:
 334               		.cfi_def_cfa_register 28
 335 00de 2897      		sbiw r28,8
 336               	.LCFI23:
 337               		.cfi_def_cfa_offset 18
 338 00e0 0FB6      		in __tmp_reg__,__SREG__
 339 00e2 F894      		cli
 340 00e4 DEBF      		out __SP_H__,r29
 341 00e6 0FBE      		out __SREG__,__tmp_reg__
 342 00e8 CDBF      		out __SP_L__,r28
 343               	/* prologue: function */
 344               	/* frame size = 8 */
 345               	/* stack size = 16 */
 346               	.L__stack_usage = 16
 103:glcd/unit_tests.c **** 	uint8_t count = 0;
 347               		.loc 1 103 2 view .LVU65
 348               	.LVL18:
 104:glcd/unit_tests.c **** 	char string[8] = "";
 349               		.loc 1 104 2 view .LVU66
 350               		.loc 1 104 7 is_stmt 0 view .LVU67
 351 00ea 1A82      		std Y+2,__zero_reg__
 352 00ec 1982      		std Y+1,__zero_reg__
 353 00ee FE01      		movw r30,r28
 354 00f0 3396      		adiw r30,3
 355 00f2 86E0      		ldi r24,lo8(6)
 356 00f4 DF01      		movw r26,r30
 357               		0:
 358 00f6 1D92      		st X+,__zero_reg__
 359 00f8 8A95      		dec r24
 360 00fa 01F4      		brne 0b
 103:glcd/unit_tests.c **** 	uint8_t count = 0;
 361               		.loc 1 103 10 view .LVU68
 362 00fc 10E0      		ldi r17,0
 105:glcd/unit_tests.c **** 	while(1) {
 106:glcd/unit_tests.c **** 		glcd_clear_buffer();
 107:glcd/unit_tests.c **** 
 108:glcd/unit_tests.c **** 		//glcd_tiny_set_font(Font5x7,5,7,32,127);
 109:glcd/unit_tests.c **** 		//glcd_draw_string_xy(0,40,(char *)utoa(count,string,10));
 110:glcd/unit_tests.c **** 
 111:glcd/unit_tests.c **** 		glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
 112:glcd/unit_tests.c **** 		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
 113:glcd/unit_tests.c **** 		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
 114:glcd/unit_tests.c **** 		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
 115:glcd/unit_tests.c **** 		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for
 116:glcd/unit_tests.c **** 
 117:glcd/unit_tests.c **** 		sprintf(string,"%d",count);
 363               		.loc 1 117 3 view .LVU69
 364 00fe 80E0      		ldi r24,lo8(.LC0)
 365 0100 C82E      		mov r12,r24
 366 0102 80E0      		ldi r24,hi8(.LC0)
 367 0104 D82E      		mov r13,r24
 368 0106 CE01      		movw r24,r28
 369 0108 0196      		adiw r24,1
 370 010a 7C01      		movw r14,r24
 371               	.LVL19:
 372               	.L10:
 105:glcd/unit_tests.c **** 	while(1) {
 373               		.loc 1 105 2 is_stmt 1 view .LVU70
 106:glcd/unit_tests.c **** 
 374               		.loc 1 106 3 view .LVU71
 375 010c 0E94 0000 		call glcd_clear_buffer
 376               	.LVL20:
 111:glcd/unit_tests.c **** 		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
 377               		.loc 1 111 3 view .LVU72
 378 0110 09E3      		ldi r16,lo8(57)
 379 0112 2EE2      		ldi r18,lo8(46)
 380 0114 45E1      		ldi r20,lo8(21)
 381 0116 6FE0      		ldi r22,lo8(15)
 382 0118 80E0      		ldi r24,lo8(Liberation_Sans15x21_Numbers)
 383 011a 90E0      		ldi r25,hi8(Liberation_Sans15x21_Numbers)
 384 011c 0E94 0000 		call glcd_set_font
 385               	.LVL21:
 386               		.loc 1 117 3 view .LVU73
 387 0120 1F92      		push __zero_reg__
 388 0122 1F93      		push r17
 389 0124 DF92      		push r13
 390 0126 CF92      		push r12
 391 0128 FF92      		push r15
 392 012a EF92      		push r14
 393 012c 0E94 0000 		call sprintf
 394               	.LVL22:
 118:glcd/unit_tests.c **** 		glcd_draw_string_xy(0,0,string);
 395               		.loc 1 118 3 view .LVU74
 396 0130 A701      		movw r20,r14
 397 0132 60E0      		ldi r22,0
 398 0134 80E0      		ldi r24,0
 399 0136 0E94 0000 		call glcd_draw_string_xy
 400               	.LVL23:
 119:glcd/unit_tests.c **** 		glcd_bar_graph_horizontal(10,38,30,6,count*4);
 401               		.loc 1 119 3 view .LVU75
 402 013a 012F      		mov r16,r17
 403 013c 000F      		lsl r16
 404 013e 000F      		lsl r16
 405 0140 26E0      		ldi r18,lo8(6)
 406 0142 4EE1      		ldi r20,lo8(30)
 407 0144 66E2      		ldi r22,lo8(38)
 408 0146 8AE0      		ldi r24,lo8(10)
 409 0148 0E94 0000 		call glcd_bar_graph_horizontal
 410               	.LVL24:
 120:glcd/unit_tests.c **** 		glcd_bar_graph_vertical(70,0,8,30,count*2);
 411               		.loc 1 120 3 view .LVU76
 412 014c 012F      		mov r16,r17
 413 014e 000F      		lsl r16
 414 0150 2EE1      		ldi r18,lo8(30)
 415 0152 48E0      		ldi r20,lo8(8)
 416 0154 60E0      		ldi r22,0
 417 0156 86E4      		ldi r24,lo8(70)
 418 0158 0E94 0000 		call glcd_bar_graph_vertical
 419               	.LVL25:
 121:glcd/unit_tests.c **** 
 122:glcd/unit_tests.c **** 		glcd_write();
 420               		.loc 1 122 3 view .LVU77
 421 015c 0E94 0000 		call glcd_write
 422               	.LVL26:
 123:glcd/unit_tests.c **** 		count += 1;
 423               		.loc 1 123 3 view .LVU78
 424               		.loc 1 123 9 is_stmt 0 view .LVU79
 425 0160 1F5F      		subi r17,lo8(-(1))
 426               	.LVL27:
 124:glcd/unit_tests.c **** 
 125:glcd/unit_tests.c **** 		DEMO_RETURN();
 427               		.loc 1 125 3 is_stmt 1 view .LVU80
 428 0162 8091 0000 		lds r24,unit_test_return
 429 0166 0F90      		pop __tmp_reg__
 430 0168 0F90      		pop __tmp_reg__
 431 016a 0F90      		pop __tmp_reg__
 432 016c 0F90      		pop __tmp_reg__
 433 016e 0F90      		pop __tmp_reg__
 434 0170 0F90      		pop __tmp_reg__
 435 0172 8823      		tst r24
 436 0174 01F0      		breq .L10
 437               		.loc 1 125 3 discriminator 1 view .LVU81
 438 0176 1092 0000 		sts unit_test_return,__zero_reg__
 439               		.loc 1 125 3 discriminator 1 view .LVU82
 440               	/* epilogue start */
 126:glcd/unit_tests.c **** 	}
 127:glcd/unit_tests.c **** 
 128:glcd/unit_tests.c **** }
 441               		.loc 1 128 1 is_stmt 0 discriminator 1 view .LVU83
 442 017a 2896      		adiw r28,8
 443 017c 0FB6      		in __tmp_reg__,__SREG__
 444 017e F894      		cli
 445 0180 DEBF      		out __SP_H__,r29
 446 0182 0FBE      		out __SREG__,__tmp_reg__
 447 0184 CDBF      		out __SP_L__,r28
 448 0186 DF91      		pop r29
 449 0188 CF91      		pop r28
 450 018a 1F91      		pop r17
 451               	.LVL28:
 452               		.loc 1 128 1 discriminator 1 view .LVU84
 453 018c 0F91      		pop r16
 454 018e FF90      		pop r15
 455 0190 EF90      		pop r14
 456 0192 DF90      		pop r13
 457 0194 CF90      		pop r12
 458 0196 0895      		ret
 459               		.cfi_endproc
 460               	.LFE13:
 462               	.global	glcd_test_glcdutils
 464               	glcd_test_glcdutils:
 465               	.LFB14:
 129:glcd/unit_tests.c **** 
 130:glcd/unit_tests.c **** /* Test glcd-utils font table type, increments and display a 16-bit number over and over */
 131:glcd/unit_tests.c **** #include "fonts/Earthbound_12x19_48to57.h"
 132:glcd/unit_tests.c **** void glcd_test_glcdutils(void)
 133:glcd/unit_tests.c **** {
 466               		.loc 1 133 1 is_stmt 1 view -0
 467               		.cfi_startproc
 468 0198 8F92      		push r8
 469               	.LCFI24:
 470               		.cfi_def_cfa_offset 3
 471               		.cfi_offset 8, -2
 472 019a 9F92      		push r9
 473               	.LCFI25:
 474               		.cfi_def_cfa_offset 4
 475               		.cfi_offset 9, -3
 476 019c AF92      		push r10
 477               	.LCFI26:
 478               		.cfi_def_cfa_offset 5
 479               		.cfi_offset 10, -4
 480 019e BF92      		push r11
 481               	.LCFI27:
 482               		.cfi_def_cfa_offset 6
 483               		.cfi_offset 11, -5
 484 01a0 CF92      		push r12
 485               	.LCFI28:
 486               		.cfi_def_cfa_offset 7
 487               		.cfi_offset 12, -6
 488 01a2 DF92      		push r13
 489               	.LCFI29:
 490               		.cfi_def_cfa_offset 8
 491               		.cfi_offset 13, -7
 492 01a4 EF92      		push r14
 493               	.LCFI30:
 494               		.cfi_def_cfa_offset 9
 495               		.cfi_offset 14, -8
 496 01a6 0F93      		push r16
 497               	.LCFI31:
 498               		.cfi_def_cfa_offset 10
 499               		.cfi_offset 16, -9
 500 01a8 CF93      		push r28
 501               	.LCFI32:
 502               		.cfi_def_cfa_offset 11
 503               		.cfi_offset 28, -10
 504 01aa DF93      		push r29
 505               	.LCFI33:
 506               		.cfi_def_cfa_offset 12
 507               		.cfi_offset 29, -11
 508 01ac CDB7      		in r28,__SP_L__
 509 01ae DEB7      		in r29,__SP_H__
 510               	.LCFI34:
 511               		.cfi_def_cfa_register 28
 512 01b0 2897      		sbiw r28,8
 513               	.LCFI35:
 514               		.cfi_def_cfa_offset 20
 515 01b2 0FB6      		in __tmp_reg__,__SREG__
 516 01b4 F894      		cli
 517 01b6 DEBF      		out __SP_H__,r29
 518 01b8 0FBE      		out __SREG__,__tmp_reg__
 519 01ba CDBF      		out __SP_L__,r28
 520               	/* prologue: function */
 521               	/* frame size = 8 */
 522               	/* stack size = 18 */
 523               	.L__stack_usage = 18
 134:glcd/unit_tests.c **** 	uint16_t count = 0;
 524               		.loc 1 134 2 view .LVU86
 525               	.LVL29:
 135:glcd/unit_tests.c **** 	char string[8] = "";
 526               		.loc 1 135 2 view .LVU87
 527               		.loc 1 135 7 is_stmt 0 view .LVU88
 528 01bc 1A82      		std Y+2,__zero_reg__
 529 01be 1982      		std Y+1,__zero_reg__
 530 01c0 FE01      		movw r30,r28
 531 01c2 3396      		adiw r30,3
 532 01c4 86E0      		ldi r24,lo8(6)
 533 01c6 DF01      		movw r26,r30
 534               		0:
 535 01c8 1D92      		st X+,__zero_reg__
 536 01ca 8A95      		dec r24
 537 01cc 01F4      		brne 0b
 134:glcd/unit_tests.c **** 	uint16_t count = 0;
 538               		.loc 1 134 11 view .LVU89
 539 01ce D12C      		mov r13,__zero_reg__
 540 01d0 C12C      		mov r12,__zero_reg__
 136:glcd/unit_tests.c **** 	while(1) {
 137:glcd/unit_tests.c **** 		glcd_clear_buffer();
 138:glcd/unit_tests.c **** 
 139:glcd/unit_tests.c **** 		/* Set the font */
 140:glcd/unit_tests.c **** 		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);
 141:glcd/unit_tests.c **** 
 142:glcd/unit_tests.c **** 		sprintf(string,"%d",count);
 541               		.loc 1 142 3 view .LVU90
 542 01d2 90E0      		ldi r25,lo8(.LC0)
 543 01d4 892E      		mov r8,r25
 544 01d6 90E0      		ldi r25,hi8(.LC0)
 545 01d8 992E      		mov r9,r25
 546 01da CE01      		movw r24,r28
 547 01dc 0196      		adiw r24,1
 548 01de 5C01      		movw r10,r24
 549               	.LVL30:
 550               	.L14:
 136:glcd/unit_tests.c **** 	while(1) {
 551               		.loc 1 136 2 is_stmt 1 view .LVU91
 137:glcd/unit_tests.c **** 
 552               		.loc 1 137 3 view .LVU92
 553 01e0 0E94 0000 		call glcd_clear_buffer
 554               	.LVL31:
 140:glcd/unit_tests.c **** 
 555               		.loc 1 140 3 view .LVU93
 556 01e4 82E0      		ldi r24,lo8(2)
 557 01e6 E82E      		mov r14,r24
 558 01e8 09E3      		ldi r16,lo8(57)
 559 01ea 20E3      		ldi r18,lo8(48)
 560 01ec 43E1      		ldi r20,lo8(19)
 561 01ee 6CE0      		ldi r22,lo8(12)
 562 01f0 80E0      		ldi r24,lo8(font_Earthbound_12x19_48to57)
 563 01f2 90E0      		ldi r25,hi8(font_Earthbound_12x19_48to57)
 564 01f4 0E94 0000 		call glcd_font
 565               	.LVL32:
 566               		.loc 1 142 3 view .LVU94
 567 01f8 DF92      		push r13
 568 01fa CF92      		push r12
 569 01fc 9F92      		push r9
 570 01fe 8F92      		push r8
 571 0200 BF92      		push r11
 572 0202 AF92      		push r10
 573 0204 0E94 0000 		call sprintf
 574               	.LVL33:
 143:glcd/unit_tests.c **** 		glcd_draw_string_xy(0,0,string);
 575               		.loc 1 143 3 view .LVU95
 576 0208 A501      		movw r20,r10
 577 020a 60E0      		ldi r22,0
 578 020c 80E0      		ldi r24,0
 579 020e 0E94 0000 		call glcd_draw_string_xy
 580               	.LVL34:
 144:glcd/unit_tests.c **** 		glcd_write();
 581               		.loc 1 144 3 view .LVU96
 582 0212 0E94 0000 		call glcd_write
 583               	.LVL35:
 145:glcd/unit_tests.c **** 		
 146:glcd/unit_tests.c **** 		count += 1;
 584               		.loc 1 146 3 view .LVU97
 585               		.loc 1 146 9 is_stmt 0 view .LVU98
 586 0216 9FEF      		ldi r25,-1
 587 0218 C91A      		sub r12,r25
 588 021a D90A      		sbc r13,r25
 589               	.LVL36:
 147:glcd/unit_tests.c **** 
 148:glcd/unit_tests.c **** 		DEMO_RETURN();
 590               		.loc 1 148 3 is_stmt 1 view .LVU99
 591 021c 8091 0000 		lds r24,unit_test_return
 592 0220 0F90      		pop __tmp_reg__
 593 0222 0F90      		pop __tmp_reg__
 594 0224 0F90      		pop __tmp_reg__
 595 0226 0F90      		pop __tmp_reg__
 596 0228 0F90      		pop __tmp_reg__
 597 022a 0F90      		pop __tmp_reg__
 598 022c 8823      		tst r24
 599 022e 01F0      		breq .L14
 600               		.loc 1 148 3 discriminator 1 view .LVU100
 601 0230 1092 0000 		sts unit_test_return,__zero_reg__
 602               		.loc 1 148 3 discriminator 1 view .LVU101
 603               	/* epilogue start */
 149:glcd/unit_tests.c **** 	}
 150:glcd/unit_tests.c **** }
 604               		.loc 1 150 1 is_stmt 0 discriminator 1 view .LVU102
 605 0234 2896      		adiw r28,8
 606 0236 0FB6      		in __tmp_reg__,__SREG__
 607 0238 F894      		cli
 608 023a DEBF      		out __SP_H__,r29
 609 023c 0FBE      		out __SREG__,__tmp_reg__
 610 023e CDBF      		out __SP_L__,r28
 611 0240 DF91      		pop r29
 612 0242 CF91      		pop r28
 613 0244 0F91      		pop r16
 614 0246 EF90      		pop r14
 615 0248 DF90      		pop r13
 616 024a CF90      		pop r12
 617               	.LVL37:
 618               		.loc 1 150 1 discriminator 1 view .LVU103
 619 024c BF90      		pop r11
 620 024e AF90      		pop r10
 621 0250 9F90      		pop r9
 622 0252 8F90      		pop r8
 623 0254 0895      		ret
 624               		.cfi_endproc
 625               	.LFE14:
 627               		.section	.rodata.str1.1
 628               	.LC1:
 629 0003 3132 3300 		.string	"123"
 630               	.LC2:
 631 0007 3435 3600 		.string	"456"
 632               		.text
 633               	.global	glcd_test_text_up_down
 635               	glcd_test_text_up_down:
 636               	.LFB15:
 151:glcd/unit_tests.c **** 
 152:glcd/unit_tests.c **** void glcd_test_text_up_down(void)
 153:glcd/unit_tests.c **** {
 637               		.loc 1 153 1 is_stmt 1 view -0
 638               		.cfi_startproc
 639 0256 0F93      		push r16
 640               	.LCFI36:
 641               		.cfi_def_cfa_offset 3
 642               		.cfi_offset 16, -2
 643 0258 1F93      		push r17
 644               	.LCFI37:
 645               		.cfi_def_cfa_offset 4
 646               		.cfi_offset 17, -3
 647 025a CF93      		push r28
 648               	.LCFI38:
 649               		.cfi_def_cfa_offset 5
 650               		.cfi_offset 28, -4
 651 025c DF93      		push r29
 652               	.LCFI39:
 653               		.cfi_def_cfa_offset 6
 654               		.cfi_offset 29, -5
 655               	/* prologue: function */
 656               	/* frame size = 0 */
 657               	/* stack size = 4 */
 658               	.L__stack_usage = 4
 154:glcd/unit_tests.c **** 	// moves some text up and down the display
 155:glcd/unit_tests.c **** 
 156:glcd/unit_tests.c **** 	uint8_t y;
 659               		.loc 1 156 2 view .LVU105
 157:glcd/unit_tests.c **** 	uint8_t max_y;
 660               		.loc 1 157 2 view .LVU106
 158:glcd/unit_tests.c **** 	
 159:glcd/unit_tests.c **** 	//glcd_set_font(Liberation_Sans11x14_Numbers,11,14,46,57);
 160:glcd/unit_tests.c **** 	glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
 661               		.loc 1 160 2 view .LVU107
 662 025e 09E3      		ldi r16,lo8(57)
 663 0260 2EE2      		ldi r18,lo8(46)
 664 0262 45E1      		ldi r20,lo8(21)
 665 0264 6FE0      		ldi r22,lo8(15)
 666 0266 80E0      		ldi r24,lo8(Liberation_Sans15x21_Numbers)
 667 0268 90E0      		ldi r25,hi8(Liberation_Sans15x21_Numbers)
 668 026a 0E94 0000 		call glcd_set_font
 669               	.LVL38:
 161:glcd/unit_tests.c **** 	//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
 162:glcd/unit_tests.c **** 	//glcd_set_font(Liberation_Sans17x17_Alpha,17,17,46,90);
 163:glcd/unit_tests.c **** 
 164:glcd/unit_tests.c **** 	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string
 670               		.loc 1 164 2 view .LVU108
 671               		.loc 1 164 8 is_stmt 0 view .LVU109
 672 026e 8091 0000 		lds r24,font_current+3
 673 0272 CEE2      		ldi r28,lo8(46)
 674 0274 C81B      		sub r28,r24
 675               	.LVL39:
 676               	.LBB98:
 677               	.LBB99:
 678               	.LBB100:
 679               	.LBB101:
 680               		.loc 2 105 2 view .LVU110
 681 0276 00E9      		ldi r16,lo8(-112)
 682 0278 11E0      		ldi r17,lo8(1)
 683               	.L27:
 684               	.LBE101:
 685               	.LBE100:
 686               	.LBE99:
 687               	.LBE98:
 165:glcd/unit_tests.c **** 
 166:glcd/unit_tests.c **** 	while(1) {
 688               		.loc 1 166 2 is_stmt 1 view .LVU111
 167:glcd/unit_tests.c **** 		// move top to bottom
 168:glcd/unit_tests.c **** 		for (y=0; y<max_y; y++) {
 689               		.loc 1 168 3 view .LVU112
 690               	.LVL40:
 691               		.loc 1 168 9 is_stmt 0 view .LVU113
 692 027a D0E0      		ldi r29,0
 693               	.LVL41:
 694               	.L18:
 695               		.loc 1 168 3 discriminator 2 view .LVU114
 696 027c DC13      		cpse r29,r28
 697 027e 00C0      		rjmp .L22
 698 0280 DC2F      		mov r29,r28
 699               	.LVL42:
 700               	.L23:
 169:glcd/unit_tests.c **** 			DEMO_RETURN();
 170:glcd/unit_tests.c **** 			glcd_clear_buffer();
 171:glcd/unit_tests.c **** 			glcd_draw_string_xy(0,y,"123");
 172:glcd/unit_tests.c **** 			glcd_write();
 173:glcd/unit_tests.c **** 			delay_ms(80);
 174:glcd/unit_tests.c **** 		}
 175:glcd/unit_tests.c **** 
 176:glcd/unit_tests.c **** 		// move bottom to top
 177:glcd/unit_tests.c **** 		for (y=(max_y); y>0; y--) {
 701               		.loc 1 177 3 discriminator 2 view .LVU115
 702 0282 DD23      		tst r29
 703 0284 01F0      		breq .L27
 178:glcd/unit_tests.c **** 			DEMO_RETURN();
 704               		.loc 1 178 4 is_stmt 1 view .LVU116
 705 0286 8091 0000 		lds r24,unit_test_return
 706 028a 8111      		cpse r24,__zero_reg__
 707 028c 00C0      		rjmp .L30
 708               		.loc 1 178 17 discriminator 2 view .LVU117
 179:glcd/unit_tests.c **** 			glcd_clear_buffer();
 709               		.loc 1 179 4 discriminator 2 view .LVU118
 710 028e 0E94 0000 		call glcd_clear_buffer
 711               	.LVL43:
 180:glcd/unit_tests.c **** 			glcd_draw_string_xy(0,y,"456");
 712               		.loc 1 180 4 discriminator 2 view .LVU119
 713 0292 40E0      		ldi r20,lo8(.LC2)
 714 0294 50E0      		ldi r21,hi8(.LC2)
 715 0296 6D2F      		mov r22,r29
 716 0298 80E0      		ldi r24,0
 717 029a 0E94 0000 		call glcd_draw_string_xy
 718               	.LVL44:
 181:glcd/unit_tests.c **** 			glcd_write();
 719               		.loc 1 181 4 discriminator 2 view .LVU120
 720 029e 0E94 0000 		call glcd_write
 721               	.LVL45:
 182:glcd/unit_tests.c **** 			delay_ms(80);
 722               		.loc 1 182 4 discriminator 2 view .LVU121
 723               	.LBB106:
 724               	.LBI106:
 166:/usr/avr/include/util/delay.h **** {
 725               		.loc 3 166 1 discriminator 2 view .LVU122
 726               	.LBB107:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 727               		.loc 3 168 2 discriminator 2 view .LVU123
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 728               		.loc 3 190 2 discriminator 2 view .LVU124
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 729               		.loc 3 191 2 discriminator 2 view .LVU125
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 730               		.loc 3 192 2 discriminator 2 view .LVU126
 194:/usr/avr/include/util/delay.h **** 	{
 731               		.loc 3 194 7 discriminator 2 view .LVU127
 194:/usr/avr/include/util/delay.h **** 	{
 732               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU128
 733               	.LBE107:
 734               	.LBE106:
 181:glcd/unit_tests.c **** 			delay_ms(80);
 735               		.loc 1 181 4 discriminator 2 view .LVU129
 736 02a2 80E2      		ldi r24,lo8(32)
 737 02a4 93E0      		ldi r25,lo8(3)
 738               	.LVL46:
 739               	.L25:
 740               	.LBB111:
 741               	.LBB110:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 742               		.loc 3 201 4 is_stmt 1 view .LVU130
 743               	.LBB108:
 744               	.LBI108:
 103:/usr/avr/include/util/delay_basic.h **** {
 745               		.loc 2 103 1 view .LVU131
 746               	.LBB109:
 747               		.loc 2 105 2 view .LVU132
 748 02a6 F801      		movw r30,r16
 749               	/* #APP */
 750               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 751 02a8 3197      		1: sbiw r30,1
 752 02aa 01F4      		brne 1b
 753               	 ;  0 "" 2
 754               	.LVL47:
 755               		.loc 2 105 2 is_stmt 0 view .LVU133
 756               	/* #NOAPP */
 757               	.LBE109:
 758               	.LBE108:
 202:/usr/avr/include/util/delay.h **** 		}
 759               		.loc 3 202 4 is_stmt 1 view .LVU134
 202:/usr/avr/include/util/delay.h **** 		}
 760               		.loc 3 202 4 is_stmt 0 view .LVU135
 761 02ac 0197      		sbiw r24,1
 762               	.LVL48:
 198:/usr/avr/include/util/delay.h **** 		{
 763               		.loc 3 198 8 view .LVU136
 764 02ae 01F4      		brne .L25
 765               	.LVL49:
 198:/usr/avr/include/util/delay.h **** 		{
 766               		.loc 3 198 8 view .LVU137
 767               	.LBE110:
 768               	.LBE111:
 177:glcd/unit_tests.c **** 			DEMO_RETURN();
 769               		.loc 1 177 25 discriminator 2 view .LVU138
 770 02b0 D150      		subi r29,lo8(-(-1))
 771               	.LVL50:
 177:glcd/unit_tests.c **** 			DEMO_RETURN();
 772               		.loc 1 177 25 discriminator 2 view .LVU139
 773 02b2 00C0      		rjmp .L23
 774               	.L22:
 169:glcd/unit_tests.c **** 			glcd_clear_buffer();
 775               		.loc 1 169 4 is_stmt 1 view .LVU140
 776 02b4 8091 0000 		lds r24,unit_test_return
 777 02b8 8823      		tst r24
 778 02ba 01F0      		breq .L19
 779               	.L30:
 178:glcd/unit_tests.c **** 			glcd_clear_buffer();
 780               		.loc 1 178 4 discriminator 1 view .LVU141
 781 02bc 1092 0000 		sts unit_test_return,__zero_reg__
 178:glcd/unit_tests.c **** 			glcd_clear_buffer();
 782               		.loc 1 178 4 discriminator 1 view .LVU142
 783               	/* epilogue start */
 183:glcd/unit_tests.c **** 		}
 184:glcd/unit_tests.c **** 		
 185:glcd/unit_tests.c **** 	}
 186:glcd/unit_tests.c **** 
 187:glcd/unit_tests.c **** }
 784               		.loc 1 187 1 is_stmt 0 discriminator 1 view .LVU143
 785 02c0 DF91      		pop r29
 786               	.LVL51:
 787               		.loc 1 187 1 discriminator 1 view .LVU144
 788 02c2 CF91      		pop r28
 789               	.LVL52:
 790               		.loc 1 187 1 discriminator 1 view .LVU145
 791 02c4 1F91      		pop r17
 792 02c6 0F91      		pop r16
 793 02c8 0895      		ret
 794               	.LVL53:
 795               	.L19:
 169:glcd/unit_tests.c **** 			glcd_clear_buffer();
 796               		.loc 1 169 17 is_stmt 1 discriminator 2 view .LVU146
 170:glcd/unit_tests.c **** 			glcd_draw_string_xy(0,y,"123");
 797               		.loc 1 170 4 discriminator 2 view .LVU147
 798 02ca 0E94 0000 		call glcd_clear_buffer
 799               	.LVL54:
 171:glcd/unit_tests.c **** 			glcd_write();
 800               		.loc 1 171 4 discriminator 2 view .LVU148
 801 02ce 40E0      		ldi r20,lo8(.LC1)
 802 02d0 50E0      		ldi r21,hi8(.LC1)
 803 02d2 6D2F      		mov r22,r29
 804 02d4 80E0      		ldi r24,0
 805 02d6 0E94 0000 		call glcd_draw_string_xy
 806               	.LVL55:
 172:glcd/unit_tests.c **** 			delay_ms(80);
 807               		.loc 1 172 4 discriminator 2 view .LVU149
 808 02da 0E94 0000 		call glcd_write
 809               	.LVL56:
 173:glcd/unit_tests.c **** 		}
 810               		.loc 1 173 4 discriminator 2 view .LVU150
 811               	.LBB112:
 812               	.LBI98:
 166:/usr/avr/include/util/delay.h **** {
 813               		.loc 3 166 1 discriminator 2 view .LVU151
 814               	.LBB104:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 815               		.loc 3 168 2 discriminator 2 view .LVU152
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 816               		.loc 3 190 2 discriminator 2 view .LVU153
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 817               		.loc 3 191 2 discriminator 2 view .LVU154
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 818               		.loc 3 192 2 discriminator 2 view .LVU155
 194:/usr/avr/include/util/delay.h **** 	{
 819               		.loc 3 194 7 discriminator 2 view .LVU156
 194:/usr/avr/include/util/delay.h **** 	{
 820               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU157
 821               	.LBE104:
 822               	.LBE112:
 172:glcd/unit_tests.c **** 			delay_ms(80);
 823               		.loc 1 172 4 discriminator 2 view .LVU158
 824 02de 80E2      		ldi r24,lo8(32)
 825 02e0 93E0      		ldi r25,lo8(3)
 826               	.LVL57:
 827               	.L21:
 828               	.LBB113:
 829               	.LBB105:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 830               		.loc 3 201 4 is_stmt 1 view .LVU159
 831               	.LBB103:
 832               	.LBI100:
 103:/usr/avr/include/util/delay_basic.h **** {
 833               		.loc 2 103 1 view .LVU160
 834               	.LBB102:
 835               		.loc 2 105 2 view .LVU161
 836 02e2 F801      		movw r30,r16
 837               	/* #APP */
 838               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 839 02e4 3197      		1: sbiw r30,1
 840 02e6 01F4      		brne 1b
 841               	 ;  0 "" 2
 842               	.LVL58:
 843               		.loc 2 105 2 is_stmt 0 view .LVU162
 844               	/* #NOAPP */
 845               	.LBE102:
 846               	.LBE103:
 202:/usr/avr/include/util/delay.h **** 		}
 847               		.loc 3 202 4 is_stmt 1 view .LVU163
 202:/usr/avr/include/util/delay.h **** 		}
 848               		.loc 3 202 4 is_stmt 0 view .LVU164
 849 02e8 0197      		sbiw r24,1
 850               	.LVL59:
 198:/usr/avr/include/util/delay.h **** 		{
 851               		.loc 3 198 8 view .LVU165
 852 02ea 01F4      		brne .L21
 853               	.LVL60:
 198:/usr/avr/include/util/delay.h **** 		{
 854               		.loc 3 198 8 view .LVU166
 855               	.LBE105:
 856               	.LBE113:
 168:glcd/unit_tests.c **** 			DEMO_RETURN();
 857               		.loc 1 168 23 discriminator 2 view .LVU167
 858 02ec DF5F      		subi r29,lo8(-(1))
 859               	.LVL61:
 168:glcd/unit_tests.c **** 			DEMO_RETURN();
 860               		.loc 1 168 23 discriminator 2 view .LVU168
 861 02ee 00C0      		rjmp .L18
 862               		.cfi_endproc
 863               	.LFE15:
 865               	.global	glcd_test_tiny_text
 867               	glcd_test_tiny_text:
 868               	.LFB16:
 188:glcd/unit_tests.c **** 
 189:glcd/unit_tests.c **** void glcd_test_tiny_text(void)
 190:glcd/unit_tests.c **** {
 869               		.loc 1 190 1 is_stmt 1 view -0
 870               		.cfi_startproc
 871 02f0 CF92      		push r12
 872               	.LCFI40:
 873               		.cfi_def_cfa_offset 3
 874               		.cfi_offset 12, -2
 875 02f2 DF92      		push r13
 876               	.LCFI41:
 877               		.cfi_def_cfa_offset 4
 878               		.cfi_offset 13, -3
 879 02f4 EF92      		push r14
 880               	.LCFI42:
 881               		.cfi_def_cfa_offset 5
 882               		.cfi_offset 14, -4
 883 02f6 FF92      		push r15
 884               	.LCFI43:
 885               		.cfi_def_cfa_offset 6
 886               		.cfi_offset 15, -5
 887 02f8 0F93      		push r16
 888               	.LCFI44:
 889               		.cfi_def_cfa_offset 7
 890               		.cfi_offset 16, -6
 891 02fa 1F93      		push r17
 892               	.LCFI45:
 893               		.cfi_def_cfa_offset 8
 894               		.cfi_offset 17, -7
 895 02fc CF93      		push r28
 896               	.LCFI46:
 897               		.cfi_def_cfa_offset 9
 898               		.cfi_offset 28, -8
 899 02fe DF93      		push r29
 900               	.LCFI47:
 901               		.cfi_def_cfa_offset 10
 902               		.cfi_offset 29, -9
 903 0300 CDB7      		in r28,__SP_L__
 904 0302 DEB7      		in r29,__SP_H__
 905               	.LCFI48:
 906               		.cfi_def_cfa_register 28
 907 0304 2F97      		sbiw r28,15
 908               	.LCFI49:
 909               		.cfi_def_cfa_offset 25
 910 0306 0FB6      		in __tmp_reg__,__SREG__
 911 0308 F894      		cli
 912 030a DEBF      		out __SP_H__,r29
 913 030c 0FBE      		out __SREG__,__tmp_reg__
 914 030e CDBF      		out __SP_L__,r28
 915               	/* prologue: function */
 916               	/* frame size = 15 */
 917               	/* stack size = 23 */
 918               	.L__stack_usage = 23
 191:glcd/unit_tests.c **** 	/* Write tiny text on display, all chars, scrolling up every second */
 192:glcd/unit_tests.c **** 	
 193:glcd/unit_tests.c **** 	char string[GLCD_LCD_WIDTH / 6 + 1];
 919               		.loc 1 193 2 view .LVU170
 194:glcd/unit_tests.c **** 
 195:glcd/unit_tests.c **** 	uint8_t c = 32;
 920               		.loc 1 195 2 view .LVU171
 921               	.LVL62:
 196:glcd/unit_tests.c **** 	uint8_t len = GLCD_LCD_WIDTH / 6;
 922               		.loc 1 196 2 view .LVU172
 197:glcd/unit_tests.c **** 	
 198:glcd/unit_tests.c **** 	GLCD_TEXT_INIT();
 923               		.loc 1 198 2 view .LVU173
 924 0310 0FE7      		ldi r16,lo8(127)
 925 0312 20E2      		ldi r18,lo8(32)
 926 0314 47E0      		ldi r20,lo8(7)
 927 0316 65E0      		ldi r22,lo8(5)
 928 0318 80E0      		ldi r24,lo8(Font5x7)
 929 031a 90E0      		ldi r25,hi8(Font5x7)
 930 031c 0E94 0000 		call glcd_tiny_set_font
 931               	.LVL63:
 195:glcd/unit_tests.c **** 	uint8_t len = GLCD_LCD_WIDTH / 6;
 932               		.loc 1 195 10 is_stmt 0 view .LVU174
 933 0320 10E2      		ldi r17,lo8(32)
 934 0322 7E01      		movw r14,r28
 935 0324 8FE0      		ldi r24,15
 936 0326 E80E      		add r14,r24
 937 0328 F11C      		adc r15,__zero_reg__
 938               	.LBB114:
 939               	.LBB115:
 940               	.LBB116:
 941               	.LBB117:
 942               	.LBB118:
 943               		.loc 2 105 2 view .LVU175
 944 032a 80E9      		ldi r24,lo8(-112)
 945 032c C82E      		mov r12,r24
 946 032e DD24      		clr r13
 947 0330 D394      		inc r13
 948               	.LVL64:
 949               	.L35:
 950               		.loc 2 105 2 view .LVU176
 951               	.LBE118:
 952               	.LBE117:
 953               	.LBE116:
 954               	.LBE115:
 955               	.LBE114:
 956               		.loc 1 198 18 is_stmt 1 discriminator 1 view .LVU177
 199:glcd/unit_tests.c **** 	
 200:glcd/unit_tests.c **** 	while(1) {
 957               		.loc 1 200 2 discriminator 1 view .LVU178
 958               	.LBB123:
 201:glcd/unit_tests.c **** 		// write chars to string from 32 to 127 ASCII
 202:glcd/unit_tests.c **** 		uint8_t i;
 959               		.loc 1 202 3 discriminator 1 view .LVU179
 203:glcd/unit_tests.c **** 		for (i=0; i<len; i++) {
 960               		.loc 1 203 3 discriminator 1 view .LVU180
 961               		.loc 1 203 3 is_stmt 0 discriminator 1 view .LVU181
 962 0332 FE01      		movw r30,r28
 963 0334 3196      		adiw r30,1
 964 0336 CF01      		movw r24,r30
 965               	.LVL65:
 966               	.L33:
 204:glcd/unit_tests.c **** 			string[i] = c;
 967               		.loc 1 204 4 is_stmt 1 view .LVU182
 968               		.loc 1 204 14 is_stmt 0 view .LVU183
 969 0338 1193      		st Z+,r17
 205:glcd/unit_tests.c **** 			c++;
 970               		.loc 1 205 4 is_stmt 1 view .LVU184
 971               		.loc 1 205 5 is_stmt 0 view .LVU185
 972 033a 1F5F      		subi r17,lo8(-(1))
 973               	.LVL66:
 206:glcd/unit_tests.c **** 			if (c > 127) {
 974               		.loc 1 206 4 is_stmt 1 view .LVU186
 975               		.loc 1 206 7 is_stmt 0 view .LVU187
 976 033c 17FD      		sbrc r17,7
 207:glcd/unit_tests.c **** 				c = 32;
 977               		.loc 1 207 7 view .LVU188
 978 033e 10E2      		ldi r17,lo8(32)
 979               	.LVL67:
 980               	.L32:
 203:glcd/unit_tests.c **** 			string[i] = c;
 981               		.loc 1 203 3 discriminator 2 view .LVU189
 982 0340 EE16      		cp r14,r30
 983 0342 FF06      		cpc r15,r31
 984 0344 01F4      		brne .L33
 208:glcd/unit_tests.c **** 			}
 209:glcd/unit_tests.c **** 		}
 210:glcd/unit_tests.c **** 
 211:glcd/unit_tests.c **** 		// write null terminator
 212:glcd/unit_tests.c **** 		string[len] = '\0';
 985               		.loc 1 212 3 is_stmt 1 view .LVU190
 986               		.loc 1 212 15 is_stmt 0 view .LVU191
 987 0346 1F86      		std Y+15,__zero_reg__
 213:glcd/unit_tests.c **** 
 214:glcd/unit_tests.c **** 		GLCD_WRITE(string);
 988               		.loc 1 214 3 is_stmt 1 view .LVU192
 989 0348 0E94 0000 		call glcd_tiny_draw_string_ammend
 990               	.LVL68:
 215:glcd/unit_tests.c **** 		
 216:glcd/unit_tests.c **** 		DEMO_RETURN();
 991               		.loc 1 216 3 view .LVU193
 992 034c 8091 0000 		lds r24,unit_test_return
 993 0350 8823      		tst r24
 994 0352 01F0      		breq .L36
 995               		.loc 1 216 3 discriminator 1 view .LVU194
 996 0354 1092 0000 		sts unit_test_return,__zero_reg__
 997               		.loc 1 216 3 discriminator 1 view .LVU195
 998               	/* epilogue start */
 999               	.LBE123:
 217:glcd/unit_tests.c **** 		
 218:glcd/unit_tests.c **** 		delay_ms(1000);
 219:glcd/unit_tests.c **** 	}
 220:glcd/unit_tests.c **** 
 221:glcd/unit_tests.c **** }
 1000               		.loc 1 221 1 is_stmt 0 discriminator 1 view .LVU196
 1001 0358 2F96      		adiw r28,15
 1002 035a 0FB6      		in __tmp_reg__,__SREG__
 1003 035c F894      		cli
 1004 035e DEBF      		out __SP_H__,r29
 1005 0360 0FBE      		out __SREG__,__tmp_reg__
 1006 0362 CDBF      		out __SP_L__,r28
 1007 0364 DF91      		pop r29
 1008 0366 CF91      		pop r28
 1009 0368 1F91      		pop r17
 1010               	.LVL69:
 1011               		.loc 1 221 1 discriminator 1 view .LVU197
 1012 036a 0F91      		pop r16
 1013 036c FF90      		pop r15
 1014 036e EF90      		pop r14
 1015 0370 DF90      		pop r13
 1016 0372 CF90      		pop r12
 1017 0374 0895      		ret
 1018               	.LVL70:
 1019               	.L36:
 1020               	.LBB124:
 1021               		.loc 1 221 1 discriminator 1 view .LVU198
 1022 0376 80E1      		ldi r24,lo8(16)
 1023 0378 97E2      		ldi r25,lo8(39)
 1024               	.L34:
 1025               	.LVL71:
 1026               	.LBB122:
 1027               	.LBB121:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1028               		.loc 3 201 4 is_stmt 1 view .LVU199
 1029               	.LBB120:
 1030               	.LBI117:
 103:/usr/avr/include/util/delay_basic.h **** {
 1031               		.loc 2 103 1 view .LVU200
 1032               	.LBB119:
 1033               		.loc 2 105 2 view .LVU201
 1034 037a F601      		movw r30,r12
 1035               	/* #APP */
 1036               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1037 037c 3197      		1: sbiw r30,1
 1038 037e 01F4      		brne 1b
 1039               	 ;  0 "" 2
 1040               	.LVL72:
 1041               		.loc 2 105 2 is_stmt 0 view .LVU202
 1042               	/* #NOAPP */
 1043               	.LBE119:
 1044               	.LBE120:
 202:/usr/avr/include/util/delay.h **** 		}
 1045               		.loc 3 202 4 is_stmt 1 view .LVU203
 202:/usr/avr/include/util/delay.h **** 		}
 1046               		.loc 3 202 4 is_stmt 0 view .LVU204
 1047 0380 0197      		sbiw r24,1
 1048               	.LVL73:
 198:/usr/avr/include/util/delay.h **** 		{
 1049               		.loc 3 198 8 view .LVU205
 1050 0382 01F4      		brne .L34
 1051 0384 00C0      		rjmp .L35
 1052               	.LBE121:
 1053               	.LBE122:
 1054               	.LBE124:
 1055               		.cfi_endproc
 1056               	.LFE16:
 1058               		.section	.rodata.str1.1
 1059               	.LC3:
 1060 000b 4865 6C6C 		.string	"Hello World!"
 1060      6F20 576F 
 1060      726C 6421 
 1060      00
 1061               		.text
 1062               	.global	glcd_test_hello_world
 1064               	glcd_test_hello_world:
 1065               	.LFB17:
 222:glcd/unit_tests.c **** 
 223:glcd/unit_tests.c **** void glcd_test_hello_world(void)
 224:glcd/unit_tests.c **** {
 1066               		.loc 1 224 1 is_stmt 1 view -0
 1067               		.cfi_startproc
 1068 0386 0F93      		push r16
 1069               	.LCFI50:
 1070               		.cfi_def_cfa_offset 3
 1071               		.cfi_offset 16, -2
 1072               	/* prologue: function */
 1073               	/* frame size = 0 */
 1074               	/* stack size = 1 */
 1075               	.L__stack_usage = 1
 225:glcd/unit_tests.c **** 	glcd_tiny_set_font(Font5x7,5,7,32,127);
 1076               		.loc 1 225 2 view .LVU207
 1077 0388 0FE7      		ldi r16,lo8(127)
 1078 038a 20E2      		ldi r18,lo8(32)
 1079 038c 47E0      		ldi r20,lo8(7)
 1080 038e 65E0      		ldi r22,lo8(5)
 1081 0390 80E0      		ldi r24,lo8(Font5x7)
 1082 0392 90E0      		ldi r25,hi8(Font5x7)
 1083 0394 0E94 0000 		call glcd_tiny_set_font
 1084               	.LVL74:
 226:glcd/unit_tests.c **** 	glcd_clear_buffer();
 1085               		.loc 1 226 2 view .LVU208
 1086 0398 0E94 0000 		call glcd_clear_buffer
 1087               	.LVL75:
 227:glcd/unit_tests.c **** 	glcd_tiny_draw_string(0,0,"Hello World!");
 1088               		.loc 1 227 2 view .LVU209
 1089 039c 40E0      		ldi r20,lo8(.LC3)
 1090 039e 50E0      		ldi r21,hi8(.LC3)
 1091 03a0 60E0      		ldi r22,0
 1092 03a2 80E0      		ldi r24,0
 1093 03a4 0E94 0000 		call glcd_tiny_draw_string
 1094               	.LVL76:
 228:glcd/unit_tests.c **** 	glcd_write();
 1095               		.loc 1 228 2 view .LVU210
 1096 03a8 0E94 0000 		call glcd_write
 1097               	.LVL77:
 1098               	.L41:
 229:glcd/unit_tests.c **** 	while(1) {
 1099               		.loc 1 229 2 view .LVU211
 230:glcd/unit_tests.c **** 		DEMO_RETURN();
 1100               		.loc 1 230 3 view .LVU212
 1101 03ac 8091 0000 		lds r24,unit_test_return
 1102 03b0 8823      		tst r24
 1103 03b2 01F0      		breq .L41
 1104               		.loc 1 230 3 discriminator 1 view .LVU213
 1105 03b4 1092 0000 		sts unit_test_return,__zero_reg__
 1106               		.loc 1 230 3 discriminator 1 view .LVU214
 1107               	/* epilogue start */
 231:glcd/unit_tests.c **** 	}
 232:glcd/unit_tests.c **** }
 1108               		.loc 1 232 1 is_stmt 0 discriminator 1 view .LVU215
 1109 03b8 0F91      		pop r16
 1110 03ba 0895      		ret
 1111               		.cfi_endproc
 1112               	.LFE17:
 1114               		.section	.rodata.str1.1
 1115               	.LC4:
 1116 0018 5245 4354 		.string	"RECTANGLE DEMO"
 1116      414E 474C 
 1116      4520 4445 
 1116      4D4F 00
 1117               	.LC5:
 1118 0027 676C 6364 		.string	"glcd_draw_rect"
 1118      5F64 7261 
 1118      775F 7265 
 1118      6374 00
 1119               	.LC6:
 1120 0036 676C 6364 		.string	"glcd_draw_rect_thick"
 1120      5F64 7261 
 1120      775F 7265 
 1120      6374 5F74 
 1120      6869 636B 
 1121               	.LC7:
 1122 004b 676C 6364 		.string	"glcd_draw_rect_shadow"
 1122      5F64 7261 
 1122      775F 7265 
 1122      6374 5F73 
 1122      6861 646F 
 1123               		.text
 1124               	.global	glcd_test_rectangles
 1126               	glcd_test_rectangles:
 1127               	.LFB18:
 233:glcd/unit_tests.c **** 
 234:glcd/unit_tests.c **** void glcd_test_rectangles(void)
 235:glcd/unit_tests.c **** {
 1128               		.loc 1 235 1 is_stmt 1 view -0
 1129               		.cfi_startproc
 1130 03bc CF92      		push r12
 1131               	.LCFI51:
 1132               		.cfi_def_cfa_offset 3
 1133               		.cfi_offset 12, -2
 1134 03be EF92      		push r14
 1135               	.LCFI52:
 1136               		.cfi_def_cfa_offset 4
 1137               		.cfi_offset 14, -3
 1138 03c0 0F93      		push r16
 1139               	.LCFI53:
 1140               		.cfi_def_cfa_offset 5
 1141               		.cfi_offset 16, -4
 1142 03c2 CF93      		push r28
 1143               	.LCFI54:
 1144               		.cfi_def_cfa_offset 6
 1145               		.cfi_offset 28, -5
 1146 03c4 DF93      		push r29
 1147               	.LCFI55:
 1148               		.cfi_def_cfa_offset 7
 1149               		.cfi_offset 29, -6
 1150               	/* prologue: function */
 1151               	/* frame size = 0 */
 1152               	/* stack size = 5 */
 1153               	.L__stack_usage = 5
 236:glcd/unit_tests.c **** 	glcd_tiny_set_font(Font5x7,5,7,32,127);
 1154               		.loc 1 236 2 view .LVU217
 1155 03c6 0FE7      		ldi r16,lo8(127)
 1156 03c8 20E2      		ldi r18,lo8(32)
 1157 03ca 47E0      		ldi r20,lo8(7)
 1158 03cc 65E0      		ldi r22,lo8(5)
 1159 03ce 80E0      		ldi r24,lo8(Font5x7)
 1160 03d0 90E0      		ldi r25,hi8(Font5x7)
 1161 03d2 0E94 0000 		call glcd_tiny_set_font
 1162               	.LVL78:
 237:glcd/unit_tests.c **** 	glcd_clear_buffer();
 1163               		.loc 1 237 2 view .LVU218
 1164 03d6 0E94 0000 		call glcd_clear_buffer
 1165               	.LVL79:
 238:glcd/unit_tests.c **** 	glcd_tiny_draw_string(0,0,"RECTANGLE DEMO");
 1166               		.loc 1 238 2 view .LVU219
 1167 03da 40E0      		ldi r20,lo8(.LC4)
 1168 03dc 50E0      		ldi r21,hi8(.LC4)
 1169 03de 60E0      		ldi r22,0
 1170 03e0 80E0      		ldi r24,0
 1171 03e2 0E94 0000 		call glcd_tiny_draw_string
 1172               	.LVL80:
 239:glcd/unit_tests.c **** 	glcd_write();
 1173               		.loc 1 239 2 view .LVU220
 1174 03e6 0E94 0000 		call glcd_write
 1175               	.LVL81:
 240:glcd/unit_tests.c **** 	delay_ms(200);
 1176               		.loc 1 240 2 view .LVU221
 1177               	.LBB125:
 1178               	.LBI125:
 166:/usr/avr/include/util/delay.h **** {
 1179               		.loc 3 166 1 view .LVU222
 1180               	.LBB126:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1181               		.loc 3 168 2 view .LVU223
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1182               		.loc 3 190 2 view .LVU224
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1183               		.loc 3 191 2 view .LVU225
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1184               		.loc 3 192 2 view .LVU226
 194:/usr/avr/include/util/delay.h **** 	{
 1185               		.loc 3 194 7 view .LVU227
 194:/usr/avr/include/util/delay.h **** 	{
 1186               		.loc 3 194 7 is_stmt 0 view .LVU228
 1187               	.LBE126:
 1188               	.LBE125:
 239:glcd/unit_tests.c **** 	delay_ms(200);
 1189               		.loc 1 239 2 view .LVU229
 1190 03ea 80ED      		ldi r24,lo8(-48)
 1191 03ec 97E0      		ldi r25,lo8(7)
 1192               	.LBB132:
 1193               	.LBB131:
 1194               	.LBB127:
 1195               	.LBB128:
 1196               		.loc 2 105 2 view .LVU230
 1197 03ee 20E9      		ldi r18,lo8(-112)
 1198 03f0 31E0      		ldi r19,lo8(1)
 1199               	.LVL82:
 1200               	.L45:
 1201               		.loc 2 105 2 view .LVU231
 1202               	.LBE128:
 1203               	.LBE127:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1204               		.loc 3 201 4 is_stmt 1 view .LVU232
 1205               	.LBB130:
 1206               	.LBI127:
 103:/usr/avr/include/util/delay_basic.h **** {
 1207               		.loc 2 103 1 view .LVU233
 1208               	.LBB129:
 1209               		.loc 2 105 2 view .LVU234
 1210 03f2 F901      		movw r30,r18
 1211               	/* #APP */
 1212               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1213 03f4 3197      		1: sbiw r30,1
 1214 03f6 01F4      		brne 1b
 1215               	 ;  0 "" 2
 1216               	.LVL83:
 1217               		.loc 2 105 2 is_stmt 0 view .LVU235
 1218               	/* #NOAPP */
 1219               	.LBE129:
 1220               	.LBE130:
 202:/usr/avr/include/util/delay.h **** 		}
 1221               		.loc 3 202 4 is_stmt 1 view .LVU236
 202:/usr/avr/include/util/delay.h **** 		}
 1222               		.loc 3 202 4 is_stmt 0 view .LVU237
 1223 03f8 0197      		sbiw r24,1
 1224               	.LVL84:
 198:/usr/avr/include/util/delay.h **** 		{
 1225               		.loc 3 198 8 view .LVU238
 1226 03fa 01F4      		brne .L45
 1227               	.LBE131:
 1228               	.LBE132:
 1229               	.LBB133:
 1230               	.LBB134:
 1231               	.LBB135:
 1232               	.LBB136:
 1233               		.loc 2 105 2 view .LVU239
 1234 03fc C0E9      		ldi r28,lo8(-112)
 1235 03fe D1E0      		ldi r29,lo8(1)
 1236               	.LVL85:
 1237               	.L58:
 1238               		.loc 2 105 2 view .LVU240
 1239               	.LBE136:
 1240               	.LBE135:
 1241               	.LBE134:
 1242               	.LBE133:
 241:glcd/unit_tests.c **** 	
 242:glcd/unit_tests.c **** 	while(1) {
 1243               		.loc 1 242 2 is_stmt 1 view .LVU241
 243:glcd/unit_tests.c **** 		
 244:glcd/unit_tests.c **** 		glcd_clear();
 1244               		.loc 1 244 3 view .LVU242
 1245 0400 0E94 0000 		call glcd_clear
 1246               	.LVL86:
 245:glcd/unit_tests.c **** 		glcd_draw_rect(0,0,100,50,BLACK);
 1247               		.loc 1 245 3 view .LVU243
 1248 0404 01E0      		ldi r16,lo8(1)
 1249 0406 22E3      		ldi r18,lo8(50)
 1250 0408 44E6      		ldi r20,lo8(100)
 1251 040a 60E0      		ldi r22,0
 1252 040c 80E0      		ldi r24,0
 1253 040e 0E94 0000 		call glcd_draw_rect
 1254               	.LVL87:
 246:glcd/unit_tests.c **** 		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect");
 1255               		.loc 1 246 3 view .LVU244
 1256 0412 40E0      		ldi r20,lo8(.LC5)
 1257 0414 50E0      		ldi r21,hi8(.LC5)
 1258 0416 69E0      		ldi r22,lo8(9)
 1259 0418 80E0      		ldi r24,0
 1260 041a 0E94 0000 		call glcd_tiny_draw_string
 1261               	.LVL88:
 247:glcd/unit_tests.c **** 		glcd_write();
 1262               		.loc 1 247 3 view .LVU245
 1263 041e 0E94 0000 		call glcd_write
 1264               	.LVL89:
 248:glcd/unit_tests.c **** 		delay_ms(500);
 1265               		.loc 1 248 3 view .LVU246
 1266               	.LBB141:
 1267               	.LBI133:
 166:/usr/avr/include/util/delay.h **** {
 1268               		.loc 3 166 1 view .LVU247
 1269               	.LBB139:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1270               		.loc 3 168 2 view .LVU248
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1271               		.loc 3 190 2 view .LVU249
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1272               		.loc 3 191 2 view .LVU250
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1273               		.loc 3 192 2 view .LVU251
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1274               		.loc 3 192 2 is_stmt 0 view .LVU252
 1275               	.LBE139:
 1276               	.LBE141:
 247:glcd/unit_tests.c **** 		delay_ms(500);
 1277               		.loc 1 247 3 view .LVU253
 1278 0422 88E8      		ldi r24,lo8(-120)
 1279 0424 93E1      		ldi r25,lo8(19)
 1280               	.LVL90:
 1281               	.L46:
 1282               	.LBB142:
 1283               	.LBB140:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1284               		.loc 3 201 4 is_stmt 1 view .LVU254
 1285               	.LBB138:
 1286               	.LBI135:
 103:/usr/avr/include/util/delay_basic.h **** {
 1287               		.loc 2 103 1 view .LVU255
 1288               	.LBB137:
 1289               		.loc 2 105 2 view .LVU256
 1290 0426 FE01      		movw r30,r28
 1291               	/* #APP */
 1292               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1293 0428 3197      		1: sbiw r30,1
 1294 042a 01F4      		brne 1b
 1295               	 ;  0 "" 2
 1296               	.LVL91:
 1297               		.loc 2 105 2 is_stmt 0 view .LVU257
 1298               	/* #NOAPP */
 1299               	.LBE137:
 1300               	.LBE138:
 202:/usr/avr/include/util/delay.h **** 		}
 1301               		.loc 3 202 4 is_stmt 1 view .LVU258
 202:/usr/avr/include/util/delay.h **** 		}
 1302               		.loc 3 202 4 is_stmt 0 view .LVU259
 1303 042c 0197      		sbiw r24,1
 1304               	.LVL92:
 198:/usr/avr/include/util/delay.h **** 		{
 1305               		.loc 3 198 8 view .LVU260
 1306 042e 01F4      		brne .L46
 1307               	.LVL93:
 198:/usr/avr/include/util/delay.h **** 		{
 1308               		.loc 3 198 8 view .LVU261
 1309               	.LBE140:
 1310               	.LBE142:
 249:glcd/unit_tests.c **** 		DEMO_RETURN();
 1311               		.loc 1 249 3 is_stmt 1 view .LVU262
 1312 0430 8091 0000 		lds r24,unit_test_return
 1313 0434 8823      		tst r24
 1314 0436 01F0      		breq .L47
 1315               	.L68:
 250:glcd/unit_tests.c **** 		
 251:glcd/unit_tests.c **** 		glcd_clear();
 252:glcd/unit_tests.c **** 		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
 253:glcd/unit_tests.c **** 		glcd_write();
 254:glcd/unit_tests.c **** 
 255:glcd/unit_tests.c **** 		glcd_draw_rect_thick(5,5,80,30,3,6,BLACK);
 256:glcd/unit_tests.c **** 		glcd_write();
 257:glcd/unit_tests.c **** 		delay_ms(500);
 258:glcd/unit_tests.c **** 		DEMO_RETURN();
 259:glcd/unit_tests.c **** 		
 260:glcd/unit_tests.c **** 		glcd_draw_rect_thick(0,0,20,20,2,2,BLACK);
 261:glcd/unit_tests.c **** 		glcd_write();
 262:glcd/unit_tests.c **** 		delay_ms(500);
 263:glcd/unit_tests.c **** 		DEMO_RETURN();
 264:glcd/unit_tests.c **** 		
 265:glcd/unit_tests.c **** 		glcd_draw_rect_thick(100,10,20,20,5,5,BLACK);
 266:glcd/unit_tests.c **** 		glcd_write();
 267:glcd/unit_tests.c **** 		delay_ms(500);
 268:glcd/unit_tests.c **** 		DEMO_RETURN();
 269:glcd/unit_tests.c **** 
 270:glcd/unit_tests.c **** 		glcd_clear();
 271:glcd/unit_tests.c **** 		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
 272:glcd/unit_tests.c **** 		glcd_draw_rect_shadow(0,0,45,30,BLACK);
 273:glcd/unit_tests.c **** 		glcd_write();
 274:glcd/unit_tests.c **** 		delay_ms(500);
 275:glcd/unit_tests.c **** 		DEMO_RETURN();
 276:glcd/unit_tests.c **** 		
 277:glcd/unit_tests.c **** 		glcd_draw_rect_shadow(95,5,30,30,BLACK);
 278:glcd/unit_tests.c **** 		glcd_write();
 279:glcd/unit_tests.c **** 		delay_ms(500);
 280:glcd/unit_tests.c **** 		DEMO_RETURN();
 1316               		.loc 1 280 3 discriminator 1 view .LVU263
 1317 0438 1092 0000 		sts unit_test_return,__zero_reg__
 1318               		.loc 1 280 3 discriminator 1 view .LVU264
 1319               	/* epilogue start */
 281:glcd/unit_tests.c **** 		
 282:glcd/unit_tests.c **** 	}
 283:glcd/unit_tests.c **** 	
 284:glcd/unit_tests.c **** }
 1320               		.loc 1 284 1 is_stmt 0 discriminator 1 view .LVU265
 1321 043c DF91      		pop r29
 1322 043e CF91      		pop r28
 1323 0440 0F91      		pop r16
 1324 0442 EF90      		pop r14
 1325 0444 CF90      		pop r12
 1326 0446 0895      		ret
 1327               	.L47:
 249:glcd/unit_tests.c **** 		
 1328               		.loc 1 249 16 is_stmt 1 discriminator 2 view .LVU266
 251:glcd/unit_tests.c **** 		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
 1329               		.loc 1 251 3 discriminator 2 view .LVU267
 1330 0448 0E94 0000 		call glcd_clear
 1331               	.LVL94:
 252:glcd/unit_tests.c **** 		glcd_write();
 1332               		.loc 1 252 3 discriminator 2 view .LVU268
 1333 044c 40E0      		ldi r20,lo8(.LC6)
 1334 044e 50E0      		ldi r21,hi8(.LC6)
 1335 0450 69E0      		ldi r22,lo8(9)
 1336 0452 80E0      		ldi r24,0
 1337 0454 0E94 0000 		call glcd_tiny_draw_string
 1338               	.LVL95:
 253:glcd/unit_tests.c **** 
 1339               		.loc 1 253 3 discriminator 2 view .LVU269
 1340 0458 0E94 0000 		call glcd_write
 1341               	.LVL96:
 255:glcd/unit_tests.c **** 		glcd_write();
 1342               		.loc 1 255 3 discriminator 2 view .LVU270
 1343 045c CC24      		clr r12
 1344 045e C394      		inc r12
 1345 0460 26E0      		ldi r18,lo8(6)
 1346 0462 E22E      		mov r14,r18
 1347 0464 03E0      		ldi r16,lo8(3)
 1348 0466 2EE1      		ldi r18,lo8(30)
 1349 0468 40E5      		ldi r20,lo8(80)
 1350 046a 65E0      		ldi r22,lo8(5)
 1351 046c 85E0      		ldi r24,lo8(5)
 1352 046e 0E94 0000 		call glcd_draw_rect_thick
 1353               	.LVL97:
 256:glcd/unit_tests.c **** 		delay_ms(500);
 1354               		.loc 1 256 3 discriminator 2 view .LVU271
 1355 0472 0E94 0000 		call glcd_write
 1356               	.LVL98:
 257:glcd/unit_tests.c **** 		DEMO_RETURN();
 1357               		.loc 1 257 3 discriminator 2 view .LVU272
 1358               	.LBB143:
 1359               	.LBI143:
 166:/usr/avr/include/util/delay.h **** {
 1360               		.loc 3 166 1 discriminator 2 view .LVU273
 1361               	.LBB144:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1362               		.loc 3 168 2 discriminator 2 view .LVU274
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1363               		.loc 3 190 2 discriminator 2 view .LVU275
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1364               		.loc 3 191 2 discriminator 2 view .LVU276
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1365               		.loc 3 192 2 discriminator 2 view .LVU277
 194:/usr/avr/include/util/delay.h **** 	{
 1366               		.loc 3 194 7 discriminator 2 view .LVU278
 194:/usr/avr/include/util/delay.h **** 	{
 1367               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU279
 1368               	.LBE144:
 1369               	.LBE143:
 256:glcd/unit_tests.c **** 		delay_ms(500);
 1370               		.loc 1 256 3 discriminator 2 view .LVU280
 1371 0476 88E8      		ldi r24,lo8(-120)
 1372 0478 93E1      		ldi r25,lo8(19)
 1373               	.LVL99:
 1374               	.L49:
 1375               	.LBB148:
 1376               	.LBB147:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1377               		.loc 3 201 4 is_stmt 1 view .LVU281
 1378               	.LBB145:
 1379               	.LBI145:
 103:/usr/avr/include/util/delay_basic.h **** {
 1380               		.loc 2 103 1 view .LVU282
 1381               	.LBB146:
 1382               		.loc 2 105 2 view .LVU283
 1383 047a FE01      		movw r30,r28
 1384               	/* #APP */
 1385               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1386 047c 3197      		1: sbiw r30,1
 1387 047e 01F4      		brne 1b
 1388               	 ;  0 "" 2
 1389               	.LVL100:
 1390               		.loc 2 105 2 is_stmt 0 view .LVU284
 1391               	/* #NOAPP */
 1392               	.LBE146:
 1393               	.LBE145:
 202:/usr/avr/include/util/delay.h **** 		}
 1394               		.loc 3 202 4 is_stmt 1 view .LVU285
 202:/usr/avr/include/util/delay.h **** 		}
 1395               		.loc 3 202 4 is_stmt 0 view .LVU286
 1396 0480 0197      		sbiw r24,1
 1397               	.LVL101:
 198:/usr/avr/include/util/delay.h **** 		{
 1398               		.loc 3 198 8 view .LVU287
 1399 0482 01F4      		brne .L49
 1400               	.LVL102:
 198:/usr/avr/include/util/delay.h **** 		{
 1401               		.loc 3 198 8 view .LVU288
 1402               	.LBE147:
 1403               	.LBE148:
 258:glcd/unit_tests.c **** 		
 1404               		.loc 1 258 3 is_stmt 1 discriminator 2 view .LVU289
 1405 0484 8091 0000 		lds r24,unit_test_return
 1406 0488 8111      		cpse r24,__zero_reg__
 1407 048a 00C0      		rjmp .L68
 258:glcd/unit_tests.c **** 		
 1408               		.loc 1 258 16 discriminator 2 view .LVU290
 260:glcd/unit_tests.c **** 		glcd_write();
 1409               		.loc 1 260 3 discriminator 2 view .LVU291
 1410 048c CC24      		clr r12
 1411 048e C394      		inc r12
 1412 0490 92E0      		ldi r25,lo8(2)
 1413 0492 E92E      		mov r14,r25
 1414 0494 02E0      		ldi r16,lo8(2)
 1415 0496 24E1      		ldi r18,lo8(20)
 1416 0498 44E1      		ldi r20,lo8(20)
 1417 049a 60E0      		ldi r22,0
 1418 049c 80E0      		ldi r24,0
 1419 049e 0E94 0000 		call glcd_draw_rect_thick
 1420               	.LVL103:
 261:glcd/unit_tests.c **** 		delay_ms(500);
 1421               		.loc 1 261 3 discriminator 2 view .LVU292
 1422 04a2 0E94 0000 		call glcd_write
 1423               	.LVL104:
 262:glcd/unit_tests.c **** 		DEMO_RETURN();
 1424               		.loc 1 262 3 discriminator 2 view .LVU293
 1425               	.LBB149:
 1426               	.LBI149:
 166:/usr/avr/include/util/delay.h **** {
 1427               		.loc 3 166 1 discriminator 2 view .LVU294
 1428               	.LBB150:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1429               		.loc 3 168 2 discriminator 2 view .LVU295
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1430               		.loc 3 190 2 discriminator 2 view .LVU296
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1431               		.loc 3 191 2 discriminator 2 view .LVU297
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1432               		.loc 3 192 2 discriminator 2 view .LVU298
 194:/usr/avr/include/util/delay.h **** 	{
 1433               		.loc 3 194 7 discriminator 2 view .LVU299
 194:/usr/avr/include/util/delay.h **** 	{
 1434               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU300
 1435               	.LBE150:
 1436               	.LBE149:
 261:glcd/unit_tests.c **** 		delay_ms(500);
 1437               		.loc 1 261 3 discriminator 2 view .LVU301
 1438 04a6 88E8      		ldi r24,lo8(-120)
 1439 04a8 93E1      		ldi r25,lo8(19)
 1440               	.LVL105:
 1441               	.L51:
 1442               	.LBB154:
 1443               	.LBB153:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1444               		.loc 3 201 4 is_stmt 1 view .LVU302
 1445               	.LBB151:
 1446               	.LBI151:
 103:/usr/avr/include/util/delay_basic.h **** {
 1447               		.loc 2 103 1 view .LVU303
 1448               	.LBB152:
 1449               		.loc 2 105 2 view .LVU304
 1450 04aa FE01      		movw r30,r28
 1451               	/* #APP */
 1452               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1453 04ac 3197      		1: sbiw r30,1
 1454 04ae 01F4      		brne 1b
 1455               	 ;  0 "" 2
 1456               	.LVL106:
 1457               		.loc 2 105 2 is_stmt 0 view .LVU305
 1458               	/* #NOAPP */
 1459               	.LBE152:
 1460               	.LBE151:
 202:/usr/avr/include/util/delay.h **** 		}
 1461               		.loc 3 202 4 is_stmt 1 view .LVU306
 202:/usr/avr/include/util/delay.h **** 		}
 1462               		.loc 3 202 4 is_stmt 0 view .LVU307
 1463 04b0 0197      		sbiw r24,1
 1464               	.LVL107:
 198:/usr/avr/include/util/delay.h **** 		{
 1465               		.loc 3 198 8 view .LVU308
 1466 04b2 01F4      		brne .L51
 1467               	.LVL108:
 198:/usr/avr/include/util/delay.h **** 		{
 1468               		.loc 3 198 8 view .LVU309
 1469               	.LBE153:
 1470               	.LBE154:
 263:glcd/unit_tests.c **** 		
 1471               		.loc 1 263 3 is_stmt 1 discriminator 2 view .LVU310
 1472 04b4 8091 0000 		lds r24,unit_test_return
 1473 04b8 8111      		cpse r24,__zero_reg__
 1474 04ba 00C0      		rjmp .L68
 263:glcd/unit_tests.c **** 		
 1475               		.loc 1 263 16 discriminator 2 view .LVU311
 265:glcd/unit_tests.c **** 		glcd_write();
 1476               		.loc 1 265 3 discriminator 2 view .LVU312
 1477 04bc CC24      		clr r12
 1478 04be C394      		inc r12
 1479 04c0 85E0      		ldi r24,lo8(5)
 1480 04c2 E82E      		mov r14,r24
 1481 04c4 05E0      		ldi r16,lo8(5)
 1482 04c6 24E1      		ldi r18,lo8(20)
 1483 04c8 44E1      		ldi r20,lo8(20)
 1484 04ca 6AE0      		ldi r22,lo8(10)
 1485 04cc 84E6      		ldi r24,lo8(100)
 1486 04ce 0E94 0000 		call glcd_draw_rect_thick
 1487               	.LVL109:
 266:glcd/unit_tests.c **** 		delay_ms(500);
 1488               		.loc 1 266 3 discriminator 2 view .LVU313
 1489 04d2 0E94 0000 		call glcd_write
 1490               	.LVL110:
 267:glcd/unit_tests.c **** 		DEMO_RETURN();
 1491               		.loc 1 267 3 discriminator 2 view .LVU314
 1492               	.LBB155:
 1493               	.LBI155:
 166:/usr/avr/include/util/delay.h **** {
 1494               		.loc 3 166 1 discriminator 2 view .LVU315
 1495               	.LBB156:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1496               		.loc 3 168 2 discriminator 2 view .LVU316
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1497               		.loc 3 190 2 discriminator 2 view .LVU317
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1498               		.loc 3 191 2 discriminator 2 view .LVU318
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1499               		.loc 3 192 2 discriminator 2 view .LVU319
 194:/usr/avr/include/util/delay.h **** 	{
 1500               		.loc 3 194 7 discriminator 2 view .LVU320
 194:/usr/avr/include/util/delay.h **** 	{
 1501               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU321
 1502               	.LBE156:
 1503               	.LBE155:
 266:glcd/unit_tests.c **** 		delay_ms(500);
 1504               		.loc 1 266 3 discriminator 2 view .LVU322
 1505 04d6 88E8      		ldi r24,lo8(-120)
 1506 04d8 93E1      		ldi r25,lo8(19)
 1507               	.LVL111:
 1508               	.L53:
 1509               	.LBB160:
 1510               	.LBB159:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1511               		.loc 3 201 4 is_stmt 1 view .LVU323
 1512               	.LBB157:
 1513               	.LBI157:
 103:/usr/avr/include/util/delay_basic.h **** {
 1514               		.loc 2 103 1 view .LVU324
 1515               	.LBB158:
 1516               		.loc 2 105 2 view .LVU325
 1517 04da FE01      		movw r30,r28
 1518               	/* #APP */
 1519               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1520 04dc 3197      		1: sbiw r30,1
 1521 04de 01F4      		brne 1b
 1522               	 ;  0 "" 2
 1523               	.LVL112:
 1524               		.loc 2 105 2 is_stmt 0 view .LVU326
 1525               	/* #NOAPP */
 1526               	.LBE158:
 1527               	.LBE157:
 202:/usr/avr/include/util/delay.h **** 		}
 1528               		.loc 3 202 4 is_stmt 1 view .LVU327
 202:/usr/avr/include/util/delay.h **** 		}
 1529               		.loc 3 202 4 is_stmt 0 view .LVU328
 1530 04e0 0197      		sbiw r24,1
 1531               	.LVL113:
 198:/usr/avr/include/util/delay.h **** 		{
 1532               		.loc 3 198 8 view .LVU329
 1533 04e2 01F4      		brne .L53
 1534               	.LVL114:
 198:/usr/avr/include/util/delay.h **** 		{
 1535               		.loc 3 198 8 view .LVU330
 1536               	.LBE159:
 1537               	.LBE160:
 268:glcd/unit_tests.c **** 
 1538               		.loc 1 268 3 is_stmt 1 discriminator 2 view .LVU331
 1539 04e4 8091 0000 		lds r24,unit_test_return
 1540 04e8 8111      		cpse r24,__zero_reg__
 1541 04ea 00C0      		rjmp .L68
 268:glcd/unit_tests.c **** 
 1542               		.loc 1 268 16 discriminator 2 view .LVU332
 270:glcd/unit_tests.c **** 		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
 1543               		.loc 1 270 3 discriminator 2 view .LVU333
 1544 04ec 0E94 0000 		call glcd_clear
 1545               	.LVL115:
 271:glcd/unit_tests.c **** 		glcd_draw_rect_shadow(0,0,45,30,BLACK);
 1546               		.loc 1 271 3 discriminator 2 view .LVU334
 1547 04f0 40E0      		ldi r20,lo8(.LC7)
 1548 04f2 50E0      		ldi r21,hi8(.LC7)
 1549 04f4 69E0      		ldi r22,lo8(9)
 1550 04f6 80E0      		ldi r24,0
 1551 04f8 0E94 0000 		call glcd_tiny_draw_string
 1552               	.LVL116:
 272:glcd/unit_tests.c **** 		glcd_write();
 1553               		.loc 1 272 3 discriminator 2 view .LVU335
 1554 04fc 01E0      		ldi r16,lo8(1)
 1555 04fe 2EE1      		ldi r18,lo8(30)
 1556 0500 4DE2      		ldi r20,lo8(45)
 1557 0502 60E0      		ldi r22,0
 1558 0504 80E0      		ldi r24,0
 1559 0506 0E94 0000 		call glcd_draw_rect_shadow
 1560               	.LVL117:
 273:glcd/unit_tests.c **** 		delay_ms(500);
 1561               		.loc 1 273 3 discriminator 2 view .LVU336
 1562 050a 0E94 0000 		call glcd_write
 1563               	.LVL118:
 274:glcd/unit_tests.c **** 		DEMO_RETURN();
 1564               		.loc 1 274 3 discriminator 2 view .LVU337
 1565               	.LBB161:
 1566               	.LBI161:
 166:/usr/avr/include/util/delay.h **** {
 1567               		.loc 3 166 1 discriminator 2 view .LVU338
 1568               	.LBB162:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1569               		.loc 3 168 2 discriminator 2 view .LVU339
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1570               		.loc 3 190 2 discriminator 2 view .LVU340
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1571               		.loc 3 191 2 discriminator 2 view .LVU341
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1572               		.loc 3 192 2 discriminator 2 view .LVU342
 194:/usr/avr/include/util/delay.h **** 	{
 1573               		.loc 3 194 7 discriminator 2 view .LVU343
 194:/usr/avr/include/util/delay.h **** 	{
 1574               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU344
 1575               	.LBE162:
 1576               	.LBE161:
 273:glcd/unit_tests.c **** 		delay_ms(500);
 1577               		.loc 1 273 3 discriminator 2 view .LVU345
 1578 050e 88E8      		ldi r24,lo8(-120)
 1579 0510 93E1      		ldi r25,lo8(19)
 1580               	.LVL119:
 1581               	.L55:
 1582               	.LBB166:
 1583               	.LBB165:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1584               		.loc 3 201 4 is_stmt 1 view .LVU346
 1585               	.LBB163:
 1586               	.LBI163:
 103:/usr/avr/include/util/delay_basic.h **** {
 1587               		.loc 2 103 1 view .LVU347
 1588               	.LBB164:
 1589               		.loc 2 105 2 view .LVU348
 1590 0512 FE01      		movw r30,r28
 1591               	/* #APP */
 1592               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1593 0514 3197      		1: sbiw r30,1
 1594 0516 01F4      		brne 1b
 1595               	 ;  0 "" 2
 1596               	.LVL120:
 1597               		.loc 2 105 2 is_stmt 0 view .LVU349
 1598               	/* #NOAPP */
 1599               	.LBE164:
 1600               	.LBE163:
 202:/usr/avr/include/util/delay.h **** 		}
 1601               		.loc 3 202 4 is_stmt 1 view .LVU350
 202:/usr/avr/include/util/delay.h **** 		}
 1602               		.loc 3 202 4 is_stmt 0 view .LVU351
 1603 0518 0197      		sbiw r24,1
 1604               	.LVL121:
 198:/usr/avr/include/util/delay.h **** 		{
 1605               		.loc 3 198 8 view .LVU352
 1606 051a 01F4      		brne .L55
 1607               	.LVL122:
 198:/usr/avr/include/util/delay.h **** 		{
 1608               		.loc 3 198 8 view .LVU353
 1609               	.LBE165:
 1610               	.LBE166:
 275:glcd/unit_tests.c **** 		
 1611               		.loc 1 275 3 is_stmt 1 discriminator 2 view .LVU354
 1612 051c 8091 0000 		lds r24,unit_test_return
 1613 0520 8111      		cpse r24,__zero_reg__
 1614 0522 00C0      		rjmp .L68
 275:glcd/unit_tests.c **** 		
 1615               		.loc 1 275 16 discriminator 2 view .LVU355
 277:glcd/unit_tests.c **** 		glcd_write();
 1616               		.loc 1 277 3 discriminator 2 view .LVU356
 1617 0524 01E0      		ldi r16,lo8(1)
 1618 0526 2EE1      		ldi r18,lo8(30)
 1619 0528 4EE1      		ldi r20,lo8(30)
 1620 052a 65E0      		ldi r22,lo8(5)
 1621 052c 8FE5      		ldi r24,lo8(95)
 1622 052e 0E94 0000 		call glcd_draw_rect_shadow
 1623               	.LVL123:
 278:glcd/unit_tests.c **** 		delay_ms(500);
 1624               		.loc 1 278 3 discriminator 2 view .LVU357
 1625 0532 0E94 0000 		call glcd_write
 1626               	.LVL124:
 279:glcd/unit_tests.c **** 		DEMO_RETURN();
 1627               		.loc 1 279 3 discriminator 2 view .LVU358
 1628               	.LBB167:
 1629               	.LBI167:
 166:/usr/avr/include/util/delay.h **** {
 1630               		.loc 3 166 1 discriminator 2 view .LVU359
 1631               	.LBB168:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1632               		.loc 3 168 2 discriminator 2 view .LVU360
 190:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 1633               		.loc 3 190 2 discriminator 2 view .LVU361
 191:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 1634               		.loc 3 191 2 discriminator 2 view .LVU362
 192:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 1635               		.loc 3 192 2 discriminator 2 view .LVU363
 194:/usr/avr/include/util/delay.h **** 	{
 1636               		.loc 3 194 7 discriminator 2 view .LVU364
 194:/usr/avr/include/util/delay.h **** 	{
 1637               		.loc 3 194 7 is_stmt 0 discriminator 2 view .LVU365
 1638               	.LBE168:
 1639               	.LBE167:
 278:glcd/unit_tests.c **** 		delay_ms(500);
 1640               		.loc 1 278 3 discriminator 2 view .LVU366
 1641 0536 88E8      		ldi r24,lo8(-120)
 1642 0538 93E1      		ldi r25,lo8(19)
 1643               	.LVL125:
 1644               	.L57:
 1645               	.LBB172:
 1646               	.LBB171:
 201:/usr/avr/include/util/delay.h **** 			__ticks --;
 1647               		.loc 3 201 4 is_stmt 1 view .LVU367
 1648               	.LBB169:
 1649               	.LBI169:
 103:/usr/avr/include/util/delay_basic.h **** {
 1650               		.loc 2 103 1 view .LVU368
 1651               	.LBB170:
 1652               		.loc 2 105 2 view .LVU369
 1653 053a FE01      		movw r30,r28
 1654               	/* #APP */
 1655               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
 1656 053c 3197      		1: sbiw r30,1
 1657 053e 01F4      		brne 1b
 1658               	 ;  0 "" 2
 1659               	.LVL126:
 1660               		.loc 2 105 2 is_stmt 0 view .LVU370
 1661               	/* #NOAPP */
 1662               	.LBE170:
 1663               	.LBE169:
 202:/usr/avr/include/util/delay.h **** 		}
 1664               		.loc 3 202 4 is_stmt 1 view .LVU371
 202:/usr/avr/include/util/delay.h **** 		}
 1665               		.loc 3 202 4 is_stmt 0 view .LVU372
 1666 0540 0197      		sbiw r24,1
 1667               	.LVL127:
 198:/usr/avr/include/util/delay.h **** 		{
 1668               		.loc 3 198 8 view .LVU373
 1669 0542 01F4      		brne .L57
 1670               	.LVL128:
 198:/usr/avr/include/util/delay.h **** 		{
 1671               		.loc 3 198 8 view .LVU374
 1672               	.LBE171:
 1673               	.LBE172:
 280:glcd/unit_tests.c **** 		
 1674               		.loc 1 280 3 is_stmt 1 discriminator 2 view .LVU375
 1675 0544 8091 0000 		lds r24,unit_test_return
 1676 0548 8823      		tst r24
 1677 054a 01F4      		brne .+2
 1678 054c 00C0      		rjmp .L58
 1679 054e 00C0      		rjmp .L68
 1680               		.cfi_endproc
 1681               	.LFE18:
 1683               	.global	glcd_test_scrolling_graph
 1685               	glcd_test_scrolling_graph:
 1686               	.LFB19:
 285:glcd/unit_tests.c **** 
 286:glcd/unit_tests.c **** void glcd_test_scrolling_graph(void)
 287:glcd/unit_tests.c **** {
 1687               		.loc 1 287 1 view -0
 1688               		.cfi_startproc
 1689 0550 0F93      		push r16
 1690               	.LCFI56:
 1691               		.cfi_def_cfa_offset 3
 1692               		.cfi_offset 16, -2
 1693 0552 CF93      		push r28
 1694               	.LCFI57:
 1695               		.cfi_def_cfa_offset 4
 1696               		.cfi_offset 28, -3
 1697 0554 DF93      		push r29
 1698               	.LCFI58:
 1699               		.cfi_def_cfa_offset 5
 1700               		.cfi_offset 29, -4
 1701               	/* prologue: function */
 1702               	/* frame size = 0 */
 1703               	/* stack size = 3 */
 1704               	.L__stack_usage = 3
 288:glcd/unit_tests.c **** 	glcd_clear();
 1705               		.loc 1 288 2 view .LVU377
 1706 0556 0E94 0000 		call glcd_clear
 1707               	.LVL129:
 289:glcd/unit_tests.c **** 	glcd_write();
 1708               		.loc 1 289 2 view .LVU378
 1709 055a 0E94 0000 		call glcd_write
 1710               	.LVL130:
 1711               	.L75:
 290:glcd/unit_tests.c **** 	while(1) {
 1712               		.loc 1 290 2 view .LVU379
 1713               	.LBB173:
 291:glcd/unit_tests.c **** 		uint16_t n;
 1714               		.loc 1 291 3 view .LVU380
 292:glcd/unit_tests.c **** 		for (n=0; n<=255; n += 20) {
 1715               		.loc 1 292 3 view .LVU381
 1716               		.loc 1 292 3 is_stmt 0 view .LVU382
 1717               	.LBE173:
 287:glcd/unit_tests.c **** 	glcd_clear();
 1718               		.loc 1 287 1 view .LVU383
 1719 055e C0E0      		ldi r28,0
 1720               	.LVL131:
 1721               	.L72:
 1722               	.LBB174:
 293:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(0,0,50,50,n);
 1723               		.loc 1 293 4 is_stmt 1 view .LVU384
 1724 0560 0C2F      		mov r16,r28
 1725 0562 22E3      		ldi r18,lo8(50)
 1726 0564 42E3      		ldi r20,lo8(50)
 1727 0566 60E0      		ldi r22,0
 1728 0568 80E0      		ldi r24,0
 1729 056a 0E94 0000 		call glcd_scrolling_bar_graph
 1730               	.LVL132:
 294:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,0,50,30,n);
 1731               		.loc 1 294 4 view .LVU385
 1732 056e 2EE1      		ldi r18,lo8(30)
 1733 0570 42E3      		ldi r20,lo8(50)
 1734 0572 60E0      		ldi r22,0
 1735 0574 8CE3      		ldi r24,lo8(60)
 1736 0576 0E94 0000 		call glcd_scrolling_bar_graph
 1737               	.LVL133:
 295:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,35,60,20,n);
 1738               		.loc 1 295 4 view .LVU386
 1739 057a 24E1      		ldi r18,lo8(20)
 1740 057c 4CE3      		ldi r20,lo8(60)
 1741 057e 63E2      		ldi r22,lo8(35)
 1742 0580 8CE3      		ldi r24,lo8(60)
 1743 0582 0E94 0000 		call glcd_scrolling_bar_graph
 1744               	.LVL134:
 296:glcd/unit_tests.c **** 			DEMO_RETURN();
 1745               		.loc 1 296 4 view .LVU387
 1746 0586 8091 0000 		lds r24,unit_test_return
 1747 058a 8823      		tst r24
 1748 058c 01F0      		breq .L70
 1749               	.L78:
 297:glcd/unit_tests.c **** 		}
 298:glcd/unit_tests.c **** 		for (n=0; n<=255; n += 20) {
 299:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(0,0,50,50,255-n);
 300:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,0,50,30,n);
 301:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,35,60,20,n);
 302:glcd/unit_tests.c **** 			DEMO_RETURN();
 1750               		.loc 1 302 4 discriminator 1 view .LVU388
 1751 058e 1092 0000 		sts unit_test_return,__zero_reg__
 1752               		.loc 1 302 4 discriminator 1 view .LVU389
 1753               	/* epilogue start */
 1754               	.LBE174:
 303:glcd/unit_tests.c **** 		}
 304:glcd/unit_tests.c **** 	}	
 305:glcd/unit_tests.c **** }
 1755               		.loc 1 305 1 is_stmt 0 discriminator 1 view .LVU390
 1756 0592 DF91      		pop r29
 1757 0594 CF91      		pop r28
 1758 0596 0F91      		pop r16
 1759 0598 0895      		ret
 1760               	.L70:
 1761               	.LBB175:
 296:glcd/unit_tests.c **** 		}
 1762               		.loc 1 296 17 is_stmt 1 discriminator 2 view .LVU391
 296:glcd/unit_tests.c **** 		}
 1763               		.loc 1 296 17 is_stmt 0 discriminator 2 view .LVU392
 1764 059a CC5E      		subi r28,lo8(-(20))
 292:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(0,0,50,50,n);
 1765               		.loc 1 292 3 discriminator 2 view .LVU393
 1766 059c C430      		cpi r28,lo8(4)
 1767 059e 01F4      		brne .L72
 1768 05a0 CFEF      		ldi r28,lo8(-1)
 1769               	.L74:
 299:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,0,50,30,n);
 1770               		.loc 1 299 4 is_stmt 1 view .LVU394
 1771 05a2 0C2F      		mov r16,r28
 1772 05a4 22E3      		ldi r18,lo8(50)
 1773 05a6 42E3      		ldi r20,lo8(50)
 1774 05a8 60E0      		ldi r22,0
 1775 05aa 80E0      		ldi r24,0
 1776 05ac 0E94 0000 		call glcd_scrolling_bar_graph
 1777               	.LVL135:
 300:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(60,35,60,20,n);
 1778               		.loc 1 300 4 view .LVU395
 1779 05b0 DC2F      		mov r29,r28
 1780 05b2 D095      		com r29
 1781 05b4 0D2F      		mov r16,r29
 1782 05b6 2EE1      		ldi r18,lo8(30)
 1783 05b8 42E3      		ldi r20,lo8(50)
 1784 05ba 60E0      		ldi r22,0
 1785 05bc 8CE3      		ldi r24,lo8(60)
 1786 05be 0E94 0000 		call glcd_scrolling_bar_graph
 1787               	.LVL136:
 301:glcd/unit_tests.c **** 			DEMO_RETURN();
 1788               		.loc 1 301 4 view .LVU396
 1789 05c2 24E1      		ldi r18,lo8(20)
 1790 05c4 4CE3      		ldi r20,lo8(60)
 1791 05c6 63E2      		ldi r22,lo8(35)
 1792 05c8 8CE3      		ldi r24,lo8(60)
 1793 05ca 0E94 0000 		call glcd_scrolling_bar_graph
 1794               	.LVL137:
 302:glcd/unit_tests.c **** 		}
 1795               		.loc 1 302 4 view .LVU397
 1796 05ce 8091 0000 		lds r24,unit_test_return
 1797 05d2 8111      		cpse r24,__zero_reg__
 1798 05d4 00C0      		rjmp .L78
 302:glcd/unit_tests.c **** 		}
 1799               		.loc 1 302 17 discriminator 2 view .LVU398
 302:glcd/unit_tests.c **** 		}
 1800               		.loc 1 302 17 is_stmt 0 discriminator 2 view .LVU399
 1801 05d6 C451      		subi r28,lo8(-(-20))
 298:glcd/unit_tests.c **** 			glcd_scrolling_bar_graph(0,0,50,50,255-n);
 1802               		.loc 1 298 3 discriminator 2 view .LVU400
 1803 05d8 CB3F      		cpi r28,lo8(-5)
 1804 05da 01F4      		brne .L74
 1805 05dc 00C0      		rjmp .L75
 1806               	.LBE175:
 1807               		.cfi_endproc
 1808               	.LFE19:
 1810               	.global	glcd_test_bitmap_128x64
 1812               	glcd_test_bitmap_128x64:
 1813               	.LFB20:
 306:glcd/unit_tests.c **** 
 307:glcd/unit_tests.c **** #if defined (GLCD_UNIT_TEST_BITMAP_ENABLE)
 308:glcd/unit_tests.c **** void glcd_test_bitmap_128x64(void)
 309:glcd/unit_tests.c **** {
 1814               		.loc 1 309 1 is_stmt 1 view -0
 1815               		.cfi_startproc
 1816               	/* prologue: function */
 1817               	/* frame size = 0 */
 1818               	/* stack size = 0 */
 1819               	.L__stack_usage = 0
 310:glcd/unit_tests.c **** 	glcd_draw_bitmap(bmp_oslogo);
 1820               		.loc 1 310 2 view .LVU402
 1821 05de 80E0      		ldi r24,lo8(bmp_oslogo)
 1822 05e0 90E0      		ldi r25,hi8(bmp_oslogo)
 1823 05e2 0E94 0000 		call glcd_draw_bitmap
 1824               	.LVL138:
 311:glcd/unit_tests.c **** 	glcd_write();	
 1825               		.loc 1 311 2 view .LVU403
 1826 05e6 0E94 0000 		call glcd_write
 1827               	.LVL139:
 1828               	.L80:
 312:glcd/unit_tests.c **** 	while (1) {
 1829               		.loc 1 312 2 view .LVU404
 313:glcd/unit_tests.c **** 		DEMO_RETURN();
 1830               		.loc 1 313 3 view .LVU405
 1831 05ea 8091 0000 		lds r24,unit_test_return
 1832 05ee 8823      		tst r24
 1833 05f0 01F0      		breq .L80
 1834               		.loc 1 313 3 discriminator 1 view .LVU406
 1835 05f2 1092 0000 		sts unit_test_return,__zero_reg__
 1836               		.loc 1 313 3 discriminator 1 view .LVU407
 1837               	/* epilogue start */
 314:glcd/unit_tests.c **** 	}
 315:glcd/unit_tests.c **** }
 1838               		.loc 1 315 1 is_stmt 0 discriminator 1 view .LVU408
 1839 05f6 0895      		ret
 1840               		.cfi_endproc
 1841               	.LFE20:
 1843               	.global	font_Earthbound_12x19_48to57
 1844               		.section	.progmem.data,"a",@progbits
 1847               	font_Earthbound_12x19_48to57:
 1848 0000 00        		.byte	0
 1849 0001 E0        		.byte	-32
 1850 0002 F0        		.byte	-16
 1851 0003 38        		.byte	56
 1852 0004 0C        		.byte	12
 1853 0005 0C        		.byte	12
 1854 0006 0C        		.byte	12
 1855 0007 0C        		.byte	12
 1856 0008 38        		.byte	56
 1857 0009 F8        		.byte	-8
 1858 000a C0        		.byte	-64
 1859 000b 00        		.byte	0
 1860 000c 00        		.byte	0
 1861 000d 1F        		.byte	31
 1862 000e 7F        		.byte	127
 1863 000f E0        		.byte	-32
 1864 0010 80        		.byte	-128
 1865 0011 80        		.byte	-128
 1866 0012 80        		.byte	-128
 1867 0013 80        		.byte	-128
 1868 0014 E0        		.byte	-32
 1869 0015 FF        		.byte	-1
 1870 0016 1F        		.byte	31
 1871 0017 00        		.byte	0
 1872 0018 00        		.byte	0
 1873 0019 00        		.byte	0
 1874 001a 00        		.byte	0
 1875 001b 01        		.byte	1
 1876 001c 01        		.byte	1
 1877 001d 01        		.byte	1
 1878 001e 01        		.byte	1
 1879 001f 01        		.byte	1
 1880 0020 00        		.byte	0
 1881 0021 00        		.byte	0
 1882 0022 00        		.byte	0
 1883 0023 00        		.byte	0
 1884 0024 00        		.byte	0
 1885 0025 10        		.byte	16
 1886 0026 18        		.byte	24
 1887 0027 18        		.byte	24
 1888 0028 FC        		.byte	-4
 1889 0029 FC        		.byte	-4
 1890 002a 00        		.byte	0
 1891 002b 00        		.byte	0
 1892 002c 00        		.byte	0
 1893 002d 00        		.byte	0
 1894 002e 00        		.byte	0
 1895 002f 00        		.byte	0
 1896 0030 00        		.byte	0
 1897 0031 00        		.byte	0
 1898 0032 00        		.byte	0
 1899 0033 00        		.byte	0
 1900 0034 FF        		.byte	-1
 1901 0035 FF        		.byte	-1
 1902 0036 00        		.byte	0
 1903 0037 00        		.byte	0
 1904 0038 00        		.byte	0
 1905 0039 00        		.byte	0
 1906 003a 00        		.byte	0
 1907 003b 00        		.byte	0
 1908 003c 00        		.byte	0
 1909 003d 00        		.byte	0
 1910 003e 00        		.byte	0
 1911 003f 00        		.byte	0
 1912 0040 01        		.byte	1
 1913 0041 01        		.byte	1
 1914 0042 00        		.byte	0
 1915 0043 00        		.byte	0
 1916 0044 00        		.byte	0
 1917 0045 00        		.byte	0
 1918 0046 00        		.byte	0
 1919 0047 00        		.byte	0
 1920 0048 00        		.byte	0
 1921 0049 08        		.byte	8
 1922 004a 1C        		.byte	28
 1923 004b 0C        		.byte	12
 1924 004c 0C        		.byte	12
 1925 004d 0C        		.byte	12
 1926 004e 0C        		.byte	12
 1927 004f 8C        		.byte	-116
 1928 0050 F8        		.byte	-8
 1929 0051 F0        		.byte	-16
 1930 0052 00        		.byte	0
 1931 0053 00        		.byte	0
 1932 0054 00        		.byte	0
 1933 0055 F0        		.byte	-16
 1934 0056 F8        		.byte	-8
 1935 0057 9C        		.byte	-100
 1936 0058 8C        		.byte	-116
 1937 0059 86        		.byte	-122
 1938 005a 86        		.byte	-122
 1939 005b 83        		.byte	-125
 1940 005c 83        		.byte	-125
 1941 005d 80        		.byte	-128
 1942 005e 00        		.byte	0
 1943 005f 00        		.byte	0
 1944 0060 00        		.byte	0
 1945 0061 01        		.byte	1
 1946 0062 01        		.byte	1
 1947 0063 01        		.byte	1
 1948 0064 01        		.byte	1
 1949 0065 01        		.byte	1
 1950 0066 01        		.byte	1
 1951 0067 01        		.byte	1
 1952 0068 01        		.byte	1
 1953 0069 01        		.byte	1
 1954 006a 00        		.byte	0
 1955 006b 00        		.byte	0
 1956 006c 00        		.byte	0
 1957 006d 08        		.byte	8
 1958 006e 1C        		.byte	28
 1959 006f 0C        		.byte	12
 1960 0070 0C        		.byte	12
 1961 0071 0C        		.byte	12
 1962 0072 0C        		.byte	12
 1963 0073 8C        		.byte	-116
 1964 0074 F8        		.byte	-8
 1965 0075 F0        		.byte	-16
 1966 0076 00        		.byte	0
 1967 0077 00        		.byte	0
 1968 0078 00        		.byte	0
 1969 0079 80        		.byte	-128
 1970 007a C0        		.byte	-64
 1971 007b 80        		.byte	-128
 1972 007c 81        		.byte	-127
 1973 007d 83        		.byte	-125
 1974 007e 83        		.byte	-125
 1975 007f C7        		.byte	-57
 1976 0080 FF        		.byte	-1
 1977 0081 7C        		.byte	124
 1978 0082 00        		.byte	0
 1979 0083 00        		.byte	0
 1980 0084 00        		.byte	0
 1981 0085 00        		.byte	0
 1982 0086 01        		.byte	1
 1983 0087 01        		.byte	1
 1984 0088 01        		.byte	1
 1985 0089 01        		.byte	1
 1986 008a 01        		.byte	1
 1987 008b 01        		.byte	1
 1988 008c 00        		.byte	0
 1989 008d 00        		.byte	0
 1990 008e 00        		.byte	0
 1991 008f 00        		.byte	0
 1992 0090 00        		.byte	0
 1993 0091 00        		.byte	0
 1994 0092 00        		.byte	0
 1995 0093 80        		.byte	-128
 1996 0094 C0        		.byte	-64
 1997 0095 70        		.byte	112
 1998 0096 38        		.byte	56
 1999 0097 FC        		.byte	-4
 2000 0098 FC        		.byte	-4
 2001 0099 00        		.byte	0
 2002 009a 00        		.byte	0
 2003 009b 00        		.byte	0
 2004 009c 00        		.byte	0
 2005 009d 1C        		.byte	28
 2006 009e 1E        		.byte	30
 2007 009f 1B        		.byte	27
 2008 00a0 11        		.byte	17
 2009 00a1 18        		.byte	24
 2010 00a2 10        		.byte	16
 2011 00a3 FF        		.byte	-1
 2012 00a4 FF        		.byte	-1
 2013 00a5 10        		.byte	16
 2014 00a6 18        		.byte	24
 2015 00a7 00        		.byte	0
 2016 00a8 00        		.byte	0
 2017 00a9 00        		.byte	0
 2018 00aa 00        		.byte	0
 2019 00ab 00        		.byte	0
 2020 00ac 00        		.byte	0
 2021 00ad 00        		.byte	0
 2022 00ae 00        		.byte	0
 2023 00af 01        		.byte	1
 2024 00b0 01        		.byte	1
 2025 00b1 00        		.byte	0
 2026 00b2 00        		.byte	0
 2027 00b3 00        		.byte	0
 2028 00b4 00        		.byte	0
 2029 00b5 00        		.byte	0
 2030 00b6 F4        		.byte	-12
 2031 00b7 FC        		.byte	-4
 2032 00b8 1C        		.byte	28
 2033 00b9 0C        		.byte	12
 2034 00ba 0C        		.byte	12
 2035 00bb 0C        		.byte	12
 2036 00bc 0C        		.byte	12
 2037 00bd 00        		.byte	0
 2038 00be 00        		.byte	0
 2039 00bf 00        		.byte	0
 2040 00c0 00        		.byte	0
 2041 00c1 80        		.byte	-128
 2042 00c2 C3        		.byte	-61
 2043 00c3 83        		.byte	-125
 2044 00c4 83        		.byte	-125
 2045 00c5 83        		.byte	-125
 2046 00c6 83        		.byte	-125
 2047 00c7 C7        		.byte	-57
 2048 00c8 FE        		.byte	-2
 2049 00c9 78        		.byte	120
 2050 00ca 00        		.byte	0
 2051 00cb 00        		.byte	0
 2052 00cc 00        		.byte	0
 2053 00cd 00        		.byte	0
 2054 00ce 00        		.byte	0
 2055 00cf 01        		.byte	1
 2056 00d0 01        		.byte	1
 2057 00d1 01        		.byte	1
 2058 00d2 01        		.byte	1
 2059 00d3 01        		.byte	1
 2060 00d4 00        		.byte	0
 2061 00d5 00        		.byte	0
 2062 00d6 00        		.byte	0
 2063 00d7 00        		.byte	0
 2064 00d8 00        		.byte	0
 2065 00d9 C0        		.byte	-64
 2066 00da F0        		.byte	-16
 2067 00db 78        		.byte	120
 2068 00dc 1C        		.byte	28
 2069 00dd 0C        		.byte	12
 2070 00de 0C        		.byte	12
 2071 00df 0C        		.byte	12
 2072 00e0 08        		.byte	8
 2073 00e1 00        		.byte	0
 2074 00e2 00        		.byte	0
 2075 00e3 00        		.byte	0
 2076 00e4 00        		.byte	0
 2077 00e5 3F        		.byte	63
 2078 00e6 FF        		.byte	-1
 2079 00e7 C3        		.byte	-61
 2080 00e8 83        		.byte	-125
 2081 00e9 83        		.byte	-125
 2082 00ea 83        		.byte	-125
 2083 00eb C3        		.byte	-61
 2084 00ec FE        		.byte	-2
 2085 00ed 7C        		.byte	124
 2086 00ee 00        		.byte	0
 2087 00ef 00        		.byte	0
 2088 00f0 00        		.byte	0
 2089 00f1 00        		.byte	0
 2090 00f2 00        		.byte	0
 2091 00f3 01        		.byte	1
 2092 00f4 01        		.byte	1
 2093 00f5 01        		.byte	1
 2094 00f6 01        		.byte	1
 2095 00f7 01        		.byte	1
 2096 00f8 00        		.byte	0
 2097 00f9 00        		.byte	0
 2098 00fa 00        		.byte	0
 2099 00fb 00        		.byte	0
 2100 00fc 00        		.byte	0
 2101 00fd 0C        		.byte	12
 2102 00fe 0C        		.byte	12
 2103 00ff 0C        		.byte	12
 2104 0100 0C        		.byte	12
 2105 0101 8C        		.byte	-116
 2106 0102 CC        		.byte	-52
 2107 0103 7C        		.byte	124
 2108 0104 3C        		.byte	60
 2109 0105 0C        		.byte	12
 2110 0106 00        		.byte	0
 2111 0107 00        		.byte	0
 2112 0108 00        		.byte	0
 2113 0109 00        		.byte	0
 2114 010a 80        		.byte	-128
 2115 010b F0        		.byte	-16
 2116 010c 7C        		.byte	124
 2117 010d 0F        		.byte	15
 2118 010e 03        		.byte	3
 2119 010f 00        		.byte	0
 2120 0110 00        		.byte	0
 2121 0111 00        		.byte	0
 2122 0112 00        		.byte	0
 2123 0113 00        		.byte	0
 2124 0114 00        		.byte	0
 2125 0115 00        		.byte	0
 2126 0116 01        		.byte	1
 2127 0117 01        		.byte	1
 2128 0118 00        		.byte	0
 2129 0119 00        		.byte	0
 2130 011a 00        		.byte	0
 2131 011b 00        		.byte	0
 2132 011c 00        		.byte	0
 2133 011d 00        		.byte	0
 2134 011e 00        		.byte	0
 2135 011f 00        		.byte	0
 2136 0120 00        		.byte	0
 2137 0121 F0        		.byte	-16
 2138 0122 F8        		.byte	-8
 2139 0123 1C        		.byte	28
 2140 0124 0C        		.byte	12
 2141 0125 0C        		.byte	12
 2142 0126 0C        		.byte	12
 2143 0127 0C        		.byte	12
 2144 0128 F8        		.byte	-8
 2145 0129 F0        		.byte	-16
 2146 012a 00        		.byte	0
 2147 012b 00        		.byte	0
 2148 012c 00        		.byte	0
 2149 012d F8        		.byte	-8
 2150 012e FF        		.byte	-1
 2151 012f 8F        		.byte	-113
 2152 0130 07        		.byte	7
 2153 0131 06        		.byte	6
 2154 0132 06        		.byte	6
 2155 0133 8F        		.byte	-113
 2156 0134 FF        		.byte	-1
 2157 0135 F8        		.byte	-8
 2158 0136 00        		.byte	0
 2159 0137 00        		.byte	0
 2160 0138 00        		.byte	0
 2161 0139 00        		.byte	0
 2162 013a 01        		.byte	1
 2163 013b 03        		.byte	3
 2164 013c 03        		.byte	3
 2165 013d 03        		.byte	3
 2166 013e 03        		.byte	3
 2167 013f 01        		.byte	1
 2168 0140 01        		.byte	1
 2169 0141 00        		.byte	0
 2170 0142 00        		.byte	0
 2171 0143 00        		.byte	0
 2172 0144 00        		.byte	0
 2173 0145 F0        		.byte	-16
 2174 0146 F8        		.byte	-8
 2175 0147 1C        		.byte	28
 2176 0148 0C        		.byte	12
 2177 0149 0C        		.byte	12
 2178 014a 0C        		.byte	12
 2179 014b 1C        		.byte	28
 2180 014c F8        		.byte	-8
 2181 014d E0        		.byte	-32
 2182 014e 00        		.byte	0
 2183 014f 00        		.byte	0
 2184 0150 00        		.byte	0
 2185 0151 01        		.byte	1
 2186 0152 87        		.byte	-121
 2187 0153 8E        		.byte	-114
 2188 0154 8C        		.byte	-116
 2189 0155 8C        		.byte	-116
 2190 0156 8C        		.byte	-116
 2191 0157 EE        		.byte	-18
 2192 0158 7F        		.byte	127
 2193 0159 1F        		.byte	31
 2194 015a 00        		.byte	0
 2195 015b 00        		.byte	0
 2196 015c 00        		.byte	0
 2197 015d 00        		.byte	0
 2198 015e 01        		.byte	1
 2199 015f 01        		.byte	1
 2200 0160 01        		.byte	1
 2201 0161 01        		.byte	1
 2202 0162 01        		.byte	1
 2203 0163 00        		.byte	0
 2204 0164 00        		.byte	0
 2205 0165 00        		.byte	0
 2206 0166 00        		.byte	0
 2207 0167 00        		.byte	0
 2208               	.global	bmp_oslogo
 2211               	bmp_oslogo:
 2212 0168 00        		.byte	0
 2213 0169 00        		.byte	0
 2214 016a 00        		.byte	0
 2215 016b 00        		.byte	0
 2216 016c 00        		.byte	0
 2217 016d 00        		.byte	0
 2218 016e 00        		.byte	0
 2219 016f 00        		.byte	0
 2220 0170 00        		.byte	0
 2221 0171 00        		.byte	0
 2222 0172 00        		.byte	0
 2223 0173 00        		.byte	0
 2224 0174 00        		.byte	0
 2225 0175 00        		.byte	0
 2226 0176 00        		.byte	0
 2227 0177 00        		.byte	0
 2228 0178 00        		.byte	0
 2229 0179 00        		.byte	0
 2230 017a 00        		.byte	0
 2231 017b 00        		.byte	0
 2232 017c 00        		.byte	0
 2233 017d 00        		.byte	0
 2234 017e 00        		.byte	0
 2235 017f 00        		.byte	0
 2236 0180 00        		.byte	0
 2237 0181 00        		.byte	0
 2238 0182 00        		.byte	0
 2239 0183 00        		.byte	0
 2240 0184 00        		.byte	0
 2241 0185 00        		.byte	0
 2242 0186 00        		.byte	0
 2243 0187 00        		.byte	0
 2244 0188 00        		.byte	0
 2245 0189 00        		.byte	0
 2246 018a 00        		.byte	0
 2247 018b 00        		.byte	0
 2248 018c 00        		.byte	0
 2249 018d 00        		.byte	0
 2250 018e 00        		.byte	0
 2251 018f 00        		.byte	0
 2252 0190 00        		.byte	0
 2253 0191 00        		.byte	0
 2254 0192 00        		.byte	0
 2255 0193 00        		.byte	0
 2256 0194 00        		.byte	0
 2257 0195 00        		.byte	0
 2258 0196 00        		.byte	0
 2259 0197 00        		.byte	0
 2260 0198 00        		.byte	0
 2261 0199 00        		.byte	0
 2262 019a 00        		.byte	0
 2263 019b 80        		.byte	-128
 2264 019c 80        		.byte	-128
 2265 019d C0        		.byte	-64
 2266 019e C0        		.byte	-64
 2267 019f C0        		.byte	-64
 2268 01a0 E0        		.byte	-32
 2269 01a1 E0        		.byte	-32
 2270 01a2 E0        		.byte	-32
 2271 01a3 E0        		.byte	-32
 2272 01a4 E0        		.byte	-32
 2273 01a5 E0        		.byte	-32
 2274 01a6 E0        		.byte	-32
 2275 01a7 E0        		.byte	-32
 2276 01a8 E0        		.byte	-32
 2277 01a9 E0        		.byte	-32
 2278 01aa E0        		.byte	-32
 2279 01ab E0        		.byte	-32
 2280 01ac E0        		.byte	-32
 2281 01ad E0        		.byte	-32
 2282 01ae C0        		.byte	-64
 2283 01af C0        		.byte	-64
 2284 01b0 C0        		.byte	-64
 2285 01b1 80        		.byte	-128
 2286 01b2 80        		.byte	-128
 2287 01b3 00        		.byte	0
 2288 01b4 00        		.byte	0
 2289 01b5 00        		.byte	0
 2290 01b6 00        		.byte	0
 2291 01b7 00        		.byte	0
 2292 01b8 00        		.byte	0
 2293 01b9 00        		.byte	0
 2294 01ba 00        		.byte	0
 2295 01bb 00        		.byte	0
 2296 01bc 00        		.byte	0
 2297 01bd 00        		.byte	0
 2298 01be 00        		.byte	0
 2299 01bf 00        		.byte	0
 2300 01c0 00        		.byte	0
 2301 01c1 00        		.byte	0
 2302 01c2 00        		.byte	0
 2303 01c3 00        		.byte	0
 2304 01c4 00        		.byte	0
 2305 01c5 00        		.byte	0
 2306 01c6 00        		.byte	0
 2307 01c7 00        		.byte	0
 2308 01c8 00        		.byte	0
 2309 01c9 00        		.byte	0
 2310 01ca 00        		.byte	0
 2311 01cb 00        		.byte	0
 2312 01cc 00        		.byte	0
 2313 01cd 00        		.byte	0
 2314 01ce 00        		.byte	0
 2315 01cf 00        		.byte	0
 2316 01d0 00        		.byte	0
 2317 01d1 00        		.byte	0
 2318 01d2 00        		.byte	0
 2319 01d3 00        		.byte	0
 2320 01d4 00        		.byte	0
 2321 01d5 00        		.byte	0
 2322 01d6 00        		.byte	0
 2323 01d7 00        		.byte	0
 2324 01d8 00        		.byte	0
 2325 01d9 00        		.byte	0
 2326 01da 00        		.byte	0
 2327 01db 00        		.byte	0
 2328 01dc 00        		.byte	0
 2329 01dd 00        		.byte	0
 2330 01de 00        		.byte	0
 2331 01df 00        		.byte	0
 2332 01e0 00        		.byte	0
 2333 01e1 00        		.byte	0
 2334 01e2 00        		.byte	0
 2335 01e3 00        		.byte	0
 2336 01e4 00        		.byte	0
 2337 01e5 00        		.byte	0
 2338 01e6 00        		.byte	0
 2339 01e7 00        		.byte	0
 2340 01e8 00        		.byte	0
 2341 01e9 00        		.byte	0
 2342 01ea 00        		.byte	0
 2343 01eb 00        		.byte	0
 2344 01ec 00        		.byte	0
 2345 01ed 00        		.byte	0
 2346 01ee 00        		.byte	0
 2347 01ef 00        		.byte	0
 2348 01f0 00        		.byte	0
 2349 01f1 00        		.byte	0
 2350 01f2 00        		.byte	0
 2351 01f3 00        		.byte	0
 2352 01f4 00        		.byte	0
 2353 01f5 00        		.byte	0
 2354 01f6 00        		.byte	0
 2355 01f7 00        		.byte	0
 2356 01f8 00        		.byte	0
 2357 01f9 00        		.byte	0
 2358 01fa 00        		.byte	0
 2359 01fb 00        		.byte	0
 2360 01fc 00        		.byte	0
 2361 01fd 00        		.byte	0
 2362 01fe 00        		.byte	0
 2363 01ff 00        		.byte	0
 2364 0200 00        		.byte	0
 2365 0201 00        		.byte	0
 2366 0202 00        		.byte	0
 2367 0203 00        		.byte	0
 2368 0204 00        		.byte	0
 2369 0205 00        		.byte	0
 2370 0206 00        		.byte	0
 2371 0207 00        		.byte	0
 2372 0208 00        		.byte	0
 2373 0209 00        		.byte	0
 2374 020a 00        		.byte	0
 2375 020b 00        		.byte	0
 2376 020c 00        		.byte	0
 2377 020d 00        		.byte	0
 2378 020e 00        		.byte	0
 2379 020f 00        		.byte	0
 2380 0210 00        		.byte	0
 2381 0211 80        		.byte	-128
 2382 0212 C0        		.byte	-64
 2383 0213 E0        		.byte	-32
 2384 0214 F0        		.byte	-16
 2385 0215 F8        		.byte	-8
 2386 0216 FC        		.byte	-4
 2387 0217 FC        		.byte	-4
 2388 0218 FE        		.byte	-2
 2389 0219 FF        		.byte	-1
 2390 021a FF        		.byte	-1
 2391 021b FF        		.byte	-1
 2392 021c FF        		.byte	-1
 2393 021d FF        		.byte	-1
 2394 021e FF        		.byte	-1
 2395 021f FF        		.byte	-1
 2396 0220 FF        		.byte	-1
 2397 0221 FF        		.byte	-1
 2398 0222 FF        		.byte	-1
 2399 0223 FF        		.byte	-1
 2400 0224 FF        		.byte	-1
 2401 0225 FF        		.byte	-1
 2402 0226 FF        		.byte	-1
 2403 0227 FF        		.byte	-1
 2404 0228 FF        		.byte	-1
 2405 0229 FF        		.byte	-1
 2406 022a FF        		.byte	-1
 2407 022b FF        		.byte	-1
 2408 022c FF        		.byte	-1
 2409 022d FF        		.byte	-1
 2410 022e FF        		.byte	-1
 2411 022f FF        		.byte	-1
 2412 0230 FF        		.byte	-1
 2413 0231 FF        		.byte	-1
 2414 0232 FF        		.byte	-1
 2415 0233 FF        		.byte	-1
 2416 0234 FF        		.byte	-1
 2417 0235 FE        		.byte	-2
 2418 0236 FC        		.byte	-4
 2419 0237 FC        		.byte	-4
 2420 0238 F8        		.byte	-8
 2421 0239 F0        		.byte	-16
 2422 023a E0        		.byte	-32
 2423 023b C0        		.byte	-64
 2424 023c 80        		.byte	-128
 2425 023d 00        		.byte	0
 2426 023e 00        		.byte	0
 2427 023f 00        		.byte	0
 2428 0240 00        		.byte	0
 2429 0241 00        		.byte	0
 2430 0242 00        		.byte	0
 2431 0243 00        		.byte	0
 2432 0244 00        		.byte	0
 2433 0245 00        		.byte	0
 2434 0246 00        		.byte	0
 2435 0247 00        		.byte	0
 2436 0248 00        		.byte	0
 2437 0249 00        		.byte	0
 2438 024a 00        		.byte	0
 2439 024b 00        		.byte	0
 2440 024c 00        		.byte	0
 2441 024d 00        		.byte	0
 2442 024e 00        		.byte	0
 2443 024f 00        		.byte	0
 2444 0250 00        		.byte	0
 2445 0251 00        		.byte	0
 2446 0252 00        		.byte	0
 2447 0253 00        		.byte	0
 2448 0254 00        		.byte	0
 2449 0255 00        		.byte	0
 2450 0256 00        		.byte	0
 2451 0257 00        		.byte	0
 2452 0258 00        		.byte	0
 2453 0259 00        		.byte	0
 2454 025a 00        		.byte	0
 2455 025b 00        		.byte	0
 2456 025c 00        		.byte	0
 2457 025d 00        		.byte	0
 2458 025e 00        		.byte	0
 2459 025f 00        		.byte	0
 2460 0260 00        		.byte	0
 2461 0261 00        		.byte	0
 2462 0262 00        		.byte	0
 2463 0263 00        		.byte	0
 2464 0264 00        		.byte	0
 2465 0265 00        		.byte	0
 2466 0266 00        		.byte	0
 2467 0267 00        		.byte	0
 2468 0268 00        		.byte	0
 2469 0269 00        		.byte	0
 2470 026a 00        		.byte	0
 2471 026b 00        		.byte	0
 2472 026c 00        		.byte	0
 2473 026d 00        		.byte	0
 2474 026e 00        		.byte	0
 2475 026f 00        		.byte	0
 2476 0270 00        		.byte	0
 2477 0271 00        		.byte	0
 2478 0272 00        		.byte	0
 2479 0273 00        		.byte	0
 2480 0274 00        		.byte	0
 2481 0275 00        		.byte	0
 2482 0276 00        		.byte	0
 2483 0277 00        		.byte	0
 2484 0278 00        		.byte	0
 2485 0279 00        		.byte	0
 2486 027a 00        		.byte	0
 2487 027b 00        		.byte	0
 2488 027c 00        		.byte	0
 2489 027d 00        		.byte	0
 2490 027e 00        		.byte	0
 2491 027f 00        		.byte	0
 2492 0280 00        		.byte	0
 2493 0281 00        		.byte	0
 2494 0282 00        		.byte	0
 2495 0283 00        		.byte	0
 2496 0284 00        		.byte	0
 2497 0285 00        		.byte	0
 2498 0286 00        		.byte	0
 2499 0287 00        		.byte	0
 2500 0288 00        		.byte	0
 2501 0289 00        		.byte	0
 2502 028a 00        		.byte	0
 2503 028b 00        		.byte	0
 2504 028c 00        		.byte	0
 2505 028d 80        		.byte	-128
 2506 028e F0        		.byte	-16
 2507 028f FC        		.byte	-4
 2508 0290 FE        		.byte	-2
 2509 0291 FF        		.byte	-1
 2510 0292 FF        		.byte	-1
 2511 0293 FF        		.byte	-1
 2512 0294 FF        		.byte	-1
 2513 0295 FF        		.byte	-1
 2514 0296 FF        		.byte	-1
 2515 0297 FF        		.byte	-1
 2516 0298 FF        		.byte	-1
 2517 0299 FF        		.byte	-1
 2518 029a FF        		.byte	-1
 2519 029b FF        		.byte	-1
 2520 029c FF        		.byte	-1
 2521 029d FF        		.byte	-1
 2522 029e FF        		.byte	-1
 2523 029f FF        		.byte	-1
 2524 02a0 FF        		.byte	-1
 2525 02a1 FF        		.byte	-1
 2526 02a2 FF        		.byte	-1
 2527 02a3 FF        		.byte	-1
 2528 02a4 FF        		.byte	-1
 2529 02a5 FF        		.byte	-1
 2530 02a6 FF        		.byte	-1
 2531 02a7 FF        		.byte	-1
 2532 02a8 FF        		.byte	-1
 2533 02a9 FF        		.byte	-1
 2534 02aa FF        		.byte	-1
 2535 02ab FF        		.byte	-1
 2536 02ac FF        		.byte	-1
 2537 02ad FF        		.byte	-1
 2538 02ae FF        		.byte	-1
 2539 02af FF        		.byte	-1
 2540 02b0 FF        		.byte	-1
 2541 02b1 FF        		.byte	-1
 2542 02b2 FF        		.byte	-1
 2543 02b3 FF        		.byte	-1
 2544 02b4 FF        		.byte	-1
 2545 02b5 FF        		.byte	-1
 2546 02b6 FF        		.byte	-1
 2547 02b7 FF        		.byte	-1
 2548 02b8 FF        		.byte	-1
 2549 02b9 FF        		.byte	-1
 2550 02ba FF        		.byte	-1
 2551 02bb FF        		.byte	-1
 2552 02bc FF        		.byte	-1
 2553 02bd FE        		.byte	-2
 2554 02be FC        		.byte	-4
 2555 02bf F0        		.byte	-16
 2556 02c0 C0        		.byte	-64
 2557 02c1 00        		.byte	0
 2558 02c2 00        		.byte	0
 2559 02c3 00        		.byte	0
 2560 02c4 00        		.byte	0
 2561 02c5 00        		.byte	0
 2562 02c6 00        		.byte	0
 2563 02c7 00        		.byte	0
 2564 02c8 00        		.byte	0
 2565 02c9 00        		.byte	0
 2566 02ca 00        		.byte	0
 2567 02cb 00        		.byte	0
 2568 02cc 00        		.byte	0
 2569 02cd 00        		.byte	0
 2570 02ce 00        		.byte	0
 2571 02cf 00        		.byte	0
 2572 02d0 00        		.byte	0
 2573 02d1 00        		.byte	0
 2574 02d2 00        		.byte	0
 2575 02d3 00        		.byte	0
 2576 02d4 00        		.byte	0
 2577 02d5 00        		.byte	0
 2578 02d6 00        		.byte	0
 2579 02d7 00        		.byte	0
 2580 02d8 00        		.byte	0
 2581 02d9 00        		.byte	0
 2582 02da 00        		.byte	0
 2583 02db 00        		.byte	0
 2584 02dc 00        		.byte	0
 2585 02dd 00        		.byte	0
 2586 02de 00        		.byte	0
 2587 02df 00        		.byte	0
 2588 02e0 00        		.byte	0
 2589 02e1 00        		.byte	0
 2590 02e2 00        		.byte	0
 2591 02e3 00        		.byte	0
 2592 02e4 00        		.byte	0
 2593 02e5 00        		.byte	0
 2594 02e6 00        		.byte	0
 2595 02e7 00        		.byte	0
 2596 02e8 00        		.byte	0
 2597 02e9 00        		.byte	0
 2598 02ea 00        		.byte	0
 2599 02eb 00        		.byte	0
 2600 02ec 00        		.byte	0
 2601 02ed 00        		.byte	0
 2602 02ee 00        		.byte	0
 2603 02ef 00        		.byte	0
 2604 02f0 00        		.byte	0
 2605 02f1 00        		.byte	0
 2606 02f2 00        		.byte	0
 2607 02f3 00        		.byte	0
 2608 02f4 00        		.byte	0
 2609 02f5 00        		.byte	0
 2610 02f6 00        		.byte	0
 2611 02f7 00        		.byte	0
 2612 02f8 00        		.byte	0
 2613 02f9 00        		.byte	0
 2614 02fa 00        		.byte	0
 2615 02fb 00        		.byte	0
 2616 02fc 00        		.byte	0
 2617 02fd 00        		.byte	0
 2618 02fe 00        		.byte	0
 2619 02ff 00        		.byte	0
 2620 0300 00        		.byte	0
 2621 0301 00        		.byte	0
 2622 0302 00        		.byte	0
 2623 0303 00        		.byte	0
 2624 0304 00        		.byte	0
 2625 0305 00        		.byte	0
 2626 0306 00        		.byte	0
 2627 0307 00        		.byte	0
 2628 0308 00        		.byte	0
 2629 0309 00        		.byte	0
 2630 030a 00        		.byte	0
 2631 030b 00        		.byte	0
 2632 030c FC        		.byte	-4
 2633 030d FF        		.byte	-1
 2634 030e FF        		.byte	-1
 2635 030f FF        		.byte	-1
 2636 0310 FF        		.byte	-1
 2637 0311 FF        		.byte	-1
 2638 0312 FF        		.byte	-1
 2639 0313 FF        		.byte	-1
 2640 0314 FF        		.byte	-1
 2641 0315 FF        		.byte	-1
 2642 0316 FF        		.byte	-1
 2643 0317 FF        		.byte	-1
 2644 0318 FF        		.byte	-1
 2645 0319 FF        		.byte	-1
 2646 031a FF        		.byte	-1
 2647 031b FF        		.byte	-1
 2648 031c FF        		.byte	-1
 2649 031d FF        		.byte	-1
 2650 031e FF        		.byte	-1
 2651 031f 1F        		.byte	31
 2652 0320 07        		.byte	7
 2653 0321 03        		.byte	3
 2654 0322 01        		.byte	1
 2655 0323 01        		.byte	1
 2656 0324 00        		.byte	0
 2657 0325 00        		.byte	0
 2658 0326 00        		.byte	0
 2659 0327 00        		.byte	0
 2660 0328 00        		.byte	0
 2661 0329 00        		.byte	0
 2662 032a 00        		.byte	0
 2663 032b 01        		.byte	1
 2664 032c 03        		.byte	3
 2665 032d 07        		.byte	7
 2666 032e 1F        		.byte	31
 2667 032f FF        		.byte	-1
 2668 0330 FF        		.byte	-1
 2669 0331 FF        		.byte	-1
 2670 0332 FF        		.byte	-1
 2671 0333 FF        		.byte	-1
 2672 0334 FF        		.byte	-1
 2673 0335 FF        		.byte	-1
 2674 0336 FF        		.byte	-1
 2675 0337 FF        		.byte	-1
 2676 0338 FF        		.byte	-1
 2677 0339 FF        		.byte	-1
 2678 033a FF        		.byte	-1
 2679 033b FF        		.byte	-1
 2680 033c FF        		.byte	-1
 2681 033d FF        		.byte	-1
 2682 033e FF        		.byte	-1
 2683 033f FF        		.byte	-1
 2684 0340 FF        		.byte	-1
 2685 0341 FC        		.byte	-4
 2686 0342 00        		.byte	0
 2687 0343 00        		.byte	0
 2688 0344 00        		.byte	0
 2689 0345 00        		.byte	0
 2690 0346 00        		.byte	0
 2691 0347 00        		.byte	0
 2692 0348 00        		.byte	0
 2693 0349 00        		.byte	0
 2694 034a 00        		.byte	0
 2695 034b 00        		.byte	0
 2696 034c 00        		.byte	0
 2697 034d 00        		.byte	0
 2698 034e 00        		.byte	0
 2699 034f 00        		.byte	0
 2700 0350 00        		.byte	0
 2701 0351 00        		.byte	0
 2702 0352 00        		.byte	0
 2703 0353 00        		.byte	0
 2704 0354 00        		.byte	0
 2705 0355 00        		.byte	0
 2706 0356 00        		.byte	0
 2707 0357 00        		.byte	0
 2708 0358 00        		.byte	0
 2709 0359 00        		.byte	0
 2710 035a 00        		.byte	0
 2711 035b 00        		.byte	0
 2712 035c 00        		.byte	0
 2713 035d 00        		.byte	0
 2714 035e 00        		.byte	0
 2715 035f 00        		.byte	0
 2716 0360 00        		.byte	0
 2717 0361 00        		.byte	0
 2718 0362 00        		.byte	0
 2719 0363 00        		.byte	0
 2720 0364 00        		.byte	0
 2721 0365 00        		.byte	0
 2722 0366 00        		.byte	0
 2723 0367 00        		.byte	0
 2724 0368 00        		.byte	0
 2725 0369 00        		.byte	0
 2726 036a 00        		.byte	0
 2727 036b 00        		.byte	0
 2728 036c 00        		.byte	0
 2729 036d 00        		.byte	0
 2730 036e 00        		.byte	0
 2731 036f 00        		.byte	0
 2732 0370 00        		.byte	0
 2733 0371 00        		.byte	0
 2734 0372 00        		.byte	0
 2735 0373 00        		.byte	0
 2736 0374 00        		.byte	0
 2737 0375 00        		.byte	0
 2738 0376 00        		.byte	0
 2739 0377 00        		.byte	0
 2740 0378 00        		.byte	0
 2741 0379 00        		.byte	0
 2742 037a 00        		.byte	0
 2743 037b 00        		.byte	0
 2744 037c 00        		.byte	0
 2745 037d 00        		.byte	0
 2746 037e 00        		.byte	0
 2747 037f 00        		.byte	0
 2748 0380 00        		.byte	0
 2749 0381 00        		.byte	0
 2750 0382 00        		.byte	0
 2751 0383 00        		.byte	0
 2752 0384 00        		.byte	0
 2753 0385 00        		.byte	0
 2754 0386 00        		.byte	0
 2755 0387 00        		.byte	0
 2756 0388 00        		.byte	0
 2757 0389 00        		.byte	0
 2758 038a 00        		.byte	0
 2759 038b 00        		.byte	0
 2760 038c 1F        		.byte	31
 2761 038d FF        		.byte	-1
 2762 038e FF        		.byte	-1
 2763 038f FF        		.byte	-1
 2764 0390 FF        		.byte	-1
 2765 0391 FF        		.byte	-1
 2766 0392 FF        		.byte	-1
 2767 0393 FF        		.byte	-1
 2768 0394 FF        		.byte	-1
 2769 0395 FF        		.byte	-1
 2770 0396 FF        		.byte	-1
 2771 0397 FF        		.byte	-1
 2772 0398 FF        		.byte	-1
 2773 0399 FF        		.byte	-1
 2774 039a FF        		.byte	-1
 2775 039b FF        		.byte	-1
 2776 039c FF        		.byte	-1
 2777 039d FF        		.byte	-1
 2778 039e FF        		.byte	-1
 2779 039f FC        		.byte	-4
 2780 03a0 F0        		.byte	-16
 2781 03a1 E0        		.byte	-32
 2782 03a2 C0        		.byte	-64
 2783 03a3 80        		.byte	-128
 2784 03a4 80        		.byte	-128
 2785 03a5 00        		.byte	0
 2786 03a6 00        		.byte	0
 2787 03a7 00        		.byte	0
 2788 03a8 00        		.byte	0
 2789 03a9 00        		.byte	0
 2790 03aa 80        		.byte	-128
 2791 03ab C0        		.byte	-64
 2792 03ac C0        		.byte	-64
 2793 03ad F0        		.byte	-16
 2794 03ae FC        		.byte	-4
 2795 03af FF        		.byte	-1
 2796 03b0 FF        		.byte	-1
 2797 03b1 FF        		.byte	-1
 2798 03b2 FF        		.byte	-1
 2799 03b3 FF        		.byte	-1
 2800 03b4 FF        		.byte	-1
 2801 03b5 FF        		.byte	-1
 2802 03b6 FF        		.byte	-1
 2803 03b7 FF        		.byte	-1
 2804 03b8 FF        		.byte	-1
 2805 03b9 FF        		.byte	-1
 2806 03ba FF        		.byte	-1
 2807 03bb FF        		.byte	-1
 2808 03bc FF        		.byte	-1
 2809 03bd FF        		.byte	-1
 2810 03be FF        		.byte	-1
 2811 03bf FF        		.byte	-1
 2812 03c0 FF        		.byte	-1
 2813 03c1 3F        		.byte	63
 2814 03c2 00        		.byte	0
 2815 03c3 00        		.byte	0
 2816 03c4 00        		.byte	0
 2817 03c5 00        		.byte	0
 2818 03c6 00        		.byte	0
 2819 03c7 00        		.byte	0
 2820 03c8 00        		.byte	0
 2821 03c9 00        		.byte	0
 2822 03ca 00        		.byte	0
 2823 03cb 00        		.byte	0
 2824 03cc 00        		.byte	0
 2825 03cd 00        		.byte	0
 2826 03ce 00        		.byte	0
 2827 03cf 00        		.byte	0
 2828 03d0 00        		.byte	0
 2829 03d1 00        		.byte	0
 2830 03d2 00        		.byte	0
 2831 03d3 00        		.byte	0
 2832 03d4 00        		.byte	0
 2833 03d5 00        		.byte	0
 2834 03d6 00        		.byte	0
 2835 03d7 00        		.byte	0
 2836 03d8 00        		.byte	0
 2837 03d9 00        		.byte	0
 2838 03da 00        		.byte	0
 2839 03db 00        		.byte	0
 2840 03dc 00        		.byte	0
 2841 03dd 00        		.byte	0
 2842 03de 00        		.byte	0
 2843 03df 00        		.byte	0
 2844 03e0 00        		.byte	0
 2845 03e1 00        		.byte	0
 2846 03e2 00        		.byte	0
 2847 03e3 00        		.byte	0
 2848 03e4 00        		.byte	0
 2849 03e5 00        		.byte	0
 2850 03e6 00        		.byte	0
 2851 03e7 00        		.byte	0
 2852 03e8 00        		.byte	0
 2853 03e9 00        		.byte	0
 2854 03ea 00        		.byte	0
 2855 03eb 00        		.byte	0
 2856 03ec 00        		.byte	0
 2857 03ed 00        		.byte	0
 2858 03ee 00        		.byte	0
 2859 03ef 00        		.byte	0
 2860 03f0 00        		.byte	0
 2861 03f1 00        		.byte	0
 2862 03f2 00        		.byte	0
 2863 03f3 00        		.byte	0
 2864 03f4 00        		.byte	0
 2865 03f5 00        		.byte	0
 2866 03f6 00        		.byte	0
 2867 03f7 00        		.byte	0
 2868 03f8 00        		.byte	0
 2869 03f9 00        		.byte	0
 2870 03fa 00        		.byte	0
 2871 03fb 00        		.byte	0
 2872 03fc 00        		.byte	0
 2873 03fd 00        		.byte	0
 2874 03fe 00        		.byte	0
 2875 03ff 00        		.byte	0
 2876 0400 00        		.byte	0
 2877 0401 00        		.byte	0
 2878 0402 00        		.byte	0
 2879 0403 00        		.byte	0
 2880 0404 00        		.byte	0
 2881 0405 00        		.byte	0
 2882 0406 00        		.byte	0
 2883 0407 00        		.byte	0
 2884 0408 00        		.byte	0
 2885 0409 00        		.byte	0
 2886 040a 00        		.byte	0
 2887 040b 00        		.byte	0
 2888 040c 00        		.byte	0
 2889 040d 01        		.byte	1
 2890 040e 07        		.byte	7
 2891 040f 1F        		.byte	31
 2892 0410 7F        		.byte	127
 2893 0411 FF        		.byte	-1
 2894 0412 FF        		.byte	-1
 2895 0413 FF        		.byte	-1
 2896 0414 FF        		.byte	-1
 2897 0415 FF        		.byte	-1
 2898 0416 FF        		.byte	-1
 2899 0417 FF        		.byte	-1
 2900 0418 FF        		.byte	-1
 2901 0419 FF        		.byte	-1
 2902 041a FF        		.byte	-1
 2903 041b FF        		.byte	-1
 2904 041c FF        		.byte	-1
 2905 041d FF        		.byte	-1
 2906 041e FF        		.byte	-1
 2907 041f FF        		.byte	-1
 2908 0420 FF        		.byte	-1
 2909 0421 FF        		.byte	-1
 2910 0422 7F        		.byte	127
 2911 0423 0F        		.byte	15
 2912 0424 03        		.byte	3
 2913 0425 00        		.byte	0
 2914 0426 00        		.byte	0
 2915 0427 00        		.byte	0
 2916 0428 00        		.byte	0
 2917 0429 01        		.byte	1
 2918 042a 0F        		.byte	15
 2919 042b 3F        		.byte	63
 2920 042c FF        		.byte	-1
 2921 042d FF        		.byte	-1
 2922 042e FF        		.byte	-1
 2923 042f FF        		.byte	-1
 2924 0430 FF        		.byte	-1
 2925 0431 FF        		.byte	-1
 2926 0432 FF        		.byte	-1
 2927 0433 FF        		.byte	-1
 2928 0434 FF        		.byte	-1
 2929 0435 FF        		.byte	-1
 2930 0436 FF        		.byte	-1
 2931 0437 FF        		.byte	-1
 2932 0438 FF        		.byte	-1
 2933 0439 FF        		.byte	-1
 2934 043a FF        		.byte	-1
 2935 043b FF        		.byte	-1
 2936 043c FF        		.byte	-1
 2937 043d 7F        		.byte	127
 2938 043e 1F        		.byte	31
 2939 043f 07        		.byte	7
 2940 0440 01        		.byte	1
 2941 0441 00        		.byte	0
 2942 0442 00        		.byte	0
 2943 0443 00        		.byte	0
 2944 0444 00        		.byte	0
 2945 0445 00        		.byte	0
 2946 0446 00        		.byte	0
 2947 0447 00        		.byte	0
 2948 0448 00        		.byte	0
 2949 0449 00        		.byte	0
 2950 044a 00        		.byte	0
 2951 044b 00        		.byte	0
 2952 044c 00        		.byte	0
 2953 044d 00        		.byte	0
 2954 044e 00        		.byte	0
 2955 044f 00        		.byte	0
 2956 0450 00        		.byte	0
 2957 0451 00        		.byte	0
 2958 0452 00        		.byte	0
 2959 0453 00        		.byte	0
 2960 0454 00        		.byte	0
 2961 0455 00        		.byte	0
 2962 0456 00        		.byte	0
 2963 0457 00        		.byte	0
 2964 0458 00        		.byte	0
 2965 0459 00        		.byte	0
 2966 045a 00        		.byte	0
 2967 045b 00        		.byte	0
 2968 045c 00        		.byte	0
 2969 045d 00        		.byte	0
 2970 045e 00        		.byte	0
 2971 045f 00        		.byte	0
 2972 0460 00        		.byte	0
 2973 0461 00        		.byte	0
 2974 0462 00        		.byte	0
 2975 0463 00        		.byte	0
 2976 0464 00        		.byte	0
 2977 0465 00        		.byte	0
 2978 0466 00        		.byte	0
 2979 0467 00        		.byte	0
 2980 0468 00        		.byte	0
 2981 0469 00        		.byte	0
 2982 046a 00        		.byte	0
 2983 046b 00        		.byte	0
 2984 046c 00        		.byte	0
 2985 046d 00        		.byte	0
 2986 046e 00        		.byte	0
 2987 046f 00        		.byte	0
 2988 0470 00        		.byte	0
 2989 0471 00        		.byte	0
 2990 0472 00        		.byte	0
 2991 0473 00        		.byte	0
 2992 0474 00        		.byte	0
 2993 0475 00        		.byte	0
 2994 0476 00        		.byte	0
 2995 0477 00        		.byte	0
 2996 0478 00        		.byte	0
 2997 0479 00        		.byte	0
 2998 047a 00        		.byte	0
 2999 047b 00        		.byte	0
 3000 047c 00        		.byte	0
 3001 047d 00        		.byte	0
 3002 047e 00        		.byte	0
 3003 047f 00        		.byte	0
 3004 0480 00        		.byte	0
 3005 0481 00        		.byte	0
 3006 0482 00        		.byte	0
 3007 0483 00        		.byte	0
 3008 0484 00        		.byte	0
 3009 0485 00        		.byte	0
 3010 0486 00        		.byte	0
 3011 0487 00        		.byte	0
 3012 0488 00        		.byte	0
 3013 0489 00        		.byte	0
 3014 048a 00        		.byte	0
 3015 048b 00        		.byte	0
 3016 048c 00        		.byte	0
 3017 048d 00        		.byte	0
 3018 048e 00        		.byte	0
 3019 048f 00        		.byte	0
 3020 0490 00        		.byte	0
 3021 0491 00        		.byte	0
 3022 0492 01        		.byte	1
 3023 0493 03        		.byte	3
 3024 0494 07        		.byte	7
 3025 0495 0F        		.byte	15
 3026 0496 1F        		.byte	31
 3027 0497 3F        		.byte	63
 3028 0498 3F        		.byte	63
 3029 0499 7F        		.byte	127
 3030 049a FF        		.byte	-1
 3031 049b FF        		.byte	-1
 3032 049c FF        		.byte	-1
 3033 049d FF        		.byte	-1
 3034 049e FF        		.byte	-1
 3035 049f 7F        		.byte	127
 3036 04a0 0F        		.byte	15
 3037 04a1 03        		.byte	3
 3038 04a2 00        		.byte	0
 3039 04a3 00        		.byte	0
 3040 04a4 00        		.byte	0
 3041 04a5 00        		.byte	0
 3042 04a6 00        		.byte	0
 3043 04a7 00        		.byte	0
 3044 04a8 00        		.byte	0
 3045 04a9 00        		.byte	0
 3046 04aa 00        		.byte	0
 3047 04ab 00        		.byte	0
 3048 04ac 01        		.byte	1
 3049 04ad 0F        		.byte	15
 3050 04ae 3F        		.byte	63
 3051 04af FF        		.byte	-1
 3052 04b0 FF        		.byte	-1
 3053 04b1 FF        		.byte	-1
 3054 04b2 FF        		.byte	-1
 3055 04b3 FF        		.byte	-1
 3056 04b4 7F        		.byte	127
 3057 04b5 7F        		.byte	127
 3058 04b6 3F        		.byte	63
 3059 04b7 1F        		.byte	31
 3060 04b8 0F        		.byte	15
 3061 04b9 07        		.byte	7
 3062 04ba 03        		.byte	3
 3063 04bb 01        		.byte	1
 3064 04bc 00        		.byte	0
 3065 04bd 00        		.byte	0
 3066 04be 00        		.byte	0
 3067 04bf 00        		.byte	0
 3068 04c0 00        		.byte	0
 3069 04c1 00        		.byte	0
 3070 04c2 00        		.byte	0
 3071 04c3 00        		.byte	0
 3072 04c4 00        		.byte	0
 3073 04c5 00        		.byte	0
 3074 04c6 00        		.byte	0
 3075 04c7 00        		.byte	0
 3076 04c8 00        		.byte	0
 3077 04c9 00        		.byte	0
 3078 04ca 00        		.byte	0
 3079 04cb 00        		.byte	0
 3080 04cc 00        		.byte	0
 3081 04cd 00        		.byte	0
 3082 04ce 00        		.byte	0
 3083 04cf 00        		.byte	0
 3084 04d0 00        		.byte	0
 3085 04d1 00        		.byte	0
 3086 04d2 00        		.byte	0
 3087 04d3 00        		.byte	0
 3088 04d4 00        		.byte	0
 3089 04d5 00        		.byte	0
 3090 04d6 00        		.byte	0
 3091 04d7 00        		.byte	0
 3092 04d8 00        		.byte	0
 3093 04d9 00        		.byte	0
 3094 04da 00        		.byte	0
 3095 04db 00        		.byte	0
 3096 04dc 00        		.byte	0
 3097 04dd 00        		.byte	0
 3098 04de 00        		.byte	0
 3099 04df 00        		.byte	0
 3100 04e0 00        		.byte	0
 3101 04e1 00        		.byte	0
 3102 04e2 00        		.byte	0
 3103 04e3 00        		.byte	0
 3104 04e4 00        		.byte	0
 3105 04e5 00        		.byte	0
 3106 04e6 00        		.byte	0
 3107 04e7 00        		.byte	0
 3108 04e8 00        		.byte	0
 3109 04e9 00        		.byte	0
 3110 04ea 00        		.byte	0
 3111 04eb 00        		.byte	0
 3112 04ec 00        		.byte	0
 3113 04ed 00        		.byte	0
 3114 04ee 00        		.byte	0
 3115 04ef 00        		.byte	0
 3116 04f0 00        		.byte	0
 3117 04f1 00        		.byte	0
 3118 04f2 00        		.byte	0
 3119 04f3 00        		.byte	0
 3120 04f4 00        		.byte	0
 3121 04f5 00        		.byte	0
 3122 04f6 00        		.byte	0
 3123 04f7 00        		.byte	0
 3124 04f8 00        		.byte	0
 3125 04f9 00        		.byte	0
 3126 04fa 00        		.byte	0
 3127 04fb 00        		.byte	0
 3128 04fc 00        		.byte	0
 3129 04fd 00        		.byte	0
 3130 04fe 00        		.byte	0
 3131 04ff 00        		.byte	0
 3132 0500 00        		.byte	0
 3133 0501 00        		.byte	0
 3134 0502 00        		.byte	0
 3135 0503 00        		.byte	0
 3136 0504 00        		.byte	0
 3137 0505 00        		.byte	0
 3138 0506 00        		.byte	0
 3139 0507 00        		.byte	0
 3140 0508 00        		.byte	0
 3141 0509 00        		.byte	0
 3142 050a 00        		.byte	0
 3143 050b 00        		.byte	0
 3144 050c 00        		.byte	0
 3145 050d 00        		.byte	0
 3146 050e 00        		.byte	0
 3147 050f 00        		.byte	0
 3148 0510 00        		.byte	0
 3149 0511 00        		.byte	0
 3150 0512 00        		.byte	0
 3151 0513 00        		.byte	0
 3152 0514 00        		.byte	0
 3153 0515 00        		.byte	0
 3154 0516 00        		.byte	0
 3155 0517 00        		.byte	0
 3156 0518 00        		.byte	0
 3157 0519 00        		.byte	0
 3158 051a 00        		.byte	0
 3159 051b 00        		.byte	0
 3160 051c 00        		.byte	0
 3161 051d 01        		.byte	1
 3162 051e 01        		.byte	1
 3163 051f 00        		.byte	0
 3164 0520 00        		.byte	0
 3165 0521 00        		.byte	0
 3166 0522 00        		.byte	0
 3167 0523 00        		.byte	0
 3168 0524 00        		.byte	0
 3169 0525 00        		.byte	0
 3170 0526 00        		.byte	0
 3171 0527 00        		.byte	0
 3172 0528 00        		.byte	0
 3173 0529 00        		.byte	0
 3174 052a 00        		.byte	0
 3175 052b 00        		.byte	0
 3176 052c 00        		.byte	0
 3177 052d 00        		.byte	0
 3178 052e 00        		.byte	0
 3179 052f 01        		.byte	1
 3180 0530 01        		.byte	1
 3181 0531 01        		.byte	1
 3182 0532 00        		.byte	0
 3183 0533 00        		.byte	0
 3184 0534 00        		.byte	0
 3185 0535 00        		.byte	0
 3186 0536 00        		.byte	0
 3187 0537 00        		.byte	0
 3188 0538 00        		.byte	0
 3189 0539 00        		.byte	0
 3190 053a 00        		.byte	0
 3191 053b 00        		.byte	0
 3192 053c 00        		.byte	0
 3193 053d 00        		.byte	0
 3194 053e 00        		.byte	0
 3195 053f 00        		.byte	0
 3196 0540 00        		.byte	0
 3197 0541 00        		.byte	0
 3198 0542 00        		.byte	0
 3199 0543 00        		.byte	0
 3200 0544 00        		.byte	0
 3201 0545 00        		.byte	0
 3202 0546 00        		.byte	0
 3203 0547 00        		.byte	0
 3204 0548 00        		.byte	0
 3205 0549 00        		.byte	0
 3206 054a 00        		.byte	0
 3207 054b 00        		.byte	0
 3208 054c 00        		.byte	0
 3209 054d 00        		.byte	0
 3210 054e 00        		.byte	0
 3211 054f 00        		.byte	0
 3212 0550 00        		.byte	0
 3213 0551 00        		.byte	0
 3214 0552 00        		.byte	0
 3215 0553 00        		.byte	0
 3216 0554 00        		.byte	0
 3217 0555 00        		.byte	0
 3218 0556 00        		.byte	0
 3219 0557 00        		.byte	0
 3220 0558 00        		.byte	0
 3221 0559 00        		.byte	0
 3222 055a 00        		.byte	0
 3223 055b 00        		.byte	0
 3224 055c 00        		.byte	0
 3225 055d 00        		.byte	0
 3226 055e 00        		.byte	0
 3227 055f 00        		.byte	0
 3228 0560 00        		.byte	0
 3229 0561 00        		.byte	0
 3230 0562 00        		.byte	0
 3231 0563 00        		.byte	0
 3232 0564 00        		.byte	0
 3233 0565 00        		.byte	0
 3234 0566 00        		.byte	0
 3235 0567 00        		.byte	0
 3236               	.global	unit_test_return
 3237               		.section .bss
 3240               	unit_test_return:
 3241 0000 00        		.zero	1
 3242               		.section	.progmem.data,"a",@progbits
 3245               	Liberation_Sans15x21_Numbers:
 3246 0568 06        		.byte	6
 3247 0569 00        		.byte	0
 3248 056a 00        		.byte	0
 3249 056b 00        		.byte	0
 3250 056c 00        		.byte	0
 3251 056d 00        		.byte	0
 3252 056e 00        		.byte	0
 3253 056f 00        		.byte	0
 3254 0570 00        		.byte	0
 3255 0571 0F        		.byte	15
 3256 0572 00        		.byte	0
 3257 0573 00        		.byte	0
 3258 0574 0F        		.byte	15
 3259 0575 00        		.byte	0
 3260 0576 00        		.byte	0
 3261 0577 0F        		.byte	15
 3262 0578 00        		.byte	0
 3263 0579 00        		.byte	0
 3264 057a 0F        		.byte	15
 3265 057b 00        		.byte	0
 3266 057c 00        		.byte	0
 3267 057d 00        		.byte	0
 3268 057e 00        		.byte	0
 3269 057f 00        		.byte	0
 3270 0580 00        		.byte	0
 3271 0581 00        		.byte	0
 3272 0582 00        		.byte	0
 3273 0583 00        		.byte	0
 3274 0584 00        		.byte	0
 3275 0585 00        		.byte	0
 3276 0586 00        		.byte	0
 3277 0587 00        		.byte	0
 3278 0588 00        		.byte	0
 3279 0589 00        		.byte	0
 3280 058a 00        		.byte	0
 3281 058b 00        		.byte	0
 3282 058c 00        		.byte	0
 3283 058d 00        		.byte	0
 3284 058e 00        		.byte	0
 3285 058f 00        		.byte	0
 3286 0590 00        		.byte	0
 3287 0591 00        		.byte	0
 3288 0592 00        		.byte	0
 3289 0593 00        		.byte	0
 3290 0594 00        		.byte	0
 3291 0595 00        		.byte	0
 3292 0596 07        		.byte	7
 3293 0597 00        		.byte	0
 3294 0598 00        		.byte	0
 3295 0599 1E        		.byte	30
 3296 059a 00        		.byte	0
 3297 059b E0        		.byte	-32
 3298 059c 1F        		.byte	31
 3299 059d 00        		.byte	0
 3300 059e FF        		.byte	-1
 3301 059f 1F        		.byte	31
 3302 05a0 F8        		.byte	-8
 3303 05a1 FF        		.byte	-1
 3304 05a2 03        		.byte	3
 3305 05a3 FF        		.byte	-1
 3306 05a4 1F        		.byte	31
 3307 05a5 00        		.byte	0
 3308 05a6 FF        		.byte	-1
 3309 05a7 01        		.byte	1
 3310 05a8 00        		.byte	0
 3311 05a9 0F        		.byte	15
 3312 05aa 00        		.byte	0
 3313 05ab 00        		.byte	0
 3314 05ac 00        		.byte	0
 3315 05ad 00        		.byte	0
 3316 05ae 00        		.byte	0
 3317 05af 00        		.byte	0
 3318 05b0 00        		.byte	0
 3319 05b1 00        		.byte	0
 3320 05b2 00        		.byte	0
 3321 05b3 00        		.byte	0
 3322 05b4 00        		.byte	0
 3323 05b5 00        		.byte	0
 3324 05b6 00        		.byte	0
 3325 05b7 00        		.byte	0
 3326 05b8 00        		.byte	0
 3327 05b9 00        		.byte	0
 3328 05ba 00        		.byte	0
 3329 05bb 00        		.byte	0
 3330 05bc 00        		.byte	0
 3331 05bd 00        		.byte	0
 3332 05be 00        		.byte	0
 3333 05bf 00        		.byte	0
 3334 05c0 00        		.byte	0
 3335 05c1 00        		.byte	0
 3336 05c2 00        		.byte	0
 3337 05c3 00        		.byte	0
 3338 05c4 0E        		.byte	14
 3339 05c5 00        		.byte	0
 3340 05c6 00        		.byte	0
 3341 05c7 00        		.byte	0
 3342 05c8 C0        		.byte	-64
 3343 05c9 7F        		.byte	127
 3344 05ca 00        		.byte	0
 3345 05cb F8        		.byte	-8
 3346 05cc FF        		.byte	-1
 3347 05cd 01        		.byte	1
 3348 05ce FC        		.byte	-4
 3349 05cf FF        		.byte	-1
 3350 05d0 07        		.byte	7
 3351 05d1 FC        		.byte	-4
 3352 05d2 FF        		.byte	-1
 3353 05d3 07        		.byte	7
 3354 05d4 3E        		.byte	62
 3355 05d5 80        		.byte	-128
 3356 05d6 0F        		.byte	15
 3357 05d7 0E        		.byte	14
 3358 05d8 00        		.byte	0
 3359 05d9 0E        		.byte	14
 3360 05da 0E        		.byte	14
 3361 05db 00        		.byte	0
 3362 05dc 0E        		.byte	14
 3363 05dd 0E        		.byte	14
 3364 05de 00        		.byte	0
 3365 05df 0E        		.byte	14
 3366 05e0 1E        		.byte	30
 3367 05e1 80        		.byte	-128
 3368 05e2 0F        		.byte	15
 3369 05e3 FC        		.byte	-4
 3370 05e4 FF        		.byte	-1
 3371 05e5 07        		.byte	7
 3372 05e6 FC        		.byte	-4
 3373 05e7 FF        		.byte	-1
 3374 05e8 07        		.byte	7
 3375 05e9 F8        		.byte	-8
 3376 05ea FF        		.byte	-1
 3377 05eb 01        		.byte	1
 3378 05ec C0        		.byte	-64
 3379 05ed 7F        		.byte	127
 3380 05ee 00        		.byte	0
 3381 05ef 00        		.byte	0
 3382 05f0 00        		.byte	0
 3383 05f1 00        		.byte	0
 3384 05f2 0E        		.byte	14
 3385 05f3 00        		.byte	0
 3386 05f4 00        		.byte	0
 3387 05f5 00        		.byte	0
 3388 05f6 70        		.byte	112
 3389 05f7 00        		.byte	0
 3390 05f8 0E        		.byte	14
 3391 05f9 38        		.byte	56
 3392 05fa 00        		.byte	0
 3393 05fb 0E        		.byte	14
 3394 05fc 38        		.byte	56
 3395 05fd 00        		.byte	0
 3396 05fe 0E        		.byte	14
 3397 05ff 1C        		.byte	28
 3398 0600 00        		.byte	0
 3399 0601 0E        		.byte	14
 3400 0602 0E        		.byte	14
 3401 0603 00        		.byte	0
 3402 0604 0E        		.byte	14
 3403 0605 FE        		.byte	-2
 3404 0606 FF        		.byte	-1
 3405 0607 0F        		.byte	15
 3406 0608 FE        		.byte	-2
 3407 0609 FF        		.byte	-1
 3408 060a 0F        		.byte	15
 3409 060b FE        		.byte	-2
 3410 060c FF        		.byte	-1
 3411 060d 0F        		.byte	15
 3412 060e FE        		.byte	-2
 3413 060f FF        		.byte	-1
 3414 0610 0F        		.byte	15
 3415 0611 00        		.byte	0
 3416 0612 00        		.byte	0
 3417 0613 0E        		.byte	14
 3418 0614 00        		.byte	0
 3419 0615 00        		.byte	0
 3420 0616 0E        		.byte	14
 3421 0617 00        		.byte	0
 3422 0618 00        		.byte	0
 3423 0619 0E        		.byte	14
 3424 061a 00        		.byte	0
 3425 061b 00        		.byte	0
 3426 061c 0E        		.byte	14
 3427 061d 00        		.byte	0
 3428 061e 00        		.byte	0
 3429 061f 00        		.byte	0
 3430 0620 0E        		.byte	14
 3431 0621 00        		.byte	0
 3432 0622 00        		.byte	0
 3433 0623 00        		.byte	0
 3434 0624 60        		.byte	96
 3435 0625 00        		.byte	0
 3436 0626 0F        		.byte	15
 3437 0627 78        		.byte	120
 3438 0628 80        		.byte	-128
 3439 0629 0F        		.byte	15
 3440 062a 7C        		.byte	124
 3441 062b C0        		.byte	-64
 3442 062c 0F        		.byte	15
 3443 062d 7C        		.byte	124
 3444 062e E0        		.byte	-32
 3445 062f 0F        		.byte	15
 3446 0630 1E        		.byte	30
 3447 0631 F0        		.byte	-16
 3448 0632 0F        		.byte	15
 3449 0633 0E        		.byte	14
 3450 0634 F8        		.byte	-8
 3451 0635 0E        		.byte	14
 3452 0636 0E        		.byte	14
 3453 0637 7C        		.byte	124
 3454 0638 0E        		.byte	14
 3455 0639 0E        		.byte	14
 3456 063a 3E        		.byte	62
 3457 063b 0E        		.byte	14
 3458 063c 1E        		.byte	30
 3459 063d 1F        		.byte	31
 3460 063e 0E        		.byte	14
 3461 063f FE        		.byte	-2
 3462 0640 0F        		.byte	15
 3463 0641 0E        		.byte	14
 3464 0642 FC        		.byte	-4
 3465 0643 07        		.byte	7
 3466 0644 0E        		.byte	14
 3467 0645 F8        		.byte	-8
 3468 0646 03        		.byte	3
 3469 0647 0E        		.byte	14
 3470 0648 F0        		.byte	-16
 3471 0649 01        		.byte	1
 3472 064a 0E        		.byte	14
 3473 064b 00        		.byte	0
 3474 064c 00        		.byte	0
 3475 064d 00        		.byte	0
 3476 064e 0E        		.byte	14
 3477 064f 00        		.byte	0
 3478 0650 00        		.byte	0
 3479 0651 00        		.byte	0
 3480 0652 30        		.byte	48
 3481 0653 80        		.byte	-128
 3482 0654 01        		.byte	1
 3483 0655 38        		.byte	56
 3484 0656 80        		.byte	-128
 3485 0657 03        		.byte	3
 3486 0658 3C        		.byte	60
 3487 0659 80        		.byte	-128
 3488 065a 07        		.byte	7
 3489 065b 3C        		.byte	60
 3490 065c 80        		.byte	-128
 3491 065d 0F        		.byte	15
 3492 065e 1E        		.byte	30
 3493 065f 00        		.byte	0
 3494 0660 0F        		.byte	15
 3495 0661 0E        		.byte	14
 3496 0662 0E        		.byte	14
 3497 0663 0E        		.byte	14
 3498 0664 0E        		.byte	14
 3499 0665 0E        		.byte	14
 3500 0666 0E        		.byte	14
 3501 0667 0E        		.byte	14
 3502 0668 0E        		.byte	14
 3503 0669 0E        		.byte	14
 3504 066a 1E        		.byte	30
 3505 066b 1F        		.byte	31
 3506 066c 0F        		.byte	15
 3507 066d FE        		.byte	-2
 3508 066e FF        		.byte	-1
 3509 066f 0F        		.byte	15
 3510 0670 FC        		.byte	-4
 3511 0671 FB        		.byte	-5
 3512 0672 07        		.byte	7
 3513 0673 FC        		.byte	-4
 3514 0674 F9        		.byte	-7
 3515 0675 03        		.byte	3
 3516 0676 F0        		.byte	-16
 3517 0677 E0        		.byte	-32
 3518 0678 01        		.byte	1
 3519 0679 00        		.byte	0
 3520 067a 00        		.byte	0
 3521 067b 00        		.byte	0
 3522 067c 0F        		.byte	15
 3523 067d 00        		.byte	0
 3524 067e 00        		.byte	0
 3525 067f 00        		.byte	0
 3526 0680 00        		.byte	0
 3527 0681 F0        		.byte	-16
 3528 0682 00        		.byte	0
 3529 0683 00        		.byte	0
 3530 0684 F8        		.byte	-8
 3531 0685 00        		.byte	0
 3532 0686 00        		.byte	0
 3533 0687 FE        		.byte	-2
 3534 0688 00        		.byte	0
 3535 0689 80        		.byte	-128
 3536 068a EF        		.byte	-17
 3537 068b 00        		.byte	0
 3538 068c C0        		.byte	-64
 3539 068d E7        		.byte	-25
 3540 068e 00        		.byte	0
 3541 068f F0        		.byte	-16
 3542 0690 E1        		.byte	-31
 3543 0691 00        		.byte	0
 3544 0692 7C        		.byte	124
 3545 0693 E0        		.byte	-32
 3546 0694 00        		.byte	0
 3547 0695 3E        		.byte	62
 3548 0696 E0        		.byte	-32
 3549 0697 00        		.byte	0
 3550 0698 FE        		.byte	-2
 3551 0699 FF        		.byte	-1
 3552 069a 0F        		.byte	15
 3553 069b FE        		.byte	-2
 3554 069c FF        		.byte	-1
 3555 069d 0F        		.byte	15
 3556 069e FE        		.byte	-2
 3557 069f FF        		.byte	-1
 3558 06a0 0F        		.byte	15
 3559 06a1 FE        		.byte	-2
 3560 06a2 FF        		.byte	-1
 3561 06a3 0F        		.byte	15
 3562 06a4 00        		.byte	0
 3563 06a5 E0        		.byte	-32
 3564 06a6 00        		.byte	0
 3565 06a7 00        		.byte	0
 3566 06a8 E0        		.byte	-32
 3567 06a9 00        		.byte	0
 3568 06aa 0E        		.byte	14
 3569 06ab 00        		.byte	0
 3570 06ac 00        		.byte	0
 3571 06ad 00        		.byte	0
 3572 06ae 00        		.byte	0
 3573 06af 80        		.byte	-128
 3574 06b0 01        		.byte	1
 3575 06b1 F8        		.byte	-8
 3576 06b2 87        		.byte	-121
 3577 06b3 03        		.byte	3
 3578 06b4 FE        		.byte	-2
 3579 06b5 87        		.byte	-121
 3580 06b6 07        		.byte	7
 3581 06b7 FE        		.byte	-2
 3582 06b8 87        		.byte	-121
 3583 06b9 0F        		.byte	15
 3584 06ba FE        		.byte	-2
 3585 06bb 07        		.byte	7
 3586 06bc 0F        		.byte	15
 3587 06bd 0E        		.byte	14
 3588 06be 03        		.byte	3
 3589 06bf 0E        		.byte	14
 3590 06c0 8E        		.byte	-114
 3591 06c1 03        		.byte	3
 3592 06c2 0E        		.byte	14
 3593 06c3 8E        		.byte	-114
 3594 06c4 03        		.byte	3
 3595 06c5 0E        		.byte	14
 3596 06c6 8E        		.byte	-114
 3597 06c7 07        		.byte	7
 3598 06c8 0F        		.byte	15
 3599 06c9 8E        		.byte	-114
 3600 06ca FF        		.byte	-1
 3601 06cb 07        		.byte	7
 3602 06cc 0E        		.byte	14
 3603 06cd FF        		.byte	-1
 3604 06ce 07        		.byte	7
 3605 06cf 0E        		.byte	14
 3606 06d0 FE        		.byte	-2
 3607 06d1 03        		.byte	3
 3608 06d2 00        		.byte	0
 3609 06d3 FC        		.byte	-4
 3610 06d4 00        		.byte	0
 3611 06d5 00        		.byte	0
 3612 06d6 00        		.byte	0
 3613 06d7 00        		.byte	0
 3614 06d8 0E        		.byte	14
 3615 06d9 00        		.byte	0
 3616 06da 00        		.byte	0
 3617 06db 00        		.byte	0
 3618 06dc C0        		.byte	-64
 3619 06dd 7F        		.byte	127
 3620 06de 00        		.byte	0
 3621 06df F0        		.byte	-16
 3622 06e0 FF        		.byte	-1
 3623 06e1 01        		.byte	1
 3624 06e2 F8        		.byte	-8
 3625 06e3 FF        		.byte	-1
 3626 06e4 07        		.byte	7
 3627 06e5 FC        		.byte	-4
 3628 06e6 FF        		.byte	-1
 3629 06e7 07        		.byte	7
 3630 06e8 3E        		.byte	62
 3631 06e9 0E        		.byte	14
 3632 06ea 0F        		.byte	15
 3633 06eb 0E        		.byte	14
 3634 06ec 07        		.byte	7
 3635 06ed 0E        		.byte	14
 3636 06ee 0E        		.byte	14
 3637 06ef 07        		.byte	7
 3638 06f0 0E        		.byte	14
 3639 06f1 0E        		.byte	14
 3640 06f2 07        		.byte	7
 3641 06f3 0E        		.byte	14
 3642 06f4 1E        		.byte	30
 3643 06f5 0F        		.byte	15
 3644 06f6 0F        		.byte	15
 3645 06f7 3E        		.byte	62
 3646 06f8 FF        		.byte	-1
 3647 06f9 0F        		.byte	15
 3648 06fa 3C        		.byte	60
 3649 06fb FE        		.byte	-2
 3650 06fc 07        		.byte	7
 3651 06fd 38        		.byte	56
 3652 06fe FE        		.byte	-2
 3653 06ff 03        		.byte	3
 3654 0700 30        		.byte	48
 3655 0701 F8        		.byte	-8
 3656 0702 01        		.byte	1
 3657 0703 00        		.byte	0
 3658 0704 00        		.byte	0
 3659 0705 00        		.byte	0
 3660 0706 0E        		.byte	14
 3661 0707 00        		.byte	0
 3662 0708 00        		.byte	0
 3663 0709 00        		.byte	0
 3664 070a 0E        		.byte	14
 3665 070b 00        		.byte	0
 3666 070c 00        		.byte	0
 3667 070d 0E        		.byte	14
 3668 070e 00        		.byte	0
 3669 070f 00        		.byte	0
 3670 0710 0E        		.byte	14
 3671 0711 00        		.byte	0
 3672 0712 00        		.byte	0
 3673 0713 0E        		.byte	14
 3674 0714 00        		.byte	0
 3675 0715 0F        		.byte	15
 3676 0716 0E        		.byte	14
 3677 0717 E0        		.byte	-32
 3678 0718 0F        		.byte	15
 3679 0719 0E        		.byte	14
 3680 071a F8        		.byte	-8
 3681 071b 0F        		.byte	15
 3682 071c 0E        		.byte	14
 3683 071d FE        		.byte	-2
 3684 071e 0F        		.byte	15
 3685 071f 8E        		.byte	-114
 3686 0720 FF        		.byte	-1
 3687 0721 00        		.byte	0
 3688 0722 CE        		.byte	-50
 3689 0723 0F        		.byte	15
 3690 0724 00        		.byte	0
 3691 0725 FE        		.byte	-2
 3692 0726 03        		.byte	3
 3693 0727 00        		.byte	0
 3694 0728 FE        		.byte	-2
 3695 0729 00        		.byte	0
 3696 072a 00        		.byte	0
 3697 072b 3E        		.byte	62
 3698 072c 00        		.byte	0
 3699 072d 00        		.byte	0
 3700 072e 1E        		.byte	30
 3701 072f 00        		.byte	0
 3702 0730 00        		.byte	0
 3703 0731 00        		.byte	0
 3704 0732 00        		.byte	0
 3705 0733 00        		.byte	0
 3706 0734 0E        		.byte	14
 3707 0735 00        		.byte	0
 3708 0736 00        		.byte	0
 3709 0737 00        		.byte	0
 3710 0738 F0        		.byte	-16
 3711 0739 E0        		.byte	-32
 3712 073a 01        		.byte	1
 3713 073b F8        		.byte	-8
 3714 073c FB        		.byte	-5
 3715 073d 03        		.byte	3
 3716 073e FC        		.byte	-4
 3717 073f FB        		.byte	-5
 3718 0740 07        		.byte	7
 3719 0741 FE        		.byte	-2
 3720 0742 FF        		.byte	-1
 3721 0743 0F        		.byte	15
 3722 0744 1E        		.byte	30
 3723 0745 1F        		.byte	31
 3724 0746 0F        		.byte	15
 3725 0747 0E        		.byte	14
 3726 0748 0E        		.byte	14
 3727 0749 0E        		.byte	14
 3728 074a 0E        		.byte	14
 3729 074b 0E        		.byte	14
 3730 074c 0E        		.byte	14
 3731 074d 0E        		.byte	14
 3732 074e 0E        		.byte	14
 3733 074f 0E        		.byte	14
 3734 0750 1E        		.byte	30
 3735 0751 1F        		.byte	31
 3736 0752 0F        		.byte	15
 3737 0753 FE        		.byte	-2
 3738 0754 FF        		.byte	-1
 3739 0755 0F        		.byte	15
 3740 0756 FC        		.byte	-4
 3741 0757 FB        		.byte	-5
 3742 0758 07        		.byte	7
 3743 0759 FC        		.byte	-4
 3744 075a FB        		.byte	-5
 3745 075b 03        		.byte	3
 3746 075c F0        		.byte	-16
 3747 075d E0        		.byte	-32
 3748 075e 01        		.byte	1
 3749 075f 00        		.byte	0
 3750 0760 00        		.byte	0
 3751 0761 00        		.byte	0
 3752 0762 0E        		.byte	14
 3753 0763 00        		.byte	0
 3754 0764 00        		.byte	0
 3755 0765 00        		.byte	0
 3756 0766 F0        		.byte	-16
 3757 0767 83        		.byte	-125
 3758 0768 01        		.byte	1
 3759 0769 F8        		.byte	-8
 3760 076a 87        		.byte	-121
 3761 076b 03        		.byte	3
 3762 076c FC        		.byte	-4
 3763 076d 8F        		.byte	-113
 3764 076e 07        		.byte	7
 3765 076f FE        		.byte	-2
 3766 0770 9F        		.byte	-97
 3767 0771 0F        		.byte	15
 3768 0772 1E        		.byte	30
 3769 0773 1E        		.byte	30
 3770 0774 0F        		.byte	15
 3771 0775 0E        		.byte	14
 3772 0776 1C        		.byte	28
 3773 0777 0E        		.byte	14
 3774 0778 0E        		.byte	14
 3775 0779 1C        		.byte	28
 3776 077a 0E        		.byte	14
 3777 077b 0E        		.byte	14
 3778 077c 1C        		.byte	28
 3779 077d 0E        		.byte	14
 3780 077e 1E        		.byte	30
 3781 077f 8E        		.byte	-114
 3782 0780 0F        		.byte	15
 3783 0781 FC        		.byte	-4
 3784 0782 FF        		.byte	-1
 3785 0783 07        		.byte	7
 3786 0784 FC        		.byte	-4
 3787 0785 FF        		.byte	-1
 3788 0786 03        		.byte	3
 3789 0787 F8        		.byte	-8
 3790 0788 FF        		.byte	-1
 3791 0789 01        		.byte	1
 3792 078a C0        		.byte	-64
 3793 078b 7F        		.byte	127
 3794 078c 00        		.byte	0
 3795 078d 00        		.byte	0
 3796 078e 00        		.byte	0
 3797 078f 00        		.byte	0
 3800               	Font5x7:
 3801 0790 00        		.byte	0
 3802 0791 00        		.byte	0
 3803 0792 00        		.byte	0
 3804 0793 00        		.byte	0
 3805 0794 00        		.byte	0
 3806 0795 00        		.byte	0
 3807 0796 00        		.byte	0
 3808 0797 5F        		.byte	95
 3809 0798 00        		.byte	0
 3810 0799 00        		.byte	0
 3811 079a 00        		.byte	0
 3812 079b 07        		.byte	7
 3813 079c 00        		.byte	0
 3814 079d 07        		.byte	7
 3815 079e 00        		.byte	0
 3816 079f 14        		.byte	20
 3817 07a0 7F        		.byte	127
 3818 07a1 14        		.byte	20
 3819 07a2 7F        		.byte	127
 3820 07a3 14        		.byte	20
 3821 07a4 24        		.byte	36
 3822 07a5 2A        		.byte	42
 3823 07a6 7F        		.byte	127
 3824 07a7 2A        		.byte	42
 3825 07a8 12        		.byte	18
 3826 07a9 23        		.byte	35
 3827 07aa 13        		.byte	19
 3828 07ab 08        		.byte	8
 3829 07ac 64        		.byte	100
 3830 07ad 62        		.byte	98
 3831 07ae 36        		.byte	54
 3832 07af 49        		.byte	73
 3833 07b0 55        		.byte	85
 3834 07b1 22        		.byte	34
 3835 07b2 50        		.byte	80
 3836 07b3 00        		.byte	0
 3837 07b4 05        		.byte	5
 3838 07b5 03        		.byte	3
 3839 07b6 00        		.byte	0
 3840 07b7 00        		.byte	0
 3841 07b8 00        		.byte	0
 3842 07b9 1C        		.byte	28
 3843 07ba 22        		.byte	34
 3844 07bb 41        		.byte	65
 3845 07bc 00        		.byte	0
 3846 07bd 00        		.byte	0
 3847 07be 41        		.byte	65
 3848 07bf 22        		.byte	34
 3849 07c0 1C        		.byte	28
 3850 07c1 00        		.byte	0
 3851 07c2 08        		.byte	8
 3852 07c3 2A        		.byte	42
 3853 07c4 1C        		.byte	28
 3854 07c5 2A        		.byte	42
 3855 07c6 08        		.byte	8
 3856 07c7 08        		.byte	8
 3857 07c8 08        		.byte	8
 3858 07c9 3E        		.byte	62
 3859 07ca 08        		.byte	8
 3860 07cb 08        		.byte	8
 3861 07cc 00        		.byte	0
 3862 07cd 50        		.byte	80
 3863 07ce 30        		.byte	48
 3864 07cf 00        		.byte	0
 3865 07d0 00        		.byte	0
 3866 07d1 08        		.byte	8
 3867 07d2 08        		.byte	8
 3868 07d3 08        		.byte	8
 3869 07d4 08        		.byte	8
 3870 07d5 08        		.byte	8
 3871 07d6 00        		.byte	0
 3872 07d7 60        		.byte	96
 3873 07d8 60        		.byte	96
 3874 07d9 00        		.byte	0
 3875 07da 00        		.byte	0
 3876 07db 20        		.byte	32
 3877 07dc 10        		.byte	16
 3878 07dd 08        		.byte	8
 3879 07de 04        		.byte	4
 3880 07df 02        		.byte	2
 3881 07e0 3E        		.byte	62
 3882 07e1 51        		.byte	81
 3883 07e2 49        		.byte	73
 3884 07e3 45        		.byte	69
 3885 07e4 3E        		.byte	62
 3886 07e5 00        		.byte	0
 3887 07e6 42        		.byte	66
 3888 07e7 7F        		.byte	127
 3889 07e8 40        		.byte	64
 3890 07e9 00        		.byte	0
 3891 07ea 42        		.byte	66
 3892 07eb 61        		.byte	97
 3893 07ec 51        		.byte	81
 3894 07ed 49        		.byte	73
 3895 07ee 46        		.byte	70
 3896 07ef 21        		.byte	33
 3897 07f0 41        		.byte	65
 3898 07f1 45        		.byte	69
 3899 07f2 4B        		.byte	75
 3900 07f3 31        		.byte	49
 3901 07f4 18        		.byte	24
 3902 07f5 14        		.byte	20
 3903 07f6 12        		.byte	18
 3904 07f7 7F        		.byte	127
 3905 07f8 10        		.byte	16
 3906 07f9 27        		.byte	39
 3907 07fa 45        		.byte	69
 3908 07fb 45        		.byte	69
 3909 07fc 45        		.byte	69
 3910 07fd 39        		.byte	57
 3911 07fe 3C        		.byte	60
 3912 07ff 4A        		.byte	74
 3913 0800 49        		.byte	73
 3914 0801 49        		.byte	73
 3915 0802 30        		.byte	48
 3916 0803 01        		.byte	1
 3917 0804 71        		.byte	113
 3918 0805 09        		.byte	9
 3919 0806 05        		.byte	5
 3920 0807 03        		.byte	3
 3921 0808 36        		.byte	54
 3922 0809 49        		.byte	73
 3923 080a 49        		.byte	73
 3924 080b 49        		.byte	73
 3925 080c 36        		.byte	54
 3926 080d 06        		.byte	6
 3927 080e 49        		.byte	73
 3928 080f 49        		.byte	73
 3929 0810 29        		.byte	41
 3930 0811 1E        		.byte	30
 3931 0812 00        		.byte	0
 3932 0813 36        		.byte	54
 3933 0814 36        		.byte	54
 3934 0815 00        		.byte	0
 3935 0816 00        		.byte	0
 3936 0817 00        		.byte	0
 3937 0818 56        		.byte	86
 3938 0819 36        		.byte	54
 3939 081a 00        		.byte	0
 3940 081b 00        		.byte	0
 3941 081c 00        		.byte	0
 3942 081d 08        		.byte	8
 3943 081e 14        		.byte	20
 3944 081f 22        		.byte	34
 3945 0820 41        		.byte	65
 3946 0821 14        		.byte	20
 3947 0822 14        		.byte	20
 3948 0823 14        		.byte	20
 3949 0824 14        		.byte	20
 3950 0825 14        		.byte	20
 3951 0826 41        		.byte	65
 3952 0827 22        		.byte	34
 3953 0828 14        		.byte	20
 3954 0829 08        		.byte	8
 3955 082a 00        		.byte	0
 3956 082b 02        		.byte	2
 3957 082c 01        		.byte	1
 3958 082d 51        		.byte	81
 3959 082e 09        		.byte	9
 3960 082f 06        		.byte	6
 3961 0830 32        		.byte	50
 3962 0831 49        		.byte	73
 3963 0832 79        		.byte	121
 3964 0833 41        		.byte	65
 3965 0834 3E        		.byte	62
 3966 0835 7E        		.byte	126
 3967 0836 11        		.byte	17
 3968 0837 11        		.byte	17
 3969 0838 11        		.byte	17
 3970 0839 7E        		.byte	126
 3971 083a 7F        		.byte	127
 3972 083b 49        		.byte	73
 3973 083c 49        		.byte	73
 3974 083d 49        		.byte	73
 3975 083e 36        		.byte	54
 3976 083f 3E        		.byte	62
 3977 0840 41        		.byte	65
 3978 0841 41        		.byte	65
 3979 0842 41        		.byte	65
 3980 0843 22        		.byte	34
 3981 0844 7F        		.byte	127
 3982 0845 41        		.byte	65
 3983 0846 41        		.byte	65
 3984 0847 22        		.byte	34
 3985 0848 1C        		.byte	28
 3986 0849 7F        		.byte	127
 3987 084a 49        		.byte	73
 3988 084b 49        		.byte	73
 3989 084c 49        		.byte	73
 3990 084d 41        		.byte	65
 3991 084e 7F        		.byte	127
 3992 084f 09        		.byte	9
 3993 0850 09        		.byte	9
 3994 0851 01        		.byte	1
 3995 0852 01        		.byte	1
 3996 0853 3E        		.byte	62
 3997 0854 41        		.byte	65
 3998 0855 41        		.byte	65
 3999 0856 51        		.byte	81
 4000 0857 32        		.byte	50
 4001 0858 7F        		.byte	127
 4002 0859 08        		.byte	8
 4003 085a 08        		.byte	8
 4004 085b 08        		.byte	8
 4005 085c 7F        		.byte	127
 4006 085d 00        		.byte	0
 4007 085e 41        		.byte	65
 4008 085f 7F        		.byte	127
 4009 0860 41        		.byte	65
 4010 0861 00        		.byte	0
 4011 0862 20        		.byte	32
 4012 0863 40        		.byte	64
 4013 0864 41        		.byte	65
 4014 0865 3F        		.byte	63
 4015 0866 01        		.byte	1
 4016 0867 7F        		.byte	127
 4017 0868 08        		.byte	8
 4018 0869 14        		.byte	20
 4019 086a 22        		.byte	34
 4020 086b 41        		.byte	65
 4021 086c 7F        		.byte	127
 4022 086d 40        		.byte	64
 4023 086e 40        		.byte	64
 4024 086f 40        		.byte	64
 4025 0870 40        		.byte	64
 4026 0871 7F        		.byte	127
 4027 0872 02        		.byte	2
 4028 0873 04        		.byte	4
 4029 0874 02        		.byte	2
 4030 0875 7F        		.byte	127
 4031 0876 7F        		.byte	127
 4032 0877 04        		.byte	4
 4033 0878 08        		.byte	8
 4034 0879 10        		.byte	16
 4035 087a 7F        		.byte	127
 4036 087b 3E        		.byte	62
 4037 087c 41        		.byte	65
 4038 087d 41        		.byte	65
 4039 087e 41        		.byte	65
 4040 087f 3E        		.byte	62
 4041 0880 7F        		.byte	127
 4042 0881 09        		.byte	9
 4043 0882 09        		.byte	9
 4044 0883 09        		.byte	9
 4045 0884 06        		.byte	6
 4046 0885 3E        		.byte	62
 4047 0886 41        		.byte	65
 4048 0887 51        		.byte	81
 4049 0888 21        		.byte	33
 4050 0889 5E        		.byte	94
 4051 088a 7F        		.byte	127
 4052 088b 09        		.byte	9
 4053 088c 19        		.byte	25
 4054 088d 29        		.byte	41
 4055 088e 46        		.byte	70
 4056 088f 46        		.byte	70
 4057 0890 49        		.byte	73
 4058 0891 49        		.byte	73
 4059 0892 49        		.byte	73
 4060 0893 31        		.byte	49
 4061 0894 01        		.byte	1
 4062 0895 01        		.byte	1
 4063 0896 7F        		.byte	127
 4064 0897 01        		.byte	1
 4065 0898 01        		.byte	1
 4066 0899 3F        		.byte	63
 4067 089a 40        		.byte	64
 4068 089b 40        		.byte	64
 4069 089c 40        		.byte	64
 4070 089d 3F        		.byte	63
 4071 089e 1F        		.byte	31
 4072 089f 20        		.byte	32
 4073 08a0 40        		.byte	64
 4074 08a1 20        		.byte	32
 4075 08a2 1F        		.byte	31
 4076 08a3 7F        		.byte	127
 4077 08a4 20        		.byte	32
 4078 08a5 18        		.byte	24
 4079 08a6 20        		.byte	32
 4080 08a7 7F        		.byte	127
 4081 08a8 63        		.byte	99
 4082 08a9 14        		.byte	20
 4083 08aa 08        		.byte	8
 4084 08ab 14        		.byte	20
 4085 08ac 63        		.byte	99
 4086 08ad 03        		.byte	3
 4087 08ae 04        		.byte	4
 4088 08af 78        		.byte	120
 4089 08b0 04        		.byte	4
 4090 08b1 03        		.byte	3
 4091 08b2 61        		.byte	97
 4092 08b3 51        		.byte	81
 4093 08b4 49        		.byte	73
 4094 08b5 45        		.byte	69
 4095 08b6 43        		.byte	67
 4096 08b7 00        		.byte	0
 4097 08b8 00        		.byte	0
 4098 08b9 7F        		.byte	127
 4099 08ba 41        		.byte	65
 4100 08bb 41        		.byte	65
 4101 08bc 02        		.byte	2
 4102 08bd 04        		.byte	4
 4103 08be 08        		.byte	8
 4104 08bf 10        		.byte	16
 4105 08c0 20        		.byte	32
 4106 08c1 41        		.byte	65
 4107 08c2 41        		.byte	65
 4108 08c3 7F        		.byte	127
 4109 08c4 00        		.byte	0
 4110 08c5 00        		.byte	0
 4111 08c6 04        		.byte	4
 4112 08c7 02        		.byte	2
 4113 08c8 01        		.byte	1
 4114 08c9 02        		.byte	2
 4115 08ca 04        		.byte	4
 4116 08cb 40        		.byte	64
 4117 08cc 40        		.byte	64
 4118 08cd 40        		.byte	64
 4119 08ce 40        		.byte	64
 4120 08cf 40        		.byte	64
 4121 08d0 00        		.byte	0
 4122 08d1 01        		.byte	1
 4123 08d2 02        		.byte	2
 4124 08d3 04        		.byte	4
 4125 08d4 00        		.byte	0
 4126 08d5 20        		.byte	32
 4127 08d6 54        		.byte	84
 4128 08d7 54        		.byte	84
 4129 08d8 54        		.byte	84
 4130 08d9 78        		.byte	120
 4131 08da 7F        		.byte	127
 4132 08db 48        		.byte	72
 4133 08dc 44        		.byte	68
 4134 08dd 44        		.byte	68
 4135 08de 38        		.byte	56
 4136 08df 38        		.byte	56
 4137 08e0 44        		.byte	68
 4138 08e1 44        		.byte	68
 4139 08e2 44        		.byte	68
 4140 08e3 20        		.byte	32
 4141 08e4 38        		.byte	56
 4142 08e5 44        		.byte	68
 4143 08e6 44        		.byte	68
 4144 08e7 48        		.byte	72
 4145 08e8 7F        		.byte	127
 4146 08e9 38        		.byte	56
 4147 08ea 54        		.byte	84
 4148 08eb 54        		.byte	84
 4149 08ec 54        		.byte	84
 4150 08ed 18        		.byte	24
 4151 08ee 08        		.byte	8
 4152 08ef 7E        		.byte	126
 4153 08f0 09        		.byte	9
 4154 08f1 01        		.byte	1
 4155 08f2 02        		.byte	2
 4156 08f3 08        		.byte	8
 4157 08f4 14        		.byte	20
 4158 08f5 54        		.byte	84
 4159 08f6 54        		.byte	84
 4160 08f7 3C        		.byte	60
 4161 08f8 7F        		.byte	127
 4162 08f9 08        		.byte	8
 4163 08fa 04        		.byte	4
 4164 08fb 04        		.byte	4
 4165 08fc 78        		.byte	120
 4166 08fd 00        		.byte	0
 4167 08fe 44        		.byte	68
 4168 08ff 7D        		.byte	125
 4169 0900 40        		.byte	64
 4170 0901 00        		.byte	0
 4171 0902 20        		.byte	32
 4172 0903 40        		.byte	64
 4173 0904 44        		.byte	68
 4174 0905 3D        		.byte	61
 4175 0906 00        		.byte	0
 4176 0907 00        		.byte	0
 4177 0908 7F        		.byte	127
 4178 0909 10        		.byte	16
 4179 090a 28        		.byte	40
 4180 090b 44        		.byte	68
 4181 090c 00        		.byte	0
 4182 090d 41        		.byte	65
 4183 090e 7F        		.byte	127
 4184 090f 40        		.byte	64
 4185 0910 00        		.byte	0
 4186 0911 7C        		.byte	124
 4187 0912 04        		.byte	4
 4188 0913 18        		.byte	24
 4189 0914 04        		.byte	4
 4190 0915 78        		.byte	120
 4191 0916 7C        		.byte	124
 4192 0917 08        		.byte	8
 4193 0918 04        		.byte	4
 4194 0919 04        		.byte	4
 4195 091a 78        		.byte	120
 4196 091b 38        		.byte	56
 4197 091c 44        		.byte	68
 4198 091d 44        		.byte	68
 4199 091e 44        		.byte	68
 4200 091f 38        		.byte	56
 4201 0920 7C        		.byte	124
 4202 0921 14        		.byte	20
 4203 0922 14        		.byte	20
 4204 0923 14        		.byte	20
 4205 0924 08        		.byte	8
 4206 0925 08        		.byte	8
 4207 0926 14        		.byte	20
 4208 0927 14        		.byte	20
 4209 0928 18        		.byte	24
 4210 0929 7C        		.byte	124
 4211 092a 7C        		.byte	124
 4212 092b 08        		.byte	8
 4213 092c 04        		.byte	4
 4214 092d 04        		.byte	4
 4215 092e 08        		.byte	8
 4216 092f 48        		.byte	72
 4217 0930 54        		.byte	84
 4218 0931 54        		.byte	84
 4219 0932 54        		.byte	84
 4220 0933 20        		.byte	32
 4221 0934 04        		.byte	4
 4222 0935 3F        		.byte	63
 4223 0936 44        		.byte	68
 4224 0937 40        		.byte	64
 4225 0938 20        		.byte	32
 4226 0939 3C        		.byte	60
 4227 093a 40        		.byte	64
 4228 093b 40        		.byte	64
 4229 093c 20        		.byte	32
 4230 093d 7C        		.byte	124
 4231 093e 1C        		.byte	28
 4232 093f 20        		.byte	32
 4233 0940 40        		.byte	64
 4234 0941 20        		.byte	32
 4235 0942 1C        		.byte	28
 4236 0943 3C        		.byte	60
 4237 0944 40        		.byte	64
 4238 0945 30        		.byte	48
 4239 0946 40        		.byte	64
 4240 0947 3C        		.byte	60
 4241 0948 44        		.byte	68
 4242 0949 28        		.byte	40
 4243 094a 10        		.byte	16
 4244 094b 28        		.byte	40
 4245 094c 44        		.byte	68
 4246 094d 0C        		.byte	12
 4247 094e 50        		.byte	80
 4248 094f 50        		.byte	80
 4249 0950 50        		.byte	80
 4250 0951 3C        		.byte	60
 4251 0952 44        		.byte	68
 4252 0953 64        		.byte	100
 4253 0954 54        		.byte	84
 4254 0955 4C        		.byte	76
 4255 0956 44        		.byte	68
 4256 0957 00        		.byte	0
 4257 0958 08        		.byte	8
 4258 0959 36        		.byte	54
 4259 095a 41        		.byte	65
 4260 095b 00        		.byte	0
 4261 095c 00        		.byte	0
 4262 095d 00        		.byte	0
 4263 095e 7F        		.byte	127
 4264 095f 00        		.byte	0
 4265 0960 00        		.byte	0
 4266 0961 00        		.byte	0
 4267 0962 41        		.byte	65
 4268 0963 36        		.byte	54
 4269 0964 08        		.byte	8
 4270 0965 00        		.byte	0
 4271 0966 08        		.byte	8
 4272 0967 08        		.byte	8
 4273 0968 2A        		.byte	42
 4274 0969 1C        		.byte	28
 4275 096a 08        		.byte	8
 4276 096b 08        		.byte	8
 4277 096c 1C        		.byte	28
 4278 096d 2A        		.byte	42
 4279 096e 08        		.byte	8
 4280 096f 08        		.byte	8
 4281               		.text
 4282               	.Letext0:
 4283               		.file 4 "/usr/avr/include/stdint.h"
 4284               		.file 5 "/usr/lib/gcc/avr/8.2.0/include/stddef.h"
 4285               		.file 6 "/usr/avr/include/stdio.h"
 4286               		.file 7 "/usr/avr/include/stdlib.h"
 4287               		.file 8 "glcd/glcd.h"
 4288               		.file 9 "glcd/unit_tests.h"
 4289               		.file 10 "glcd/fonts/font5x7.h"
 4290               		.file 11 "glcd/fonts/Liberation_Sans15x21_Numbers.h"
 4291               		.file 12 "glcd/fonts/Earthbound_12x19_48to57.h"
 4292               		.file 13 "glcd/glcd_graphics.h"
 4293               		.file 14 "glcd/glcd_controllers.h"
 4294               		.file 15 "glcd/glcd_graphs.h"
 4295               		.file 16 "glcd/glcd_text_tiny.h"
 4296               		.file 17 "glcd/glcd_text.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 unit_tests.c
     /tmp/ccRAFucd.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccRAFucd.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccRAFucd.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccRAFucd.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccRAFucd.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccRAFucd.s:12     .text:0000000000000000 glcd_test_circles
     /tmp/ccRAFucd.s:3240   .bss:0000000000000000 unit_test_return
     /tmp/ccRAFucd.s:295    .text:00000000000000ca glcd_test_counter_and_graph
     /tmp/ccRAFucd.s:3245   .progmem.data:0000000000000568 Liberation_Sans15x21_Numbers
     /tmp/ccRAFucd.s:464    .text:0000000000000198 glcd_test_glcdutils
     /tmp/ccRAFucd.s:1847   .progmem.data:0000000000000000 font_Earthbound_12x19_48to57
     /tmp/ccRAFucd.s:635    .text:0000000000000256 glcd_test_text_up_down
     /tmp/ccRAFucd.s:867    .text:00000000000002f0 glcd_test_tiny_text
     /tmp/ccRAFucd.s:3800   .progmem.data:0000000000000790 Font5x7
     /tmp/ccRAFucd.s:1064   .text:0000000000000386 glcd_test_hello_world
     /tmp/ccRAFucd.s:1126   .text:00000000000003bc glcd_test_rectangles
     /tmp/ccRAFucd.s:1685   .text:0000000000000550 glcd_test_scrolling_graph
     /tmp/ccRAFucd.s:1812   .text:00000000000005de glcd_test_bitmap_128x64
     /tmp/ccRAFucd.s:2211   .progmem.data:0000000000000168 bmp_oslogo

UNDEFINED SYMBOLS
glcd_clear
rand
__divmodhi4
glcd_fill_circle
glcd_write
glcd_clear_buffer
glcd_set_font
sprintf
glcd_draw_string_xy
glcd_bar_graph_horizontal
glcd_bar_graph_vertical
glcd_font
font_current
glcd_tiny_set_font
glcd_tiny_draw_string_ammend
glcd_tiny_draw_string
glcd_draw_rect
glcd_draw_rect_thick
glcd_draw_rect_shadow
glcd_scrolling_bar_graph
glcd_draw_bitmap
__do_copy_data
__do_clear_bss

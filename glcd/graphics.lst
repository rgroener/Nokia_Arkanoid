   1               		.file	"graphics.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	glcd_set_pixel
  12               	glcd_set_pixel:
  13               	.LVL0:
  14               	.LFB12:
  15               		.file 1 "glcd/graphics.c"
   1:glcd/graphics.c **** /**
   2:glcd/graphics.c ****    \file graphics.c
   3:glcd/graphics.c ****    \brief Functions relating to graphics. e.g drawing lines, rectangles, circles etc.
   4:glcd/graphics.c ****    \author Andy Gock
   5:glcd/graphics.c **** 
   6:glcd/graphics.c ****    Some functions based on Limor Fried's PCD8544 Arduino library.
   7:glcd/graphics.c **** 
   8:glcd/graphics.c ****  */ 
   9:glcd/graphics.c **** 
  10:glcd/graphics.c **** /*
  11:glcd/graphics.c **** 	Copyright (c) 2012, Andy Gock
  12:glcd/graphics.c **** 
  13:glcd/graphics.c **** 	Copyright (c) 2012, Adafruit Industries
  14:glcd/graphics.c **** 
  15:glcd/graphics.c **** 	All rights reserved.
  16:glcd/graphics.c **** 
  17:glcd/graphics.c **** 	Redistribution and use in source and binary forms, with or without
  18:glcd/graphics.c **** 	modification, are permitted provided that the following conditions are met:
  19:glcd/graphics.c **** 		* Redistributions of source code must retain the above copyright
  20:glcd/graphics.c **** 		  notice, this list of conditions and the following disclaimer.
  21:glcd/graphics.c **** 		* Redistributions in binary form must reproduce the above copyright
  22:glcd/graphics.c **** 		  notice, this list of conditions and the following disclaimer in the
  23:glcd/graphics.c **** 		  documentation and/or other materials provided with the distribution.
  24:glcd/graphics.c **** 		* Neither the name of Andy Gock nor the
  25:glcd/graphics.c **** 		  names of its contributors may be used to endorse or promote products
  26:glcd/graphics.c **** 		  derived from this software without specific prior written permission.
  27:glcd/graphics.c **** 
  28:glcd/graphics.c **** 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  29:glcd/graphics.c **** 	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  30:glcd/graphics.c **** 	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  31:glcd/graphics.c **** 	DISCLAIMED. IN NO EVENT SHALL ANDY GOCK BE LIABLE FOR ANY
  32:glcd/graphics.c **** 	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  33:glcd/graphics.c **** 	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:glcd/graphics.c **** 	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  35:glcd/graphics.c **** 	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  36:glcd/graphics.c **** 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  37:glcd/graphics.c **** 	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  38:glcd/graphics.c **** */
  39:glcd/graphics.c **** 
  40:glcd/graphics.c **** #include <stdio.h>
  41:glcd/graphics.c **** #include <stdlib.h>
  42:glcd/graphics.c **** #include <string.h>
  43:glcd/graphics.c **** #include "glcd.h"
  44:glcd/graphics.c **** 
  45:glcd/graphics.c **** /* Based on PCD8544 library by Limor Fried */
  46:glcd/graphics.c **** void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
  16               		.loc 1 46 58 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  47:glcd/graphics.c **** 	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
  22               		.loc 1 47 2 view .LVU1
  23               		.loc 1 47 5 is_stmt 0 view .LVU2
  24 0000 8435      		cpi r24,lo8(84)
  25 0002 00F4      		brsh .L1
  26               		.loc 1 47 29 discriminator 1 view .LVU3
  27 0004 6033      		cpi r22,lo8(48)
  28 0006 00F4      		brsh .L1
  29               	.LVL1:
  30               	.LBB4:
  31               	.LBB5:
  48:glcd/graphics.c **** 		/* don't do anything if x/y is outside bounds of display size */
  49:glcd/graphics.c **** 		return;
  50:glcd/graphics.c **** 	}
  51:glcd/graphics.c **** 
  52:glcd/graphics.c **** 	if (color) {
  32               		.loc 1 52 2 is_stmt 1 view .LVU4
  33 0008 E82F      		mov r30,r24
  34 000a F0E0      		ldi r31,0
  35 000c 962F      		mov r25,r22
  36 000e 9695      		lsr r25
  37 0010 9695      		lsr r25
  38 0012 9695      		lsr r25
  39 0014 24E5      		ldi r18,lo8(84)
  40 0016 929F      		mul r25,r18
  41 0018 E00D      		add r30,r0
  42 001a F11D      		adc r31,r1
  43 001c 1124      		clr __zero_reg__
  44 001e E050      		subi r30,lo8(-(glcd_buffer))
  45 0020 F040      		sbci r31,hi8(-(glcd_buffer))
  46 0022 9081      		ld r25,Z
  47 0024 562F      		mov r21,r22
  48 0026 5770      		andi r21,lo8(7)
  49 0028 21E0      		ldi r18,lo8(1)
  50 002a 30E0      		ldi r19,0
  51 002c 00C0      		rjmp 2f
  52               		1:
  53 002e 220F      		lsl r18
  54               		2:
  55 0030 5A95      		dec r21
  56 0032 02F4      		brpl 1b
  57               		.loc 1 52 5 is_stmt 0 view .LVU5
  58 0034 4423      		tst r20
  59 0036 01F0      		breq .L3
  53:glcd/graphics.c **** 		/* Set black */
  54:glcd/graphics.c **** 		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
  60               		.loc 1 54 3 is_stmt 1 view .LVU6
  61               		.loc 1 54 40 is_stmt 0 view .LVU7
  62 0038 292B      		or r18,r25
  63               	.L5:
  55:glcd/graphics.c **** 	} else {
  56:glcd/graphics.c **** 		/* Set white */
  57:glcd/graphics.c **** 		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
  64               		.loc 1 57 40 view .LVU8
  65 003a 2083      		st Z,r18
  58:glcd/graphics.c **** 	}
  59:glcd/graphics.c **** 
  60:glcd/graphics.c **** 	glcd_update_bbox(x,y,x,y);
  66               		.loc 1 60 2 is_stmt 1 view .LVU9
  67 003c 262F      		mov r18,r22
  68 003e 482F      		mov r20,r24
  69               	.LVL2:
  70               		.loc 1 60 2 is_stmt 0 view .LVU10
  71 0040 0C94 0000 		jmp glcd_update_bbox
  72               	.LVL3:
  73               	.L3:
  57:glcd/graphics.c **** 	}
  74               		.loc 1 57 3 is_stmt 1 view .LVU11
  57:glcd/graphics.c **** 	}
  75               		.loc 1 57 40 is_stmt 0 view .LVU12
  76 0044 2095      		com r18
  77 0046 2923      		and r18,r25
  78 0048 00C0      		rjmp .L5
  79               	.LVL4:
  80               	.L1:
  81               	/* epilogue start */
  57:glcd/graphics.c **** 	}
  82               		.loc 1 57 40 view .LVU13
  83               	.LBE5:
  84               	.LBE4:
  61:glcd/graphics.c **** }
  85               		.loc 1 61 1 view .LVU14
  86 004a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE12:
  90               	.global	glcd_get_pixel
  92               	glcd_get_pixel:
  93               	.LVL5:
  94               	.LFB13:
  62:glcd/graphics.c **** 
  63:glcd/graphics.c **** /* Based on PCD8544 library by Limor Fried */
  64:glcd/graphics.c **** uint8_t glcd_get_pixel(uint8_t x, uint8_t y) {
  95               		.loc 1 64 46 is_stmt 1 view -0
  96               		.cfi_startproc
  97               	/* prologue: function */
  98               	/* frame size = 0 */
  99               	/* stack size = 0 */
 100               	.L__stack_usage = 0
  65:glcd/graphics.c **** 	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
 101               		.loc 1 65 2 view .LVU16
 102               		.loc 1 65 5 is_stmt 0 view .LVU17
 103 004c 8435      		cpi r24,lo8(84)
 104 004e 00F4      		brsh .L9
 105               		.loc 1 65 28 discriminator 1 view .LVU18
 106 0050 6033      		cpi r22,lo8(48)
 107 0052 00F4      		brsh .L9
  66:glcd/graphics.c **** 		return 0;
  67:glcd/graphics.c **** 	}
  68:glcd/graphics.c **** 	
  69:glcd/graphics.c **** 	if ( glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] & ( 1 << (y%8)) ) {
 108               		.loc 1 69 2 is_stmt 1 view .LVU19
 109               		.loc 1 69 24 is_stmt 0 view .LVU20
 110 0054 962F      		mov r25,r22
 111 0056 9695      		lsr r25
 112 0058 9695      		lsr r25
 113 005a 9695      		lsr r25
 114               		.loc 1 69 27 view .LVU21
 115 005c 44E5      		ldi r20,lo8(84)
 116 005e 949F      		mul r25,r20
 117 0060 9001      		movw r18,r0
 118 0062 1124      		clr __zero_reg__
 119               		.loc 1 69 18 view .LVU22
 120 0064 2050      		subi r18,lo8(-(glcd_buffer))
 121 0066 3040      		sbci r19,hi8(-(glcd_buffer))
 122 0068 280F      		add r18,r24
 123 006a 311D      		adc r19,__zero_reg__
 124 006c F901      		movw r30,r18
 125 006e 8081      		ld r24,Z
 126               	.LVL6:
 127               		.loc 1 69 18 view .LVU23
 128 0070 90E0      		ldi r25,0
 129               		.loc 1 69 55 view .LVU24
 130 0072 6770      		andi r22,lo8(7)
 131               	.LVL7:
 132               		.loc 1 69 7 view .LVU25
 133 0074 00C0      		rjmp 2f
 134               		1:
 135 0076 9595      		asr r25
 136 0078 8795      		ror r24
 137               		2:
 138 007a 6A95      		dec r22
 139 007c 02F4      		brpl 1b
 140               		.loc 1 69 5 view .LVU26
 141 007e 8170      		andi r24,lo8(1)
 142 0080 0895      		ret
 143               	.LVL8:
 144               	.L9:
  66:glcd/graphics.c **** 		return 0;
 145               		.loc 1 66 10 view .LVU27
 146 0082 80E0      		ldi r24,0
 147               	.LVL9:
 148               	/* epilogue start */
  70:glcd/graphics.c **** 		return 1;
  71:glcd/graphics.c **** 	} else {
  72:glcd/graphics.c **** 		return 0;
  73:glcd/graphics.c **** 	}
  74:glcd/graphics.c **** }
 149               		.loc 1 74 1 view .LVU28
 150 0084 0895      		ret
 151               		.cfi_endproc
 152               	.LFE13:
 154               	.global	glcd_invert_pixel
 156               	glcd_invert_pixel:
 157               	.LVL10:
 158               	.LFB14:
  75:glcd/graphics.c **** 
  76:glcd/graphics.c **** void glcd_invert_pixel(uint8_t x, uint8_t y) {
 159               		.loc 1 76 46 is_stmt 1 view -0
 160               		.cfi_startproc
 161               		.loc 1 76 46 is_stmt 0 view .LVU30
 162 0086 CF93      		push r28
 163               	.LCFI0:
 164               		.cfi_def_cfa_offset 3
 165               		.cfi_offset 28, -2
 166 0088 DF93      		push r29
 167               	.LCFI1:
 168               		.cfi_def_cfa_offset 4
 169               		.cfi_offset 29, -3
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 2 */
 173               	.L__stack_usage = 2
 174 008a C82F      		mov r28,r24
 175 008c D62F      		mov r29,r22
  77:glcd/graphics.c **** 	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
 176               		.loc 1 77 2 is_stmt 1 view .LVU31
 177               		.loc 1 77 5 is_stmt 0 view .LVU32
 178 008e 8435      		cpi r24,lo8(84)
 179 0090 00F4      		brsh .L10
 180               		.loc 1 77 28 discriminator 1 view .LVU33
 181 0092 6033      		cpi r22,lo8(48)
 182 0094 00F4      		brsh .L10
 183               	.LVL11:
 184               	.LBB8:
 185               	.LBB9:
  78:glcd/graphics.c **** 		return;
  79:glcd/graphics.c **** 	}
  80:glcd/graphics.c **** 	glcd_update_bbox(x,y,x,y);
 186               		.loc 1 80 2 is_stmt 1 view .LVU34
 187 0096 262F      		mov r18,r22
 188 0098 482F      		mov r20,r24
 189 009a 0E94 0000 		call glcd_update_bbox
 190               	.LVL12:
  81:glcd/graphics.c **** 	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
 191               		.loc 1 81 2 view .LVU35
 192               		.loc 1 81 39 is_stmt 0 view .LVU36
 193 009e 8D2F      		mov r24,r29
 194 00a0 8695      		lsr r24
 195 00a2 8695      		lsr r24
 196 00a4 8695      		lsr r24
 197 00a6 EC2F      		mov r30,r28
 198 00a8 F0E0      		ldi r31,0
 199 00aa 94E5      		ldi r25,lo8(84)
 200 00ac 899F      		mul r24,r25
 201 00ae E00D      		add r30,r0
 202 00b0 F11D      		adc r31,r1
 203 00b2 1124      		clr __zero_reg__
 204 00b4 E050      		subi r30,lo8(-(glcd_buffer))
 205 00b6 F040      		sbci r31,hi8(-(glcd_buffer))
 206               		.loc 1 81 51 view .LVU37
 207 00b8 D770      		andi r29,lo8(7)
 208               	.LVL13:
 209               		.loc 1 81 46 view .LVU38
 210 00ba 21E0      		ldi r18,lo8(1)
 211 00bc 30E0      		ldi r19,0
 212 00be 00C0      		rjmp 2f
 213               		1:
 214 00c0 220F      		lsl r18
 215               		2:
 216 00c2 DA95      		dec r29
 217 00c4 02F4      		brpl 1b
 218               		.loc 1 81 39 view .LVU39
 219 00c6 8081      		ld r24,Z
 220 00c8 8227      		eor r24,r18
 221 00ca 8083      		st Z,r24
 222               	.LVL14:
 223               	.L10:
 224               	/* epilogue start */
 225               		.loc 1 81 39 view .LVU40
 226               	.LBE9:
 227               	.LBE8:
  82:glcd/graphics.c **** }
 228               		.loc 1 82 1 view .LVU41
 229 00cc DF91      		pop r29
 230 00ce CF91      		pop r28
 231               	.LVL15:
 232               		.loc 1 82 1 view .LVU42
 233 00d0 0895      		ret
 234               		.cfi_endproc
 235               	.LFE14:
 237               	.global	glcd_draw_line
 239               	glcd_draw_line:
 240               	.LVL16:
 241               	.LFB15:
  83:glcd/graphics.c **** 
  84:glcd/graphics.c **** /* Bresenham's algorithm - based on PCD8544 library Limor Fried */
  85:glcd/graphics.c **** void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 242               		.loc 1 85 84 is_stmt 1 view -0
 243               		.cfi_startproc
 244               		.loc 1 85 84 is_stmt 0 view .LVU44
 245 00d2 8F92      		push r8
 246               	.LCFI2:
 247               		.cfi_def_cfa_offset 3
 248               		.cfi_offset 8, -2
 249 00d4 9F92      		push r9
 250               	.LCFI3:
 251               		.cfi_def_cfa_offset 4
 252               		.cfi_offset 9, -3
 253 00d6 AF92      		push r10
 254               	.LCFI4:
 255               		.cfi_def_cfa_offset 5
 256               		.cfi_offset 10, -4
 257 00d8 BF92      		push r11
 258               	.LCFI5:
 259               		.cfi_def_cfa_offset 6
 260               		.cfi_offset 11, -5
 261 00da CF92      		push r12
 262               	.LCFI6:
 263               		.cfi_def_cfa_offset 7
 264               		.cfi_offset 12, -6
 265 00dc DF92      		push r13
 266               	.LCFI7:
 267               		.cfi_def_cfa_offset 8
 268               		.cfi_offset 13, -7
 269 00de EF92      		push r14
 270               	.LCFI8:
 271               		.cfi_def_cfa_offset 9
 272               		.cfi_offset 14, -8
 273 00e0 FF92      		push r15
 274               	.LCFI9:
 275               		.cfi_def_cfa_offset 10
 276               		.cfi_offset 15, -9
 277 00e2 0F93      		push r16
 278               	.LCFI10:
 279               		.cfi_def_cfa_offset 11
 280               		.cfi_offset 16, -10
 281 00e4 1F93      		push r17
 282               	.LCFI11:
 283               		.cfi_def_cfa_offset 12
 284               		.cfi_offset 17, -11
 285 00e6 CF93      		push r28
 286               	.LCFI12:
 287               		.cfi_def_cfa_offset 13
 288               		.cfi_offset 28, -12
 289 00e8 DF93      		push r29
 290               	.LCFI13:
 291               		.cfi_def_cfa_offset 14
 292               		.cfi_offset 29, -13
 293               	/* prologue: function */
 294               	/* frame size = 0 */
 295               	/* stack size = 12 */
 296               	.L__stack_usage = 12
 297 00ea C82F      		mov r28,r24
 298 00ec D62F      		mov r29,r22
 299 00ee 142F      		mov r17,r20
 300 00f0 F22E      		mov r15,r18
  86:glcd/graphics.c **** 	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
 301               		.loc 1 86 2 is_stmt 1 view .LVU45
 302               		.loc 1 86 18 is_stmt 0 view .LVU46
 303 00f2 261B      		sub r18,r22
 304 00f4 330B      		sbc r19,r19
 305               	.LVL17:
 306               		.loc 1 86 18 view .LVU47
 307 00f6 6901      		movw r12,r18
 308 00f8 37FF      		sbrs r19,7
 309 00fa 00C0      		rjmp .L13
 310 00fc D194      		neg r13
 311 00fe C194      		neg r12
 312 0100 D108      		sbc r13,__zero_reg__
 313               	.L13:
 314               		.loc 1 86 33 view .LVU48
 315 0102 812F      		mov r24,r17
 316               	.LVL18:
 317               		.loc 1 86 33 view .LVU49
 318 0104 8C1B      		sub r24,r28
 319 0106 990B      		sbc r25,r25
 320 0108 5C01      		movw r10,r24
 321 010a 97FF      		sbrs r25,7
 322 010c 00C0      		rjmp .L14
 323 010e B194      		neg r11
 324 0110 A194      		neg r10
 325 0112 B108      		sbc r11,__zero_reg__
 326               	.L14:
 327               	.LVL19:
  87:glcd/graphics.c **** 	uint8_t dx, dy;
 328               		.loc 1 87 2 is_stmt 1 view .LVU50
  88:glcd/graphics.c **** 	int8_t err;
 329               		.loc 1 88 2 view .LVU51
  89:glcd/graphics.c **** 	int8_t ystep;
 330               		.loc 1 89 2 view .LVU52
  90:glcd/graphics.c **** 	
  91:glcd/graphics.c **** 	if (steep) {
 331               		.loc 1 91 2 view .LVU53
 332               		.loc 1 91 5 is_stmt 0 view .LVU54
 333 0114 AC14      		cp r10,r12
 334 0116 BD04      		cpc r11,r13
 335 0118 04F4      		brge .L15
 336 011a 812F      		mov r24,r17
 337               	.LBB10:
  92:glcd/graphics.c **** 		swap(x0, y0);
  93:glcd/graphics.c **** 		swap(x1, y1);
 338               		.loc 1 93 3 view .LVU55
 339 011c 1F2D      		mov r17,r15
 340 011e F82E      		mov r15,r24
 341               	.LVL20:
 342               		.loc 1 93 3 view .LVU56
 343               	.LBE10:
  91:glcd/graphics.c **** 		swap(x0, y0);
 344               		.loc 1 91 5 view .LVU57
 345 0120 8C2F      		mov r24,r28
 346               	.LBB11:
  92:glcd/graphics.c **** 		swap(x0, y0);
 347               		.loc 1 92 3 view .LVU58
 348 0122 CD2F      		mov r28,r29
 349               	.LVL21:
  92:glcd/graphics.c **** 		swap(x0, y0);
 350               		.loc 1 92 3 view .LVU59
 351 0124 D82F      		mov r29,r24
 352               	.LVL22:
 353               	.L15:
  92:glcd/graphics.c **** 		swap(x0, y0);
 354               		.loc 1 92 3 view .LVU60
 355               	.LBE11:
 356               		.loc 1 93 15 is_stmt 1 discriminator 1 view .LVU61
  94:glcd/graphics.c **** 	}
  95:glcd/graphics.c **** 	
  96:glcd/graphics.c **** 	if (x0 > x1) {
 357               		.loc 1 96 2 discriminator 1 view .LVU62
 358               		.loc 1 96 5 is_stmt 0 discriminator 1 view .LVU63
 359 0126 1C17      		cp r17,r28
 360 0128 00F4      		brsh .L16
 361               		.loc 1 96 5 view .LVU64
 362 012a 8D2F      		mov r24,r29
 363               	.LBB12:
  97:glcd/graphics.c **** 		swap(x0, x1);
  98:glcd/graphics.c **** 		swap(y0, y1);
 364               		.loc 1 98 3 view .LVU65
 365 012c DF2D      		mov r29,r15
 366               	.LVL23:
 367               		.loc 1 98 3 view .LVU66
 368 012e F82E      		mov r15,r24
 369               	.LVL24:
 370               		.loc 1 98 3 view .LVU67
 371               	.LBE12:
  96:glcd/graphics.c **** 		swap(x0, x1);
 372               		.loc 1 96 5 view .LVU68
 373 0130 8C2F      		mov r24,r28
 374               	.LVL25:
  96:glcd/graphics.c **** 		swap(x0, x1);
 375               		.loc 1 96 5 view .LVU69
 376 0132 C12F      		mov r28,r17
 377               	.LVL26:
  96:glcd/graphics.c **** 		swap(x0, x1);
 378               		.loc 1 96 5 view .LVU70
 379 0134 182F      		mov r17,r24
 380               	.LVL27:
 381               	.L16:
 382               		.loc 1 98 15 is_stmt 1 discriminator 1 view .LVU71
  99:glcd/graphics.c **** 	}
 100:glcd/graphics.c **** 	
 101:glcd/graphics.c **** 	glcd_update_bbox( x0, y0, x1, y1 );
 383               		.loc 1 101 2 discriminator 1 view .LVU72
 384 0136 2F2D      		mov r18,r15
 385 0138 412F      		mov r20,r17
 386 013a 6D2F      		mov r22,r29
 387 013c 8C2F      		mov r24,r28
 388 013e 0E94 0000 		call glcd_update_bbox
 389               	.LVL28:
 102:glcd/graphics.c **** 
 103:glcd/graphics.c **** 	dx = x1 - x0;
 390               		.loc 1 103 2 discriminator 1 view .LVU73
 391               		.loc 1 103 5 is_stmt 0 discriminator 1 view .LVU74
 392 0142 812E      		mov r8,r17
 393 0144 8C1A      		sub r8,r28
 394               	.LVL29:
 104:glcd/graphics.c **** 	dy = abs(y1 - y0);
 395               		.loc 1 104 2 is_stmt 1 discriminator 1 view .LVU75
 396               		.loc 1 104 7 is_stmt 0 discriminator 1 view .LVU76
 397 0146 2F2D      		mov r18,r15
 398 0148 2D1B      		sub r18,r29
 399 014a 330B      		sbc r19,r19
 400 014c C901      		movw r24,r18
 401 014e 37FF      		sbrs r19,7
 402 0150 00C0      		rjmp .L17
 403 0152 9195      		neg r25
 404 0154 8195      		neg r24
 405 0156 9109      		sbc r25,__zero_reg__
 406               	.L17:
 407               		.loc 1 104 5 discriminator 1 view .LVU77
 408 0158 E82E      		mov r14,r24
 409               	.LVL30:
 105:glcd/graphics.c **** 	
 106:glcd/graphics.c **** 	err = dx / 2;
 410               		.loc 1 106 2 is_stmt 1 discriminator 1 view .LVU78
 411               		.loc 1 106 6 is_stmt 0 discriminator 1 view .LVU79
 412 015a 982C      		mov r9,r8
 413 015c 9694      		lsr r9
 414               	.LVL31:
 107:glcd/graphics.c **** 	
 108:glcd/graphics.c **** 	if (y0 < y1) {
 415               		.loc 1 108 2 is_stmt 1 discriminator 1 view .LVU80
 416               		.loc 1 108 5 is_stmt 0 discriminator 1 view .LVU81
 417 015e DF15      		cp r29,r15
 418 0160 00F0      		brlo .L24
 109:glcd/graphics.c **** 		ystep = 1;
 110:glcd/graphics.c **** 	} else {
 111:glcd/graphics.c **** 		ystep = -1;
 419               		.loc 1 111 9 view .LVU82
 420 0162 FF24      		clr r15
 421 0164 FA94      		dec r15
 422               	.LVL32:
 423               	.L22:
 112:glcd/graphics.c **** 	}
 113:glcd/graphics.c **** 	
 114:glcd/graphics.c **** 	for (; x0<=x1; x0++) {
 424               		.loc 1 114 2 discriminator 1 view .LVU83
 425 0166 1C17      		cp r17,r28
 426 0168 00F4      		brsh .L23
 427               	/* epilogue start */
 115:glcd/graphics.c **** 		if (steep) {
 116:glcd/graphics.c **** 			glcd_set_pixel(y0, x0, color);
 117:glcd/graphics.c **** 		} else {
 118:glcd/graphics.c **** 			glcd_set_pixel(x0, y0, color);
 119:glcd/graphics.c **** 		}
 120:glcd/graphics.c **** 		err -= dy;
 121:glcd/graphics.c **** 		if (err < 0) {
 122:glcd/graphics.c **** 			y0 += ystep;
 123:glcd/graphics.c **** 			err += dx;
 124:glcd/graphics.c **** 		}
 125:glcd/graphics.c **** 	}
 126:glcd/graphics.c **** }
 428               		.loc 1 126 1 view .LVU84
 429 016a DF91      		pop r29
 430               	.LVL33:
 431               		.loc 1 126 1 view .LVU85
 432 016c CF91      		pop r28
 433               	.LVL34:
 434               		.loc 1 126 1 view .LVU86
 435 016e 1F91      		pop r17
 436               	.LVL35:
 437               		.loc 1 126 1 view .LVU87
 438 0170 0F91      		pop r16
 439               	.LVL36:
 440               		.loc 1 126 1 view .LVU88
 441 0172 FF90      		pop r15
 442               	.LVL37:
 443               		.loc 1 126 1 view .LVU89
 444 0174 EF90      		pop r14
 445 0176 DF90      		pop r13
 446 0178 CF90      		pop r12
 447               		.loc 1 126 1 view .LVU90
 448 017a BF90      		pop r11
 449 017c AF90      		pop r10
 450 017e 9F90      		pop r9
 451               	.LVL38:
 452               		.loc 1 126 1 view .LVU91
 453 0180 8F90      		pop r8
 454               	.LVL39:
 455               		.loc 1 126 1 view .LVU92
 456 0182 0895      		ret
 457               	.LVL40:
 458               	.L23:
 115:glcd/graphics.c **** 		if (steep) {
 459               		.loc 1 115 3 is_stmt 1 view .LVU93
 116:glcd/graphics.c **** 		} else {
 460               		.loc 1 116 4 is_stmt 0 view .LVU94
 461 0184 402F      		mov r20,r16
 462 0186 6C2F      		mov r22,r28
 463 0188 8D2F      		mov r24,r29
 115:glcd/graphics.c **** 		if (steep) {
 464               		.loc 1 115 6 view .LVU95
 465 018a AC14      		cp r10,r12
 466 018c BD04      		cpc r11,r13
 467 018e 04F0      		brlt .L25
 468               	.LVL41:
 118:glcd/graphics.c **** 		}
 469               		.loc 1 118 4 is_stmt 1 view .LVU96
 470 0190 6D2F      		mov r22,r29
 471               	.LVL42:
 118:glcd/graphics.c **** 		}
 472               		.loc 1 118 4 is_stmt 0 view .LVU97
 473 0192 8C2F      		mov r24,r28
 474               	.LVL43:
 475               	.L25:
 118:glcd/graphics.c **** 		}
 476               		.loc 1 118 4 view .LVU98
 477 0194 0E94 0000 		call glcd_set_pixel
 478               	.LVL44:
 120:glcd/graphics.c **** 		if (err < 0) {
 479               		.loc 1 120 3 is_stmt 1 view .LVU99
 120:glcd/graphics.c **** 		if (err < 0) {
 480               		.loc 1 120 7 is_stmt 0 view .LVU100
 481 0198 9E18      		sub r9,r14
 482               	.LVL45:
 121:glcd/graphics.c **** 			y0 += ystep;
 483               		.loc 1 121 3 is_stmt 1 view .LVU101
 121:glcd/graphics.c **** 			y0 += ystep;
 484               		.loc 1 121 6 is_stmt 0 view .LVU102
 485 019a 97FE      		sbrs r9,7
 486 019c 00C0      		rjmp .L21
 122:glcd/graphics.c **** 			err += dx;
 487               		.loc 1 122 4 is_stmt 1 view .LVU103
 122:glcd/graphics.c **** 			err += dx;
 488               		.loc 1 122 7 is_stmt 0 view .LVU104
 489 019e DF0D      		add r29,r15
 490               	.LVL46:
 123:glcd/graphics.c **** 		}
 491               		.loc 1 123 4 is_stmt 1 view .LVU105
 123:glcd/graphics.c **** 		}
 492               		.loc 1 123 8 is_stmt 0 view .LVU106
 493 01a0 980C      		add r9,r8
 494               	.LVL47:
 495               	.L21:
 114:glcd/graphics.c **** 		if (steep) {
 496               		.loc 1 114 19 view .LVU107
 497 01a2 CF5F      		subi r28,lo8(-(1))
 498               	.LVL48:
 114:glcd/graphics.c **** 		if (steep) {
 499               		.loc 1 114 19 view .LVU108
 500 01a4 00C0      		rjmp .L22
 501               	.LVL49:
 502               	.L24:
 109:glcd/graphics.c **** 	} else {
 503               		.loc 1 109 9 view .LVU109
 504 01a6 FF24      		clr r15
 505 01a8 F394      		inc r15
 506               	.LVL50:
 109:glcd/graphics.c **** 	} else {
 507               		.loc 1 109 9 view .LVU110
 508 01aa 00C0      		rjmp .L22
 509               		.cfi_endproc
 510               	.LFE15:
 512               	.global	glcd_fill_rect
 514               	glcd_fill_rect:
 515               	.LVL51:
 516               	.LFB16:
 127:glcd/graphics.c **** 
 128:glcd/graphics.c **** void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
 129:glcd/graphics.c **** {
 517               		.loc 1 129 1 is_stmt 1 view -0
 518               		.cfi_startproc
 519               		.loc 1 129 1 is_stmt 0 view .LVU112
 520 01ac 5F92      		push r5
 521               	.LCFI14:
 522               		.cfi_def_cfa_offset 3
 523               		.cfi_offset 5, -2
 524 01ae 6F92      		push r6
 525               	.LCFI15:
 526               		.cfi_def_cfa_offset 4
 527               		.cfi_offset 6, -3
 528 01b0 7F92      		push r7
 529               	.LCFI16:
 530               		.cfi_def_cfa_offset 5
 531               		.cfi_offset 7, -4
 532 01b2 8F92      		push r8
 533               	.LCFI17:
 534               		.cfi_def_cfa_offset 6
 535               		.cfi_offset 8, -5
 536 01b4 9F92      		push r9
 537               	.LCFI18:
 538               		.cfi_def_cfa_offset 7
 539               		.cfi_offset 9, -6
 540 01b6 AF92      		push r10
 541               	.LCFI19:
 542               		.cfi_def_cfa_offset 8
 543               		.cfi_offset 10, -7
 544 01b8 BF92      		push r11
 545               	.LCFI20:
 546               		.cfi_def_cfa_offset 9
 547               		.cfi_offset 11, -8
 548 01ba CF92      		push r12
 549               	.LCFI21:
 550               		.cfi_def_cfa_offset 10
 551               		.cfi_offset 12, -9
 552 01bc DF92      		push r13
 553               	.LCFI22:
 554               		.cfi_def_cfa_offset 11
 555               		.cfi_offset 13, -10
 556 01be EF92      		push r14
 557               	.LCFI23:
 558               		.cfi_def_cfa_offset 12
 559               		.cfi_offset 14, -11
 560 01c0 FF92      		push r15
 561               	.LCFI24:
 562               		.cfi_def_cfa_offset 13
 563               		.cfi_offset 15, -12
 564 01c2 0F93      		push r16
 565               	.LCFI25:
 566               		.cfi_def_cfa_offset 14
 567               		.cfi_offset 16, -13
 568 01c4 1F93      		push r17
 569               	.LCFI26:
 570               		.cfi_def_cfa_offset 15
 571               		.cfi_offset 17, -14
 572 01c6 CF93      		push r28
 573               	.LCFI27:
 574               		.cfi_def_cfa_offset 16
 575               		.cfi_offset 28, -15
 576 01c8 DF93      		push r29
 577               	.LCFI28:
 578               		.cfi_def_cfa_offset 17
 579               		.cfi_offset 29, -16
 580               	/* prologue: function */
 581               	/* frame size = 0 */
 582               	/* stack size = 15 */
 583               	.L__stack_usage = 15
 584 01ca 182F      		mov r17,r24
 585 01cc 562E      		mov r5,r22
 586 01ce C42F      		mov r28,r20
 587 01d0 D22F      		mov r29,r18
 130:glcd/graphics.c **** 	int16_t i;
 588               		.loc 1 130 2 is_stmt 1 view .LVU113
 131:glcd/graphics.c **** 	for (i=x; i<x+w; i++) {
 589               		.loc 1 131 2 view .LVU114
 590               		.loc 1 131 8 is_stmt 0 view .LVU115
 591 01d2 E82E      		mov r14,r24
 592 01d4 F12C      		mov r15,__zero_reg__
 593               	.LVL52:
 594               		.loc 1 131 15 view .LVU116
 595 01d6 5701      		movw r10,r14
 596 01d8 A40E      		add r10,r20
 597 01da B11C      		adc r11,__zero_reg__
 598               	.LBB13:
 132:glcd/graphics.c **** 		int16_t j;
 133:glcd/graphics.c **** 		for (j=y; j<y+h; j++) {
 599               		.loc 1 133 9 view .LVU117
 600 01dc 662E      		mov r6,r22
 601 01de 712C      		mov r7,__zero_reg__
 602               		.loc 1 133 16 view .LVU118
 603 01e0 4301      		movw r8,r6
 604 01e2 820E      		add r8,r18
 605 01e4 911C      		adc r9,__zero_reg__
 606               	.LVL53:
 607               	.L27:
 608               		.loc 1 133 16 view .LVU119
 609               	.LBE13:
 131:glcd/graphics.c **** 	for (i=x; i<x+w; i++) {
 610               		.loc 1 131 2 discriminator 1 view .LVU120
 611 01e6 EA14      		cp r14,r10
 612 01e8 FB04      		cpc r15,r11
 613 01ea 04F0      		brlt .L30
 134:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 135:glcd/graphics.c **** 		}
 136:glcd/graphics.c **** 	}
 137:glcd/graphics.c **** 	glcd_update_bbox(x, y, x+w-1, y+h-1);
 614               		.loc 1 137 2 is_stmt 1 view .LVU121
 615 01ec 2FEF      		ldi r18,lo8(-1)
 616 01ee 2D0F      		add r18,r29
 617 01f0 250D      		add r18,r5
 618 01f2 4FEF      		ldi r20,lo8(-1)
 619 01f4 4C0F      		add r20,r28
 620 01f6 410F      		add r20,r17
 621 01f8 652D      		mov r22,r5
 622 01fa 812F      		mov r24,r17
 623               	/* epilogue start */
 138:glcd/graphics.c **** }
 624               		.loc 1 138 1 is_stmt 0 view .LVU122
 625 01fc DF91      		pop r29
 626               	.LVL54:
 627               		.loc 1 138 1 view .LVU123
 628 01fe CF91      		pop r28
 629               	.LVL55:
 630               		.loc 1 138 1 view .LVU124
 631 0200 1F91      		pop r17
 632               	.LVL56:
 633               		.loc 1 138 1 view .LVU125
 634 0202 0F91      		pop r16
 635               	.LVL57:
 636               		.loc 1 138 1 view .LVU126
 637 0204 FF90      		pop r15
 638 0206 EF90      		pop r14
 639               	.LVL58:
 640               		.loc 1 138 1 view .LVU127
 641 0208 DF90      		pop r13
 642 020a CF90      		pop r12
 643 020c BF90      		pop r11
 644 020e AF90      		pop r10
 645 0210 9F90      		pop r9
 646 0212 8F90      		pop r8
 647 0214 7F90      		pop r7
 648 0216 6F90      		pop r6
 649 0218 5F90      		pop r5
 650               	.LVL59:
 137:glcd/graphics.c **** }
 651               		.loc 1 137 2 view .LVU128
 652 021a 0C94 0000 		jmp glcd_update_bbox
 653               	.LVL60:
 654               	.L30:
 655               	.LBB14:
 132:glcd/graphics.c **** 		for (j=y; j<y+h; j++) {
 656               		.loc 1 132 3 is_stmt 1 view .LVU129
 133:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 657               		.loc 1 133 3 view .LVU130
 133:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 658               		.loc 1 133 9 is_stmt 0 view .LVU131
 659 021e 6301      		movw r12,r6
 660               	.LVL61:
 661               	.L28:
 133:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 662               		.loc 1 133 3 discriminator 1 view .LVU132
 663 0220 C814      		cp r12,r8
 664 0222 D904      		cpc r13,r9
 665 0224 04F0      		brlt .L29
 666               	.LBE14:
 131:glcd/graphics.c **** 		int16_t j;
 667               		.loc 1 131 20 discriminator 2 view .LVU133
 668 0226 8FEF      		ldi r24,-1
 669 0228 E81A      		sub r14,r24
 670 022a F80A      		sbc r15,r24
 671               	.LVL62:
 131:glcd/graphics.c **** 		int16_t j;
 672               		.loc 1 131 20 discriminator 2 view .LVU134
 673 022c 00C0      		rjmp .L27
 674               	.L29:
 675               	.LBB15:
 134:glcd/graphics.c **** 		}
 676               		.loc 1 134 4 is_stmt 1 discriminator 3 view .LVU135
 677 022e 402F      		mov r20,r16
 678 0230 6C2D      		mov r22,r12
 679 0232 8E2D      		mov r24,r14
 680 0234 0E94 0000 		call glcd_set_pixel
 681               	.LVL63:
 133:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 682               		.loc 1 133 21 is_stmt 0 discriminator 3 view .LVU136
 683 0238 8FEF      		ldi r24,-1
 684 023a C81A      		sub r12,r24
 685 023c D80A      		sbc r13,r24
 686               	.LVL64:
 133:glcd/graphics.c **** 			glcd_set_pixel(i, j, color);
 687               		.loc 1 133 21 discriminator 3 view .LVU137
 688 023e 00C0      		rjmp .L28
 689               	.LBE15:
 690               		.cfi_endproc
 691               	.LFE16:
 693               	.global	glcd_draw_rect
 695               	glcd_draw_rect:
 696               	.LVL65:
 697               	.LFB17:
 139:glcd/graphics.c **** 
 140:glcd/graphics.c **** void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
 141:glcd/graphics.c **** {
 698               		.loc 1 141 1 is_stmt 1 view -0
 699               		.cfi_startproc
 700               		.loc 1 141 1 is_stmt 0 view .LVU139
 701 0240 8F92      		push r8
 702               	.LCFI29:
 703               		.cfi_def_cfa_offset 3
 704               		.cfi_offset 8, -2
 705 0242 9F92      		push r9
 706               	.LCFI30:
 707               		.cfi_def_cfa_offset 4
 708               		.cfi_offset 9, -3
 709 0244 AF92      		push r10
 710               	.LCFI31:
 711               		.cfi_def_cfa_offset 5
 712               		.cfi_offset 10, -4
 713 0246 BF92      		push r11
 714               	.LCFI32:
 715               		.cfi_def_cfa_offset 6
 716               		.cfi_offset 11, -5
 717 0248 DF92      		push r13
 718               	.LCFI33:
 719               		.cfi_def_cfa_offset 7
 720               		.cfi_offset 13, -6
 721 024a EF92      		push r14
 722               	.LCFI34:
 723               		.cfi_def_cfa_offset 8
 724               		.cfi_offset 14, -7
 725 024c FF92      		push r15
 726               	.LCFI35:
 727               		.cfi_def_cfa_offset 9
 728               		.cfi_offset 15, -8
 729 024e 0F93      		push r16
 730               	.LCFI36:
 731               		.cfi_def_cfa_offset 10
 732               		.cfi_offset 16, -9
 733 0250 1F93      		push r17
 734               	.LCFI37:
 735               		.cfi_def_cfa_offset 11
 736               		.cfi_offset 17, -10
 737 0252 CF93      		push r28
 738               	.LCFI38:
 739               		.cfi_def_cfa_offset 12
 740               		.cfi_offset 28, -11
 741 0254 DF93      		push r29
 742               	.LCFI39:
 743               		.cfi_def_cfa_offset 13
 744               		.cfi_offset 29, -12
 745               	/* prologue: function */
 746               	/* frame size = 0 */
 747               	/* stack size = 11 */
 748               	.L__stack_usage = 11
 749 0256 D82F      		mov r29,r24
 750 0258 162F      		mov r17,r22
 751 025a C42F      		mov r28,r20
 752 025c A22E      		mov r10,r18
 142:glcd/graphics.c **** 	int16_t i;
 753               		.loc 1 142 2 is_stmt 1 view .LVU140
 143:glcd/graphics.c **** 	for (i=x; i<x+w; i++) {
 754               		.loc 1 143 2 view .LVU141
 755               		.loc 1 143 8 is_stmt 0 view .LVU142
 756 025e E82E      		mov r14,r24
 757 0260 F12C      		mov r15,__zero_reg__
 758               	.LVL66:
 759               		.loc 1 143 8 view .LVU143
 760 0262 DD24      		clr r13
 761 0264 DA94      		dec r13
 762 0266 D20E      		add r13,r18
 763 0268 D60E      		add r13,r22
 764               		.loc 1 143 15 view .LVU144
 765 026a 4701      		movw r8,r14
 766 026c 840E      		add r8,r20
 767 026e 911C      		adc r9,__zero_reg__
 768               	.LVL67:
 769               	.L32:
 770               		.loc 1 143 2 discriminator 1 view .LVU145
 771 0270 E814      		cp r14,r8
 772 0272 F904      		cpc r15,r9
 773 0274 04F0      		brlt .L33
 144:glcd/graphics.c **** 		glcd_set_pixel(i, y, color);
 145:glcd/graphics.c **** 		glcd_set_pixel(i, y+h-1, color);
 146:glcd/graphics.c **** 	}
 147:glcd/graphics.c **** 	for (i=y; i<y+h; i++) {
 774               		.loc 1 147 2 is_stmt 1 view .LVU146
 775               		.loc 1 147 8 is_stmt 0 view .LVU147
 776 0276 E12E      		mov r14,r17
 777               	.LVL68:
 778               		.loc 1 147 8 view .LVU148
 779 0278 F12C      		mov r15,__zero_reg__
 780               	.LVL69:
 781               		.loc 1 147 8 view .LVU149
 782 027a C150      		subi r28,lo8(-(-1))
 783               	.LVL70:
 784               		.loc 1 147 8 view .LVU150
 785 027c CD0F      		add r28,r29
 786               	.LVL71:
 787               		.loc 1 147 15 view .LVU151
 788 027e AE0C      		add r10,r14
 789 0280 BF2C      		mov r11,r15
 790 0282 B11C      		adc r11,__zero_reg__
 791               	.LVL72:
 792               	.L34:
 793               		.loc 1 147 2 discriminator 1 view .LVU152
 794 0284 EA14      		cp r14,r10
 795 0286 FB04      		cpc r15,r11
 796 0288 04F0      		brlt .L35
 148:glcd/graphics.c **** 		glcd_set_pixel(x, i, color);
 149:glcd/graphics.c **** 		glcd_set_pixel(x+w-1, i, color);
 150:glcd/graphics.c **** 	} 
 151:glcd/graphics.c **** 	glcd_update_bbox(x, y, x+w-1, y+h-1);
 797               		.loc 1 151 2 is_stmt 1 view .LVU153
 798 028a 2D2D      		mov r18,r13
 799 028c 4C2F      		mov r20,r28
 800 028e 612F      		mov r22,r17
 801 0290 8D2F      		mov r24,r29
 802               	/* epilogue start */
 152:glcd/graphics.c **** }
 803               		.loc 1 152 1 is_stmt 0 view .LVU154
 804 0292 DF91      		pop r29
 805               	.LVL73:
 806               		.loc 1 152 1 view .LVU155
 807 0294 CF91      		pop r28
 808 0296 1F91      		pop r17
 809               	.LVL74:
 810               		.loc 1 152 1 view .LVU156
 811 0298 0F91      		pop r16
 812               	.LVL75:
 813               		.loc 1 152 1 view .LVU157
 814 029a FF90      		pop r15
 815 029c EF90      		pop r14
 816               	.LVL76:
 817               		.loc 1 152 1 view .LVU158
 818 029e DF90      		pop r13
 819 02a0 BF90      		pop r11
 820 02a2 AF90      		pop r10
 821 02a4 9F90      		pop r9
 822 02a6 8F90      		pop r8
 151:glcd/graphics.c **** }
 823               		.loc 1 151 2 view .LVU159
 824 02a8 0C94 0000 		jmp glcd_update_bbox
 825               	.LVL77:
 826               	.L33:
 144:glcd/graphics.c **** 		glcd_set_pixel(i, y+h-1, color);
 827               		.loc 1 144 3 is_stmt 1 discriminator 3 view .LVU160
 828 02ac 402F      		mov r20,r16
 829 02ae 612F      		mov r22,r17
 830 02b0 8E2D      		mov r24,r14
 831 02b2 0E94 0000 		call glcd_set_pixel
 832               	.LVL78:
 145:glcd/graphics.c **** 	}
 833               		.loc 1 145 3 discriminator 3 view .LVU161
 834 02b6 402F      		mov r20,r16
 835 02b8 6D2D      		mov r22,r13
 836 02ba 8E2D      		mov r24,r14
 837 02bc 0E94 0000 		call glcd_set_pixel
 838               	.LVL79:
 143:glcd/graphics.c **** 		glcd_set_pixel(i, y, color);
 839               		.loc 1 143 20 is_stmt 0 discriminator 3 view .LVU162
 840 02c0 8FEF      		ldi r24,-1
 841 02c2 E81A      		sub r14,r24
 842 02c4 F80A      		sbc r15,r24
 843               	.LVL80:
 143:glcd/graphics.c **** 		glcd_set_pixel(i, y, color);
 844               		.loc 1 143 20 discriminator 3 view .LVU163
 845 02c6 00C0      		rjmp .L32
 846               	.LVL81:
 847               	.L35:
 148:glcd/graphics.c **** 		glcd_set_pixel(x+w-1, i, color);
 848               		.loc 1 148 3 is_stmt 1 discriminator 3 view .LVU164
 849 02c8 402F      		mov r20,r16
 850 02ca 6E2D      		mov r22,r14
 851 02cc 8D2F      		mov r24,r29
 852 02ce 0E94 0000 		call glcd_set_pixel
 853               	.LVL82:
 149:glcd/graphics.c **** 	} 
 854               		.loc 1 149 3 discriminator 3 view .LVU165
 855 02d2 402F      		mov r20,r16
 856 02d4 6E2D      		mov r22,r14
 857 02d6 8C2F      		mov r24,r28
 858 02d8 0E94 0000 		call glcd_set_pixel
 859               	.LVL83:
 147:glcd/graphics.c **** 		glcd_set_pixel(x, i, color);
 860               		.loc 1 147 20 is_stmt 0 discriminator 3 view .LVU166
 861 02dc 8FEF      		ldi r24,-1
 862 02de E81A      		sub r14,r24
 863 02e0 F80A      		sbc r15,r24
 864               	.LVL84:
 147:glcd/graphics.c **** 		glcd_set_pixel(x, i, color);
 865               		.loc 1 147 20 discriminator 3 view .LVU167
 866 02e2 00C0      		rjmp .L34
 867               		.cfi_endproc
 868               	.LFE17:
 870               	.global	glcd_draw_rect_thick
 872               	glcd_draw_rect_thick:
 873               	.LVL85:
 874               	.LFB18:
 153:glcd/graphics.c **** 
 154:glcd/graphics.c **** void glcd_draw_rect_thick(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t tx, uint8_t ty, uint8
 155:glcd/graphics.c **** {
 875               		.loc 1 155 1 is_stmt 1 view -0
 876               		.cfi_startproc
 877               		.loc 1 155 1 is_stmt 0 view .LVU169
 878 02e4 6F92      		push r6
 879               	.LCFI40:
 880               		.cfi_def_cfa_offset 3
 881               		.cfi_offset 6, -2
 882 02e6 7F92      		push r7
 883               	.LCFI41:
 884               		.cfi_def_cfa_offset 4
 885               		.cfi_offset 7, -3
 886 02e8 8F92      		push r8
 887               	.LCFI42:
 888               		.cfi_def_cfa_offset 5
 889               		.cfi_offset 8, -4
 890 02ea 9F92      		push r9
 891               	.LCFI43:
 892               		.cfi_def_cfa_offset 6
 893               		.cfi_offset 9, -5
 894 02ec AF92      		push r10
 895               	.LCFI44:
 896               		.cfi_def_cfa_offset 7
 897               		.cfi_offset 10, -6
 898 02ee BF92      		push r11
 899               	.LCFI45:
 900               		.cfi_def_cfa_offset 8
 901               		.cfi_offset 11, -7
 902 02f0 CF92      		push r12
 903               	.LCFI46:
 904               		.cfi_def_cfa_offset 9
 905               		.cfi_offset 12, -8
 906 02f2 DF92      		push r13
 907               	.LCFI47:
 908               		.cfi_def_cfa_offset 10
 909               		.cfi_offset 13, -9
 910 02f4 EF92      		push r14
 911               	.LCFI48:
 912               		.cfi_def_cfa_offset 11
 913               		.cfi_offset 14, -10
 914 02f6 FF92      		push r15
 915               	.LCFI49:
 916               		.cfi_def_cfa_offset 12
 917               		.cfi_offset 15, -11
 918 02f8 0F93      		push r16
 919               	.LCFI50:
 920               		.cfi_def_cfa_offset 13
 921               		.cfi_offset 16, -12
 922 02fa 1F93      		push r17
 923               	.LCFI51:
 924               		.cfi_def_cfa_offset 14
 925               		.cfi_offset 17, -13
 926 02fc CF93      		push r28
 927               	.LCFI52:
 928               		.cfi_def_cfa_offset 15
 929               		.cfi_offset 28, -14
 930 02fe DF93      		push r29
 931               	.LCFI53:
 932               		.cfi_def_cfa_offset 16
 933               		.cfi_offset 29, -15
 934               	/* prologue: function */
 935               	/* frame size = 0 */
 936               	/* stack size = 14 */
 937               	.L__stack_usage = 14
 938 0300 182F      		mov r17,r24
 939 0302 F62E      		mov r15,r22
 940 0304 C42F      		mov r28,r20
 941 0306 D22F      		mov r29,r18
 156:glcd/graphics.c **** 	int16_t i, t;
 942               		.loc 1 156 2 is_stmt 1 view .LVU170
 157:glcd/graphics.c **** 	
 158:glcd/graphics.c **** 	if (tx == 0) {
 943               		.loc 1 158 2 view .LVU171
 944               		.loc 1 158 5 is_stmt 0 view .LVU172
 945 0308 0111      		cpse r16,__zero_reg__
 946 030a 00C0      		rjmp .L37
 159:glcd/graphics.c **** 		tx = 1;
 947               		.loc 1 159 6 view .LVU173
 948 030c 01E0      		ldi r16,lo8(1)
 949               	.LVL86:
 950               	.L37:
 160:glcd/graphics.c **** 	}
 161:glcd/graphics.c **** 
 162:glcd/graphics.c **** 	if (ty == 0) {
 951               		.loc 1 162 2 is_stmt 1 view .LVU174
 952               		.loc 1 162 5 is_stmt 0 view .LVU175
 953 030e E110      		cpse r14,__zero_reg__
 954 0310 00C0      		rjmp .L38
 163:glcd/graphics.c **** 		ty = 1;
 955               		.loc 1 163 6 view .LVU176
 956 0312 EE24      		clr r14
 957 0314 E394      		inc r14
 958               	.LVL87:
 959               	.L38:
 164:glcd/graphics.c **** 	}
 165:glcd/graphics.c **** 	
 166:glcd/graphics.c **** 	for (i=x; i<x+w; i++) {
 960               		.loc 1 166 2 is_stmt 1 view .LVU177
 961               		.loc 1 166 8 is_stmt 0 view .LVU178
 962 0316 A12E      		mov r10,r17
 963 0318 B12C      		mov r11,__zero_reg__
 964               	.LVL88:
 965               		.loc 1 166 15 view .LVU179
 966 031a 4501      		movw r8,r10
 967 031c 8C0E      		add r8,r28
 968 031e 911C      		adc r9,__zero_reg__
 969 0320 6624      		clr r6
 970 0322 6A94      		dec r6
 971 0324 6D0E      		add r6,r29
 972 0326 EF0C      		add r14,r15
 973               	.LVL89:
 974               	.L39:
 975               		.loc 1 166 2 discriminator 1 view .LVU180
 976 0328 A814      		cp r10,r8
 977 032a B904      		cpc r11,r9
 978 032c 04F0      		brlt .L41
 167:glcd/graphics.c **** 		/* Top and bottom sides */
 168:glcd/graphics.c **** 		for (t=0; t<(ty); t++) {
 169:glcd/graphics.c **** 			glcd_set_pixel(i, y+t, color);
 170:glcd/graphics.c **** 			glcd_set_pixel(i, y+h-1-t, color);
 171:glcd/graphics.c **** 		}
 172:glcd/graphics.c **** 	}
 173:glcd/graphics.c **** 	for (i=y; i<y+h; i++) {
 979               		.loc 1 173 2 is_stmt 1 view .LVU181
 980               		.loc 1 173 8 is_stmt 0 view .LVU182
 981 032e AF2C      		mov r10,r15
 982               	.LVL90:
 983               		.loc 1 173 8 view .LVU183
 984 0330 B12C      		mov r11,__zero_reg__
 985               	.LVL91:
 986               		.loc 1 173 15 view .LVU184
 987 0332 4501      		movw r8,r10
 988 0334 8D0E      		add r8,r29
 989 0336 911C      		adc r9,__zero_reg__
 990 0338 C150      		subi r28,lo8(-(-1))
 991               	.LVL92:
 992               		.loc 1 173 15 view .LVU185
 993 033a 010F      		add r16,r17
 994               	.LVL93:
 995               	.L42:
 996               		.loc 1 173 2 discriminator 1 view .LVU186
 997 033c A814      		cp r10,r8
 998 033e B904      		cpc r11,r9
 999 0340 04F0      		brlt .L44
 174:glcd/graphics.c **** 		/* Left and right sides */
 175:glcd/graphics.c **** 		for (t=0; t<(tx); t++) {
 176:glcd/graphics.c **** 			glcd_set_pixel(x+t, i, color);
 177:glcd/graphics.c **** 			glcd_set_pixel(x+w-1-t, i, color);
 178:glcd/graphics.c **** 		}
 179:glcd/graphics.c **** 	} 
 180:glcd/graphics.c **** 	glcd_update_bbox(x, y, x+w-1, y+h-1);
 1000               		.loc 1 180 2 is_stmt 1 view .LVU187
 1001 0342 2FEF      		ldi r18,lo8(-1)
 1002 0344 2D0F      		add r18,r29
 1003 0346 2F0D      		add r18,r15
 1004 0348 4C2F      		mov r20,r28
 1005 034a 410F      		add r20,r17
 1006 034c 6F2D      		mov r22,r15
 1007 034e 812F      		mov r24,r17
 1008               	/* epilogue start */
 181:glcd/graphics.c **** }
 1009               		.loc 1 181 1 is_stmt 0 view .LVU188
 1010 0350 DF91      		pop r29
 1011               	.LVL94:
 1012               		.loc 1 181 1 view .LVU189
 1013 0352 CF91      		pop r28
 1014               	.LVL95:
 1015               		.loc 1 181 1 view .LVU190
 1016 0354 1F91      		pop r17
 1017               	.LVL96:
 1018               		.loc 1 181 1 view .LVU191
 1019 0356 0F91      		pop r16
 1020 0358 FF90      		pop r15
 1021               	.LVL97:
 1022               		.loc 1 181 1 view .LVU192
 1023 035a EF90      		pop r14
 1024 035c DF90      		pop r13
 1025 035e CF90      		pop r12
 1026               	.LVL98:
 1027               		.loc 1 181 1 view .LVU193
 1028 0360 BF90      		pop r11
 1029 0362 AF90      		pop r10
 1030               	.LVL99:
 1031               		.loc 1 181 1 view .LVU194
 1032 0364 9F90      		pop r9
 1033 0366 8F90      		pop r8
 1034 0368 7F90      		pop r7
 1035 036a 6F90      		pop r6
 180:glcd/graphics.c **** }
 1036               		.loc 1 180 2 view .LVU195
 1037 036c 0C94 0000 		jmp glcd_update_bbox
 1038               	.LVL100:
 1039               	.L41:
 180:glcd/graphics.c **** }
 1040               		.loc 1 180 2 view .LVU196
 1041 0370 762C      		mov r7,r6
 1042 0372 7F0C      		add r7,r15
 166:glcd/graphics.c **** 		/* Top and bottom sides */
 1043               		.loc 1 166 2 view .LVU197
 1044 0374 DF2C      		mov r13,r15
 1045               	.L40:
 169:glcd/graphics.c **** 			glcd_set_pixel(i, y+h-1-t, color);
 1046               		.loc 1 169 4 is_stmt 1 discriminator 3 view .LVU198
 1047 0376 4C2D      		mov r20,r12
 1048 0378 6D2D      		mov r22,r13
 1049 037a 8A2D      		mov r24,r10
 1050 037c 0E94 0000 		call glcd_set_pixel
 1051               	.LVL101:
 170:glcd/graphics.c **** 		}
 1052               		.loc 1 170 4 discriminator 3 view .LVU199
 1053 0380 4C2D      		mov r20,r12
 1054 0382 672D      		mov r22,r7
 1055 0384 8A2D      		mov r24,r10
 1056 0386 0E94 0000 		call glcd_set_pixel
 1057               	.LVL102:
 170:glcd/graphics.c **** 		}
 1058               		.loc 1 170 4 is_stmt 0 discriminator 3 view .LVU200
 1059 038a D394      		inc r13
 1060 038c 7A94      		dec r7
 168:glcd/graphics.c **** 			glcd_set_pixel(i, y+t, color);
 1061               		.loc 1 168 3 discriminator 3 view .LVU201
 1062 038e DE10      		cpse r13,r14
 1063 0390 00C0      		rjmp .L40
 166:glcd/graphics.c **** 		/* Top and bottom sides */
 1064               		.loc 1 166 20 discriminator 2 view .LVU202
 1065 0392 8FEF      		ldi r24,-1
 1066 0394 A81A      		sub r10,r24
 1067 0396 B80A      		sbc r11,r24
 1068               	.LVL103:
 166:glcd/graphics.c **** 		/* Top and bottom sides */
 1069               		.loc 1 166 20 discriminator 2 view .LVU203
 1070 0398 00C0      		rjmp .L39
 1071               	.LVL104:
 1072               	.L44:
 166:glcd/graphics.c **** 		/* Top and bottom sides */
 1073               		.loc 1 166 20 discriminator 2 view .LVU204
 1074 039a DC2E      		mov r13,r28
 1075 039c D10E      		add r13,r17
 173:glcd/graphics.c **** 		/* Left and right sides */
 1076               		.loc 1 173 2 view .LVU205
 1077 039e E12E      		mov r14,r17
 1078               	.L43:
 176:glcd/graphics.c **** 			glcd_set_pixel(x+w-1-t, i, color);
 1079               		.loc 1 176 4 is_stmt 1 discriminator 3 view .LVU206
 1080 03a0 4C2D      		mov r20,r12
 1081 03a2 6A2D      		mov r22,r10
 1082 03a4 8E2D      		mov r24,r14
 1083 03a6 0E94 0000 		call glcd_set_pixel
 1084               	.LVL105:
 177:glcd/graphics.c **** 		}
 1085               		.loc 1 177 4 discriminator 3 view .LVU207
 1086 03aa 4C2D      		mov r20,r12
 1087 03ac 6A2D      		mov r22,r10
 1088 03ae 8D2D      		mov r24,r13
 1089 03b0 0E94 0000 		call glcd_set_pixel
 1090               	.LVL106:
 177:glcd/graphics.c **** 		}
 1091               		.loc 1 177 4 is_stmt 0 discriminator 3 view .LVU208
 1092 03b4 E394      		inc r14
 1093 03b6 DA94      		dec r13
 175:glcd/graphics.c **** 			glcd_set_pixel(x+t, i, color);
 1094               		.loc 1 175 3 discriminator 3 view .LVU209
 1095 03b8 0E11      		cpse r16,r14
 1096 03ba 00C0      		rjmp .L43
 173:glcd/graphics.c **** 		/* Left and right sides */
 1097               		.loc 1 173 20 discriminator 2 view .LVU210
 1098 03bc 8FEF      		ldi r24,-1
 1099 03be A81A      		sub r10,r24
 1100 03c0 B80A      		sbc r11,r24
 1101               	.LVL107:
 173:glcd/graphics.c **** 		/* Left and right sides */
 1102               		.loc 1 173 20 discriminator 2 view .LVU211
 1103 03c2 00C0      		rjmp .L42
 1104               		.cfi_endproc
 1105               	.LFE18:
 1107               	.global	glcd_draw_rect_shadow
 1109               	glcd_draw_rect_shadow:
 1110               	.LVL108:
 1111               	.LFB19:
 182:glcd/graphics.c **** 
 183:glcd/graphics.c **** void glcd_draw_rect_shadow(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
 184:glcd/graphics.c **** {
 1112               		.loc 1 184 1 is_stmt 1 view -0
 1113               		.cfi_startproc
 1114               		.loc 1 184 1 is_stmt 0 view .LVU213
 1115 03c4 EF92      		push r14
 1116               	.LCFI54:
 1117               		.cfi_def_cfa_offset 3
 1118               		.cfi_offset 14, -2
 1119 03c6 FF92      		push r15
 1120               	.LCFI55:
 1121               		.cfi_def_cfa_offset 4
 1122               		.cfi_offset 15, -3
 1123 03c8 0F93      		push r16
 1124               	.LCFI56:
 1125               		.cfi_def_cfa_offset 5
 1126               		.cfi_offset 16, -4
 1127 03ca 1F93      		push r17
 1128               	.LCFI57:
 1129               		.cfi_def_cfa_offset 6
 1130               		.cfi_offset 17, -5
 1131 03cc CF93      		push r28
 1132               	.LCFI58:
 1133               		.cfi_def_cfa_offset 7
 1134               		.cfi_offset 28, -6
 1135 03ce DF93      		push r29
 1136               	.LCFI59:
 1137               		.cfi_def_cfa_offset 8
 1138               		.cfi_offset 29, -7
 1139               	/* prologue: function */
 1140               	/* frame size = 0 */
 1141               	/* stack size = 6 */
 1142               	.L__stack_usage = 6
 1143 03d0 E82E      		mov r14,r24
 1144 03d2 162F      		mov r17,r22
 1145 03d4 C42F      		mov r28,r20
 1146 03d6 D22F      		mov r29,r18
 185:glcd/graphics.c **** 	glcd_draw_rect(x, y, w, h, color);
 1147               		.loc 1 185 2 is_stmt 1 view .LVU214
 1148 03d8 0E94 0000 		call glcd_draw_rect
 1149               	.LVL109:
 186:glcd/graphics.c **** 	glcd_draw_line(x+1, y+h, x+w, y+h, color);
 1150               		.loc 1 186 2 view .LVU215
 1151 03dc D10F      		add r29,r17
 1152               	.LVL110:
 1153               		.loc 1 186 2 is_stmt 0 view .LVU216
 1154 03de CE0D      		add r28,r14
 1155               	.LVL111:
 1156               		.loc 1 186 2 view .LVU217
 1157 03e0 2D2F      		mov r18,r29
 1158 03e2 4C2F      		mov r20,r28
 1159 03e4 6D2F      		mov r22,r29
 1160 03e6 81E0      		ldi r24,lo8(1)
 1161 03e8 8E0D      		add r24,r14
 1162 03ea 0E94 0000 		call glcd_draw_line
 1163               	.LVL112:
 187:glcd/graphics.c **** 	glcd_draw_line(x+w, y+1, x+w, y+h, color);
 1164               		.loc 1 187 2 is_stmt 1 view .LVU218
 1165 03ee 61E0      		ldi r22,lo8(1)
 1166 03f0 610F      		add r22,r17
 1167 03f2 2D2F      		mov r18,r29
 1168 03f4 4C2F      		mov r20,r28
 1169 03f6 8C2F      		mov r24,r28
 1170 03f8 0E94 0000 		call glcd_draw_line
 1171               	.LVL113:
 1172               	/* epilogue start */
 188:glcd/graphics.c **** }
 1173               		.loc 1 188 1 is_stmt 0 view .LVU219
 1174 03fc DF91      		pop r29
 1175 03fe CF91      		pop r28
 1176 0400 1F91      		pop r17
 1177               	.LVL114:
 1178               		.loc 1 188 1 view .LVU220
 1179 0402 0F91      		pop r16
 1180               	.LVL115:
 1181               		.loc 1 188 1 view .LVU221
 1182 0404 FF90      		pop r15
 1183 0406 EF90      		pop r14
 1184               	.LVL116:
 1185               		.loc 1 188 1 view .LVU222
 1186 0408 0895      		ret
 1187               		.cfi_endproc
 1188               	.LFE19:
 1190               	.global	glcd_draw_circle
 1192               	glcd_draw_circle:
 1193               	.LVL117:
 1194               	.LFB20:
 189:glcd/graphics.c **** 
 190:glcd/graphics.c **** void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
 191:glcd/graphics.c **** {
 1195               		.loc 1 191 1 is_stmt 1 view -0
 1196               		.cfi_startproc
 1197               		.loc 1 191 1 is_stmt 0 view .LVU224
 1198 040a AF92      		push r10
 1199               	.LCFI60:
 1200               		.cfi_def_cfa_offset 3
 1201               		.cfi_offset 10, -2
 1202 040c BF92      		push r11
 1203               	.LCFI61:
 1204               		.cfi_def_cfa_offset 4
 1205               		.cfi_offset 11, -3
 1206 040e CF92      		push r12
 1207               	.LCFI62:
 1208               		.cfi_def_cfa_offset 5
 1209               		.cfi_offset 12, -4
 1210 0410 DF92      		push r13
 1211               	.LCFI63:
 1212               		.cfi_def_cfa_offset 6
 1213               		.cfi_offset 13, -5
 1214 0412 EF92      		push r14
 1215               	.LCFI64:
 1216               		.cfi_def_cfa_offset 7
 1217               		.cfi_offset 14, -6
 1218 0414 FF92      		push r15
 1219               	.LCFI65:
 1220               		.cfi_def_cfa_offset 8
 1221               		.cfi_offset 15, -7
 1222 0416 0F93      		push r16
 1223               	.LCFI66:
 1224               		.cfi_def_cfa_offset 9
 1225               		.cfi_offset 16, -8
 1226 0418 1F93      		push r17
 1227               	.LCFI67:
 1228               		.cfi_def_cfa_offset 10
 1229               		.cfi_offset 17, -9
 1230 041a CF93      		push r28
 1231               	.LCFI68:
 1232               		.cfi_def_cfa_offset 11
 1233               		.cfi_offset 28, -10
 1234 041c DF93      		push r29
 1235               	.LCFI69:
 1236               		.cfi_def_cfa_offset 12
 1237               		.cfi_offset 29, -11
 1238               	/* prologue: function */
 1239               	/* frame size = 0 */
 1240               	/* stack size = 10 */
 1241               	.L__stack_usage = 10
 1242 041e E82E      		mov r14,r24
 1243 0420 D62E      		mov r13,r22
 1244 0422 F22E      		mov r15,r18
 192:glcd/graphics.c **** 		
 193:glcd/graphics.c **** 	int8_t f = 1 - r;
 1245               		.loc 1 193 2 is_stmt 1 view .LVU225
 1246               		.loc 1 193 15 is_stmt 0 view .LVU226
 1247 0424 81E0      		ldi r24,lo8(1)
 1248               	.LVL118:
 1249               		.loc 1 193 15 view .LVU227
 1250 0426 C82E      		mov r12,r24
 1251 0428 C41A      		sub r12,r20
 1252               	.LVL119:
 194:glcd/graphics.c **** 	int8_t ddF_x = 1;
 1253               		.loc 1 194 2 is_stmt 1 view .LVU228
 195:glcd/graphics.c **** 	int8_t ddF_y = -2 * r;
 1254               		.loc 1 195 2 view .LVU229
 1255               		.loc 1 195 9 is_stmt 0 view .LVU230
 1256 042a B42E      		mov r11,r20
 1257 042c B194      		neg r11
 1258 042e BB0C      		lsl r11
 1259               	.LVL120:
 196:glcd/graphics.c **** 	int8_t x = 0;
 1260               		.loc 1 196 2 is_stmt 1 view .LVU231
 197:glcd/graphics.c **** 	int8_t y = r;
 1261               		.loc 1 197 2 view .LVU232
 1262               		.loc 1 197 9 is_stmt 0 view .LVU233
 1263 0430 C42F      		mov r28,r20
 1264               	.LVL121:
 198:glcd/graphics.c **** 	
 199:glcd/graphics.c **** 	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
 1265               		.loc 1 199 2 is_stmt 1 view .LVU234
 1266 0432 A42E      		mov r10,r20
 1267 0434 A60E      		add r10,r22
 1268 0436 142F      		mov r17,r20
 1269 0438 1E0D      		add r17,r14
 1270 043a 062F      		mov r16,r22
 1271 043c 041B      		sub r16,r20
 1272 043e DE2D      		mov r29,r14
 1273 0440 D41B      		sub r29,r20
 1274 0442 2A2D      		mov r18,r10
 1275               	.LVL122:
 1276               		.loc 1 199 2 is_stmt 0 view .LVU235
 1277 0444 412F      		mov r20,r17
 1278               	.LVL123:
 1279               		.loc 1 199 2 view .LVU236
 1280 0446 602F      		mov r22,r16
 1281               	.LVL124:
 1282               		.loc 1 199 2 view .LVU237
 1283 0448 8D2F      		mov r24,r29
 1284 044a 0E94 0000 		call glcd_update_bbox
 1285               	.LVL125:
 200:glcd/graphics.c **** 	
 201:glcd/graphics.c **** 	glcd_set_pixel(x0, y0+r, color);
 1286               		.loc 1 201 2 is_stmt 1 view .LVU238
 1287 044e 4F2D      		mov r20,r15
 1288 0450 6A2D      		mov r22,r10
 1289 0452 8E2D      		mov r24,r14
 1290 0454 0E94 0000 		call glcd_set_pixel
 1291               	.LVL126:
 202:glcd/graphics.c **** 	glcd_set_pixel(x0, y0-r, color);
 1292               		.loc 1 202 2 view .LVU239
 1293 0458 4F2D      		mov r20,r15
 1294 045a 602F      		mov r22,r16
 1295 045c 8E2D      		mov r24,r14
 1296 045e 0E94 0000 		call glcd_set_pixel
 1297               	.LVL127:
 203:glcd/graphics.c **** 	glcd_set_pixel(x0+r, y0, color);
 1298               		.loc 1 203 2 view .LVU240
 1299 0462 4F2D      		mov r20,r15
 1300 0464 6D2D      		mov r22,r13
 1301 0466 812F      		mov r24,r17
 1302 0468 0E94 0000 		call glcd_set_pixel
 1303               	.LVL128:
 204:glcd/graphics.c **** 	glcd_set_pixel(x0-r, y0, color);
 1304               		.loc 1 204 2 view .LVU241
 1305 046c 4F2D      		mov r20,r15
 1306 046e 6D2D      		mov r22,r13
 1307 0470 8D2F      		mov r24,r29
 1308 0472 0E94 0000 		call glcd_set_pixel
 1309               	.LVL129:
 205:glcd/graphics.c **** 	
 206:glcd/graphics.c **** 	while (x<y) {
 1310               		.loc 1 206 2 view .LVU242
 196:glcd/graphics.c **** 	int8_t y = r;
 1311               		.loc 1 196 9 is_stmt 0 view .LVU243
 1312 0476 D0E0      		ldi r29,0
 1313               	.LVL130:
 1314               	.L49:
 1315               		.loc 1 206 8 view .LVU244
 1316 0478 DC17      		cp r29,r28
 1317 047a 04F0      		brlt .L51
 1318               	/* epilogue start */
 207:glcd/graphics.c **** 		if (f >= 0) {
 208:glcd/graphics.c **** 			y--;
 209:glcd/graphics.c **** 			ddF_y += 2;
 210:glcd/graphics.c **** 			f += ddF_y;
 211:glcd/graphics.c **** 		}
 212:glcd/graphics.c **** 		x++;
 213:glcd/graphics.c **** 		ddF_x += 2;
 214:glcd/graphics.c **** 		f += ddF_x;
 215:glcd/graphics.c **** 		
 216:glcd/graphics.c **** 		glcd_set_pixel(x0 + x, y0 + y, color);
 217:glcd/graphics.c **** 		glcd_set_pixel(x0 - x, y0 + y, color);
 218:glcd/graphics.c **** 		glcd_set_pixel(x0 + x, y0 - y, color);
 219:glcd/graphics.c **** 		glcd_set_pixel(x0 - x, y0 - y, color);
 220:glcd/graphics.c **** 		
 221:glcd/graphics.c **** 		glcd_set_pixel(x0 + y, y0 + x, color);
 222:glcd/graphics.c **** 		glcd_set_pixel(x0 - y, y0 + x, color);
 223:glcd/graphics.c **** 		glcd_set_pixel(x0 + y, y0 - x, color);
 224:glcd/graphics.c **** 		glcd_set_pixel(x0 - y, y0 - x, color);
 225:glcd/graphics.c **** 		
 226:glcd/graphics.c **** 	}
 227:glcd/graphics.c **** }
 1319               		.loc 1 227 1 view .LVU245
 1320 047c DF91      		pop r29
 1321               	.LVL131:
 1322               		.loc 1 227 1 view .LVU246
 1323 047e CF91      		pop r28
 1324               	.LVL132:
 1325               		.loc 1 227 1 view .LVU247
 1326 0480 1F91      		pop r17
 1327 0482 0F91      		pop r16
 1328 0484 FF90      		pop r15
 1329               	.LVL133:
 1330               		.loc 1 227 1 view .LVU248
 1331 0486 EF90      		pop r14
 1332               	.LVL134:
 1333               		.loc 1 227 1 view .LVU249
 1334 0488 DF90      		pop r13
 1335               	.LVL135:
 1336               		.loc 1 227 1 view .LVU250
 1337 048a CF90      		pop r12
 1338               	.LVL136:
 1339               		.loc 1 227 1 view .LVU251
 1340 048c BF90      		pop r11
 1341               	.LVL137:
 1342               		.loc 1 227 1 view .LVU252
 1343 048e AF90      		pop r10
 1344 0490 0895      		ret
 1345               	.LVL138:
 1346               	.L51:
 207:glcd/graphics.c **** 		if (f >= 0) {
 1347               		.loc 1 207 3 is_stmt 1 view .LVU253
 207:glcd/graphics.c **** 		if (f >= 0) {
 1348               		.loc 1 207 6 is_stmt 0 view .LVU254
 1349 0492 C7FC      		sbrc r12,7
 1350 0494 00C0      		rjmp .L50
 208:glcd/graphics.c **** 			ddF_y += 2;
 1351               		.loc 1 208 4 is_stmt 1 view .LVU255
 208:glcd/graphics.c **** 			ddF_y += 2;
 1352               		.loc 1 208 5 is_stmt 0 view .LVU256
 1353 0496 C150      		subi r28,lo8(-(-1))
 1354               	.LVL139:
 209:glcd/graphics.c **** 			f += ddF_y;
 1355               		.loc 1 209 4 is_stmt 1 view .LVU257
 209:glcd/graphics.c **** 			f += ddF_y;
 1356               		.loc 1 209 10 is_stmt 0 view .LVU258
 1357 0498 B394      		inc r11
 1358 049a B394      		inc r11
 1359               	.LVL140:
 210:glcd/graphics.c **** 		}
 1360               		.loc 1 210 4 is_stmt 1 view .LVU259
 210:glcd/graphics.c **** 		}
 1361               		.loc 1 210 6 is_stmt 0 view .LVU260
 1362 049c CB0C      		add r12,r11
 1363               	.LVL141:
 1364               	.L50:
 212:glcd/graphics.c **** 		ddF_x += 2;
 1365               		.loc 1 212 3 is_stmt 1 view .LVU261
 1366 049e DF5F      		subi r29,lo8(-(1))
 1367               	.LVL142:
 213:glcd/graphics.c **** 		f += ddF_x;
 1368               		.loc 1 213 3 view .LVU262
 214:glcd/graphics.c **** 		
 1369               		.loc 1 214 3 view .LVU263
 213:glcd/graphics.c **** 		f += ddF_x;
 1370               		.loc 1 213 9 is_stmt 0 view .LVU264
 1371 04a0 8D2F      		mov r24,r29
 1372 04a2 880F      		lsl r24
 1373 04a4 8F5F      		subi r24,lo8(-(1))
 1374               	.LVL143:
 214:glcd/graphics.c **** 		
 1375               		.loc 1 214 5 view .LVU265
 1376 04a6 C80E      		add r12,r24
 1377               	.LVL144:
 216:glcd/graphics.c **** 		glcd_set_pixel(x0 - x, y0 + y, color);
 1378               		.loc 1 216 3 is_stmt 1 view .LVU266
 1379 04a8 AE2C      		mov r10,r14
 1380 04aa AD0E      		add r10,r29
 1381 04ac 4F2D      		mov r20,r15
 1382 04ae 1C2F      		mov r17,r28
 1383 04b0 1D0D      		add r17,r13
 1384 04b2 612F      		mov r22,r17
 1385 04b4 8A2D      		mov r24,r10
 1386               	.LVL145:
 216:glcd/graphics.c **** 		glcd_set_pixel(x0 - x, y0 + y, color);
 1387               		.loc 1 216 3 is_stmt 0 view .LVU267
 1388 04b6 0E94 0000 		call glcd_set_pixel
 1389               	.LVL146:
 217:glcd/graphics.c **** 		glcd_set_pixel(x0 + x, y0 - y, color);
 1390               		.loc 1 217 3 is_stmt 1 view .LVU268
 1391 04ba 0E2D      		mov r16,r14
 1392 04bc 0D1B      		sub r16,r29
 1393 04be 4F2D      		mov r20,r15
 1394 04c0 612F      		mov r22,r17
 1395 04c2 802F      		mov r24,r16
 1396 04c4 0E94 0000 		call glcd_set_pixel
 1397               	.LVL147:
 218:glcd/graphics.c **** 		glcd_set_pixel(x0 - x, y0 - y, color);
 1398               		.loc 1 218 3 view .LVU269
 1399 04c8 4F2D      		mov r20,r15
 1400 04ca 1D2D      		mov r17,r13
 1401 04cc 1C1B      		sub r17,r28
 1402 04ce 612F      		mov r22,r17
 1403 04d0 8A2D      		mov r24,r10
 1404 04d2 0E94 0000 		call glcd_set_pixel
 1405               	.LVL148:
 219:glcd/graphics.c **** 		
 1406               		.loc 1 219 3 view .LVU270
 1407 04d6 4F2D      		mov r20,r15
 1408 04d8 612F      		mov r22,r17
 1409 04da 802F      		mov r24,r16
 1410 04dc 0E94 0000 		call glcd_set_pixel
 1411               	.LVL149:
 221:glcd/graphics.c **** 		glcd_set_pixel(x0 - y, y0 + x, color);
 1412               		.loc 1 221 3 view .LVU271
 1413 04e0 1D2D      		mov r17,r13
 1414 04e2 1D0F      		add r17,r29
 1415 04e4 4F2D      		mov r20,r15
 1416 04e6 612F      		mov r22,r17
 1417 04e8 0C2F      		mov r16,r28
 1418 04ea 0E0D      		add r16,r14
 1419 04ec 802F      		mov r24,r16
 1420 04ee 0E94 0000 		call glcd_set_pixel
 1421               	.LVL150:
 222:glcd/graphics.c **** 		glcd_set_pixel(x0 + y, y0 - x, color);
 1422               		.loc 1 222 3 view .LVU272
 1423 04f2 4F2D      		mov r20,r15
 1424 04f4 612F      		mov r22,r17
 1425 04f6 1E2D      		mov r17,r14
 1426 04f8 1C1B      		sub r17,r28
 1427 04fa 812F      		mov r24,r17
 1428 04fc 0E94 0000 		call glcd_set_pixel
 1429               	.LVL151:
 223:glcd/graphics.c **** 		glcd_set_pixel(x0 - y, y0 - x, color);
 1430               		.loc 1 223 3 view .LVU273
 1431 0500 AD2C      		mov r10,r13
 1432 0502 AD1A      		sub r10,r29
 1433 0504 4F2D      		mov r20,r15
 1434 0506 6A2D      		mov r22,r10
 1435 0508 802F      		mov r24,r16
 1436 050a 0E94 0000 		call glcd_set_pixel
 1437               	.LVL152:
 224:glcd/graphics.c **** 		
 1438               		.loc 1 224 3 view .LVU274
 1439 050e 4F2D      		mov r20,r15
 1440 0510 6A2D      		mov r22,r10
 1441 0512 812F      		mov r24,r17
 1442 0514 0E94 0000 		call glcd_set_pixel
 1443               	.LVL153:
 1444 0518 00C0      		rjmp .L49
 1445               		.cfi_endproc
 1446               	.LFE20:
 1448               	.global	glcd_fill_circle
 1450               	glcd_fill_circle:
 1451               	.LVL154:
 1452               	.LFB21:
 228:glcd/graphics.c **** 
 229:glcd/graphics.c **** void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
 230:glcd/graphics.c **** {
 1453               		.loc 1 230 1 view -0
 1454               		.cfi_startproc
 1455               		.loc 1 230 1 is_stmt 0 view .LVU276
 1456 051a 4F92      		push r4
 1457               	.LCFI70:
 1458               		.cfi_def_cfa_offset 3
 1459               		.cfi_offset 4, -2
 1460 051c 5F92      		push r5
 1461               	.LCFI71:
 1462               		.cfi_def_cfa_offset 4
 1463               		.cfi_offset 5, -3
 1464 051e 6F92      		push r6
 1465               	.LCFI72:
 1466               		.cfi_def_cfa_offset 5
 1467               		.cfi_offset 6, -4
 1468 0520 7F92      		push r7
 1469               	.LCFI73:
 1470               		.cfi_def_cfa_offset 6
 1471               		.cfi_offset 7, -5
 1472 0522 8F92      		push r8
 1473               	.LCFI74:
 1474               		.cfi_def_cfa_offset 7
 1475               		.cfi_offset 8, -6
 1476 0524 9F92      		push r9
 1477               	.LCFI75:
 1478               		.cfi_def_cfa_offset 8
 1479               		.cfi_offset 9, -7
 1480 0526 AF92      		push r10
 1481               	.LCFI76:
 1482               		.cfi_def_cfa_offset 9
 1483               		.cfi_offset 10, -8
 1484 0528 BF92      		push r11
 1485               	.LCFI77:
 1486               		.cfi_def_cfa_offset 10
 1487               		.cfi_offset 11, -9
 1488 052a CF92      		push r12
 1489               	.LCFI78:
 1490               		.cfi_def_cfa_offset 11
 1491               		.cfi_offset 12, -10
 1492 052c DF92      		push r13
 1493               	.LCFI79:
 1494               		.cfi_def_cfa_offset 12
 1495               		.cfi_offset 13, -11
 1496 052e EF92      		push r14
 1497               	.LCFI80:
 1498               		.cfi_def_cfa_offset 13
 1499               		.cfi_offset 14, -12
 1500 0530 FF92      		push r15
 1501               	.LCFI81:
 1502               		.cfi_def_cfa_offset 14
 1503               		.cfi_offset 15, -13
 1504 0532 0F93      		push r16
 1505               	.LCFI82:
 1506               		.cfi_def_cfa_offset 15
 1507               		.cfi_offset 16, -14
 1508 0534 1F93      		push r17
 1509               	.LCFI83:
 1510               		.cfi_def_cfa_offset 16
 1511               		.cfi_offset 17, -15
 1512 0536 CF93      		push r28
 1513               	.LCFI84:
 1514               		.cfi_def_cfa_offset 17
 1515               		.cfi_offset 28, -16
 1516 0538 DF93      		push r29
 1517               	.LCFI85:
 1518               		.cfi_def_cfa_offset 18
 1519               		.cfi_offset 29, -17
 1520               	/* prologue: function */
 1521               	/* frame size = 0 */
 1522               	/* stack size = 16 */
 1523               	.L__stack_usage = 16
 1524 053a F82E      		mov r15,r24
 1525 053c 062F      		mov r16,r22
 1526 053e 822E      		mov r8,r18
 231:glcd/graphics.c **** 	
 232:glcd/graphics.c **** 	int8_t f = 1 - r;
 1527               		.loc 1 232 2 is_stmt 1 view .LVU277
 1528               		.loc 1 232 15 is_stmt 0 view .LVU278
 1529 0540 D1E0      		ldi r29,lo8(1)
 1530 0542 D41B      		sub r29,r20
 1531               	.LVL155:
 233:glcd/graphics.c **** 	int8_t ddF_x = 1;
 1532               		.loc 1 233 2 is_stmt 1 view .LVU279
 234:glcd/graphics.c **** 	int8_t ddF_y = -2 * r;
 1533               		.loc 1 234 2 view .LVU280
 1534               		.loc 1 234 9 is_stmt 0 view .LVU281
 1535 0544 942E      		mov r9,r20
 1536 0546 9194      		neg r9
 1537 0548 990C      		lsl r9
 1538               	.LVL156:
 235:glcd/graphics.c **** 	int8_t x = 0;
 1539               		.loc 1 235 2 is_stmt 1 view .LVU282
 236:glcd/graphics.c **** 	int8_t y = r;
 1540               		.loc 1 236 2 view .LVU283
 1541               		.loc 1 236 9 is_stmt 0 view .LVU284
 1542 054a C42F      		mov r28,r20
 1543               	.LVL157:
 237:glcd/graphics.c **** 	
 238:glcd/graphics.c **** 	int16_t i;
 1544               		.loc 1 238 2 is_stmt 1 view .LVU285
 239:glcd/graphics.c **** 
 240:glcd/graphics.c **** 	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
 1545               		.loc 1 240 2 view .LVU286
 1546 054c 242F      		mov r18,r20
 1547               	.LVL158:
 1548               		.loc 1 240 2 is_stmt 0 view .LVU287
 1549 054e 260F      		add r18,r22
 1550 0550 480F      		add r20,r24
 1551               	.LVL159:
 1552               		.loc 1 240 2 view .LVU288
 1553 0552 6C1B      		sub r22,r28
 1554               	.LVL160:
 1555               		.loc 1 240 2 view .LVU289
 1556 0554 8C1B      		sub r24,r28
 1557               	.LVL161:
 1558               		.loc 1 240 2 view .LVU290
 1559 0556 0E94 0000 		call glcd_update_bbox
 1560               	.LVL162:
 241:glcd/graphics.c **** 	
 242:glcd/graphics.c **** 	for (i=y0-r; i<=y0+r; i++) {
 1561               		.loc 1 242 2 is_stmt 1 view .LVU291
 1562               		.loc 1 242 11 is_stmt 0 view .LVU292
 1563 055a 10E0      		ldi r17,0
 1564 055c CC2E      		mov r12,r28
 1565 055e D12C      		mov r13,__zero_reg__
 1566               		.loc 1 242 8 view .LVU293
 1567 0560 5801      		movw r10,r16
 1568 0562 AC18      		sub r10,r12
 1569 0564 BD08      		sbc r11,r13
 1570               	.LVL163:
 1571               		.loc 1 242 20 view .LVU294
 1572 0566 C00E      		add r12,r16
 1573 0568 D11E      		adc r13,r17
 1574               	.L53:
 1575               		.loc 1 242 2 discriminator 1 view .LVU295
 1576 056a CA14      		cp r12,r10
 1577 056c DB04      		cpc r13,r11
 1578 056e 04F4      		brge .L54
 1579               		.loc 1 242 2 discriminator 1 view .LVU296
 1580 0570 6624      		clr r6
 1581 0572 6394      		inc r6
 1582 0574 6F0C      		add r6,r15
 1583 0576 7724      		clr r7
 1584 0578 7A94      		dec r7
 1585 057a 7F0C      		add r7,r15
 235:glcd/graphics.c **** 	int8_t y = r;
 1586               		.loc 1 235 9 view .LVU297
 1587 057c E12C      		mov r14,__zero_reg__
 1588               	.LVL164:
 1589               	.L55:
 243:glcd/graphics.c **** 		glcd_set_pixel(x0, i, color);
 244:glcd/graphics.c **** 	}
 245:glcd/graphics.c **** 	
 246:glcd/graphics.c **** 	while (x < y) {
 1590               		.loc 1 246 8 view .LVU298
 1591 057e EC16      		cp r14,r28
 1592 0580 04F0      		brlt .L61
 1593               	/* epilogue start */
 247:glcd/graphics.c **** 		if (f >= 0) {
 248:glcd/graphics.c **** 			y--;
 249:glcd/graphics.c **** 			ddF_y += 2;
 250:glcd/graphics.c **** 			f += ddF_y;
 251:glcd/graphics.c **** 		}
 252:glcd/graphics.c **** 		x++;
 253:glcd/graphics.c **** 		ddF_x += 2;
 254:glcd/graphics.c **** 		f += ddF_x;
 255:glcd/graphics.c **** 		
 256:glcd/graphics.c **** 		for (i=y0-y; i<=y0+y; i++) {
 257:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 258:glcd/graphics.c **** 			glcd_set_pixel(x0-x, i, color);
 259:glcd/graphics.c **** 		} 
 260:glcd/graphics.c **** 		for (i=y0-x; i<=y0+x; i++) {
 261:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 262:glcd/graphics.c **** 			glcd_set_pixel(x0-y, i, color);
 263:glcd/graphics.c **** 		}    
 264:glcd/graphics.c **** 	}
 265:glcd/graphics.c **** }
 1594               		.loc 1 265 1 view .LVU299
 1595 0582 DF91      		pop r29
 1596               	.LVL165:
 1597               		.loc 1 265 1 view .LVU300
 1598 0584 CF91      		pop r28
 1599               	.LVL166:
 1600               		.loc 1 265 1 view .LVU301
 1601 0586 1F91      		pop r17
 1602 0588 0F91      		pop r16
 1603               	.LVL167:
 1604               		.loc 1 265 1 view .LVU302
 1605 058a FF90      		pop r15
 1606               	.LVL168:
 1607               		.loc 1 265 1 view .LVU303
 1608 058c EF90      		pop r14
 1609               	.LVL169:
 1610               		.loc 1 265 1 view .LVU304
 1611 058e DF90      		pop r13
 1612 0590 CF90      		pop r12
 1613 0592 BF90      		pop r11
 1614 0594 AF90      		pop r10
 1615 0596 9F90      		pop r9
 1616               	.LVL170:
 1617               		.loc 1 265 1 view .LVU305
 1618 0598 8F90      		pop r8
 1619               	.LVL171:
 1620               		.loc 1 265 1 view .LVU306
 1621 059a 7F90      		pop r7
 1622 059c 6F90      		pop r6
 1623 059e 5F90      		pop r5
 1624 05a0 4F90      		pop r4
 1625 05a2 0895      		ret
 1626               	.LVL172:
 1627               	.L54:
 243:glcd/graphics.c **** 		glcd_set_pixel(x0, i, color);
 1628               		.loc 1 243 3 is_stmt 1 discriminator 3 view .LVU307
 1629 05a4 482D      		mov r20,r8
 1630 05a6 6A2D      		mov r22,r10
 1631 05a8 8F2D      		mov r24,r15
 1632 05aa 0E94 0000 		call glcd_set_pixel
 1633               	.LVL173:
 242:glcd/graphics.c **** 		glcd_set_pixel(x0, i, color);
 1634               		.loc 1 242 25 is_stmt 0 discriminator 3 view .LVU308
 1635 05ae 8FEF      		ldi r24,-1
 1636 05b0 A81A      		sub r10,r24
 1637 05b2 B80A      		sbc r11,r24
 1638               	.LVL174:
 242:glcd/graphics.c **** 		glcd_set_pixel(x0, i, color);
 1639               		.loc 1 242 25 discriminator 3 view .LVU309
 1640 05b4 00C0      		rjmp .L53
 1641               	.LVL175:
 1642               	.L61:
 247:glcd/graphics.c **** 		if (f >= 0) {
 1643               		.loc 1 247 3 is_stmt 1 view .LVU310
 247:glcd/graphics.c **** 		if (f >= 0) {
 1644               		.loc 1 247 6 is_stmt 0 view .LVU311
 1645 05b6 D7FD      		sbrc r29,7
 1646 05b8 00C0      		rjmp .L56
 248:glcd/graphics.c **** 			ddF_y += 2;
 1647               		.loc 1 248 4 is_stmt 1 view .LVU312
 248:glcd/graphics.c **** 			ddF_y += 2;
 1648               		.loc 1 248 5 is_stmt 0 view .LVU313
 1649 05ba C150      		subi r28,lo8(-(-1))
 1650               	.LVL176:
 249:glcd/graphics.c **** 			f += ddF_y;
 1651               		.loc 1 249 4 is_stmt 1 view .LVU314
 249:glcd/graphics.c **** 			f += ddF_y;
 1652               		.loc 1 249 10 is_stmt 0 view .LVU315
 1653 05bc 9394      		inc r9
 1654 05be 9394      		inc r9
 1655               	.LVL177:
 250:glcd/graphics.c **** 		}
 1656               		.loc 1 250 4 is_stmt 1 view .LVU316
 250:glcd/graphics.c **** 		}
 1657               		.loc 1 250 6 is_stmt 0 view .LVU317
 1658 05c0 D90D      		add r29,r9
 1659               	.LVL178:
 1660               	.L56:
 252:glcd/graphics.c **** 		ddF_x += 2;
 1661               		.loc 1 252 3 is_stmt 1 view .LVU318
 1662 05c2 E394      		inc r14
 1663               	.LVL179:
 253:glcd/graphics.c **** 		f += ddF_x;
 1664               		.loc 1 253 3 view .LVU319
 254:glcd/graphics.c **** 		
 1665               		.loc 1 254 3 view .LVU320
 253:glcd/graphics.c **** 		f += ddF_x;
 1666               		.loc 1 253 9 is_stmt 0 view .LVU321
 1667 05c4 8E2D      		mov r24,r14
 1668 05c6 880F      		lsl r24
 1669 05c8 8F5F      		subi r24,lo8(-(1))
 1670               	.LVL180:
 254:glcd/graphics.c **** 		
 1671               		.loc 1 254 5 view .LVU322
 1672 05ca D80F      		add r29,r24
 1673               	.LVL181:
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1674               		.loc 1 256 3 is_stmt 1 view .LVU323
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1675               		.loc 1 256 12 is_stmt 0 view .LVU324
 1676 05cc AC2E      		mov r10,r28
 1677 05ce 0C2E      		mov __tmp_reg__,r28
 1678 05d0 000C      		lsl r0
 1679 05d2 BB08      		sbc r11,r11
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1680               		.loc 1 256 9 view .LVU325
 1681 05d4 6801      		movw r12,r16
 1682 05d6 CA18      		sub r12,r10
 1683 05d8 DB08      		sbc r13,r11
 1684               	.LVL182:
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1685               		.loc 1 256 21 view .LVU326
 1686 05da A00E      		add r10,r16
 1687 05dc B11E      		adc r11,r17
 1688               	.LVL183:
 1689               	.L57:
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1690               		.loc 1 256 3 discriminator 1 view .LVU327
 1691 05de AC14      		cp r10,r12
 1692 05e0 BD04      		cpc r11,r13
 1693 05e2 04F4      		brge .L58
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1694               		.loc 1 260 3 is_stmt 1 view .LVU328
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1695               		.loc 1 260 12 is_stmt 0 view .LVU329
 1696 05e4 AE2C      		mov r10,r14
 1697 05e6 0E2C      		mov __tmp_reg__,r14
 1698 05e8 000C      		lsl r0
 1699 05ea BB08      		sbc r11,r11
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1700               		.loc 1 260 9 view .LVU330
 1701 05ec 6801      		movw r12,r16
 1702               	.LVL184:
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1703               		.loc 1 260 9 view .LVU331
 1704 05ee CA18      		sub r12,r10
 1705 05f0 DB08      		sbc r13,r11
 1706               	.LVL185:
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1707               		.loc 1 260 21 view .LVU332
 1708 05f2 A00E      		add r10,r16
 1709 05f4 B11E      		adc r11,r17
 261:glcd/graphics.c **** 			glcd_set_pixel(x0-y, i, color);
 1710               		.loc 1 261 4 view .LVU333
 1711 05f6 5C2E      		mov r5,r28
 1712 05f8 5F0C      		add r5,r15
 262:glcd/graphics.c **** 		}    
 1713               		.loc 1 262 4 view .LVU334
 1714 05fa 4F2C      		mov r4,r15
 1715 05fc 4C1A      		sub r4,r28
 1716               	.L59:
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1717               		.loc 1 260 3 discriminator 1 view .LVU335
 1718 05fe AC14      		cp r10,r12
 1719 0600 BD04      		cpc r11,r13
 1720 0602 04F4      		brge .L60
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1721               		.loc 1 260 3 discriminator 1 view .LVU336
 1722 0604 6394      		inc r6
 1723 0606 7A94      		dec r7
 1724 0608 00C0      		rjmp .L55
 1725               	.L58:
 257:glcd/graphics.c **** 			glcd_set_pixel(x0-x, i, color);
 1726               		.loc 1 257 4 is_stmt 1 discriminator 3 view .LVU337
 1727 060a 482D      		mov r20,r8
 1728 060c 6C2D      		mov r22,r12
 1729 060e 862D      		mov r24,r6
 1730 0610 0E94 0000 		call glcd_set_pixel
 1731               	.LVL186:
 258:glcd/graphics.c **** 		} 
 1732               		.loc 1 258 4 discriminator 3 view .LVU338
 1733 0614 482D      		mov r20,r8
 1734 0616 6C2D      		mov r22,r12
 1735 0618 872D      		mov r24,r7
 1736 061a 0E94 0000 		call glcd_set_pixel
 1737               	.LVL187:
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1738               		.loc 1 256 26 is_stmt 0 discriminator 3 view .LVU339
 1739 061e 8FEF      		ldi r24,-1
 1740 0620 C81A      		sub r12,r24
 1741 0622 D80A      		sbc r13,r24
 1742               	.LVL188:
 256:glcd/graphics.c **** 			glcd_set_pixel(x0+x, i, color);
 1743               		.loc 1 256 26 discriminator 3 view .LVU340
 1744 0624 00C0      		rjmp .L57
 1745               	.L60:
 261:glcd/graphics.c **** 			glcd_set_pixel(x0-y, i, color);
 1746               		.loc 1 261 4 is_stmt 1 discriminator 3 view .LVU341
 1747 0626 482D      		mov r20,r8
 1748 0628 6C2D      		mov r22,r12
 1749 062a 852D      		mov r24,r5
 1750 062c 0E94 0000 		call glcd_set_pixel
 1751               	.LVL189:
 262:glcd/graphics.c **** 		}    
 1752               		.loc 1 262 4 discriminator 3 view .LVU342
 1753 0630 482D      		mov r20,r8
 1754 0632 6C2D      		mov r22,r12
 1755 0634 842D      		mov r24,r4
 1756 0636 0E94 0000 		call glcd_set_pixel
 1757               	.LVL190:
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1758               		.loc 1 260 26 is_stmt 0 discriminator 3 view .LVU343
 1759 063a 8FEF      		ldi r24,-1
 1760 063c C81A      		sub r12,r24
 1761 063e D80A      		sbc r13,r24
 1762               	.LVL191:
 260:glcd/graphics.c **** 			glcd_set_pixel(x0+y, i, color);
 1763               		.loc 1 260 26 discriminator 3 view .LVU344
 1764 0640 00C0      		rjmp .L59
 1765               		.cfi_endproc
 1766               	.LFE21:
 1768               	.global	glcd_invert_area
 1770               	glcd_invert_area:
 1771               	.LVL192:
 1772               	.LFB22:
 266:glcd/graphics.c **** 
 267:glcd/graphics.c **** void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
 268:glcd/graphics.c **** {
 1773               		.loc 1 268 1 is_stmt 1 view -0
 1774               		.cfi_startproc
 1775               		.loc 1 268 1 is_stmt 0 view .LVU346
 1776 0642 CF92      		push r12
 1777               	.LCFI86:
 1778               		.cfi_def_cfa_offset 3
 1779               		.cfi_offset 12, -2
 1780 0644 DF92      		push r13
 1781               	.LCFI87:
 1782               		.cfi_def_cfa_offset 4
 1783               		.cfi_offset 13, -3
 1784 0646 EF92      		push r14
 1785               	.LCFI88:
 1786               		.cfi_def_cfa_offset 5
 1787               		.cfi_offset 14, -4
 1788 0648 FF92      		push r15
 1789               	.LCFI89:
 1790               		.cfi_def_cfa_offset 6
 1791               		.cfi_offset 15, -5
 1792 064a 1F93      		push r17
 1793               	.LCFI90:
 1794               		.cfi_def_cfa_offset 7
 1795               		.cfi_offset 17, -6
 1796 064c CF93      		push r28
 1797               	.LCFI91:
 1798               		.cfi_def_cfa_offset 8
 1799               		.cfi_offset 28, -7
 1800 064e DF93      		push r29
 1801               	.LCFI92:
 1802               		.cfi_def_cfa_offset 9
 1803               		.cfi_offset 29, -8
 1804               	/* prologue: function */
 1805               	/* frame size = 0 */
 1806               	/* stack size = 7 */
 1807               	.L__stack_usage = 7
 1808 0650 162F      		mov r17,r22
 269:glcd/graphics.c **** 	uint8_t xx, yy;
 1809               		.loc 1 269 2 is_stmt 1 view .LVU347
 270:glcd/graphics.c **** 	for (xx = x; xx < (x+w); xx++) {
 1810               		.loc 1 270 2 view .LVU348
 1811               	.LVL193:
 1812               		.loc 1 270 10 is_stmt 0 view .LVU349
 1813 0652 C82F      		mov r28,r24
 1814               		.loc 1 270 22 view .LVU350
 1815 0654 840F      		add r24,r20
 1816 0656 9927      		clr r25
 1817 0658 991F      		rol r25
 1818               	.LVL194:
 1819               		.loc 1 270 22 view .LVU351
 1820 065a 7C01      		movw r14,r24
 271:glcd/graphics.c **** 		/* Loop through each partial column */
 272:glcd/graphics.c **** 		for (yy = y; yy < (y+h); yy++) {
 1821               		.loc 1 272 23 view .LVU352
 1822 065c 862F      		mov r24,r22
 1823 065e 820F      		add r24,r18
 1824 0660 9927      		clr r25
 1825 0662 991F      		rol r25
 1826 0664 6C01      		movw r12,r24
 1827               	.LVL195:
 1828               	.L63:
 270:glcd/graphics.c **** 	for (xx = x; xx < (x+w); xx++) {
 1829               		.loc 1 270 2 discriminator 1 view .LVU353
 1830 0666 CE15      		cp r28,r14
 1831 0668 1F04      		cpc __zero_reg__,r15
 1832 066a 04F0      		brlt .L66
 1833               	/* epilogue start */
 273:glcd/graphics.c **** 			/* Go down and invert every pixel */
 274:glcd/graphics.c **** 			glcd_invert_pixel(xx,yy);
 275:glcd/graphics.c **** 		}
 276:glcd/graphics.c **** 	}
 277:glcd/graphics.c **** }
 1834               		.loc 1 277 1 view .LVU354
 1835 066c DF91      		pop r29
 1836 066e CF91      		pop r28
 1837               	.LVL196:
 1838               		.loc 1 277 1 view .LVU355
 1839 0670 1F91      		pop r17
 1840               	.LVL197:
 1841               		.loc 1 277 1 view .LVU356
 1842 0672 FF90      		pop r15
 1843 0674 EF90      		pop r14
 1844 0676 DF90      		pop r13
 1845 0678 CF90      		pop r12
 1846 067a 0895      		ret
 1847               	.LVL198:
 1848               	.L64:
 274:glcd/graphics.c **** 		}
 1849               		.loc 1 274 4 is_stmt 1 discriminator 3 view .LVU357
 1850 067c 6D2F      		mov r22,r29
 1851 067e 8C2F      		mov r24,r28
 1852 0680 0E94 0000 		call glcd_invert_pixel
 1853               	.LVL199:
 272:glcd/graphics.c **** 			/* Go down and invert every pixel */
 1854               		.loc 1 272 30 is_stmt 0 discriminator 3 view .LVU358
 1855 0684 DF5F      		subi r29,lo8(-(1))
 1856               	.LVL200:
 1857               	.L65:
 272:glcd/graphics.c **** 			/* Go down and invert every pixel */
 1858               		.loc 1 272 3 discriminator 1 view .LVU359
 1859 0686 DC15      		cp r29,r12
 1860 0688 1D04      		cpc __zero_reg__,r13
 1861 068a 04F0      		brlt .L64
 270:glcd/graphics.c **** 		/* Loop through each partial column */
 1862               		.loc 1 270 29 discriminator 2 view .LVU360
 1863 068c CF5F      		subi r28,lo8(-(1))
 1864               	.LVL201:
 270:glcd/graphics.c **** 		/* Loop through each partial column */
 1865               		.loc 1 270 29 discriminator 2 view .LVU361
 1866 068e 00C0      		rjmp .L63
 1867               	.LVL202:
 1868               	.L66:
 272:glcd/graphics.c **** 			/* Go down and invert every pixel */
 1869               		.loc 1 272 11 view .LVU362
 1870 0690 D12F      		mov r29,r17
 1871 0692 00C0      		rjmp .L65
 1872               		.cfi_endproc
 1873               	.LFE22:
 1875               	.global	glcd_draw_bitmap
 1877               	glcd_draw_bitmap:
 1878               	.LVL203:
 1879               	.LFB23:
 278:glcd/graphics.c **** 
 279:glcd/graphics.c **** void glcd_draw_bitmap(const unsigned char *data)
 280:glcd/graphics.c **** {
 1880               		.loc 1 280 1 is_stmt 1 view -0
 1881               		.cfi_startproc
 1882               	/* prologue: function */
 1883               	/* frame size = 0 */
 1884               	/* stack size = 0 */
 1885               	.L__stack_usage = 0
 281:glcd/graphics.c **** 
 282:glcd/graphics.c **** #if 0
 283:glcd/graphics.c **** 	/* Testing purposes only: Writing to the LCD right away (not for AVR) */
 284:glcd/graphics.c **** 	/* Normally, we do not do this, we just write to the screen buffer */
 285:glcd/graphics.c **** 	uint8_t *original_buffer;
 286:glcd/graphics.c **** 
 287:glcd/graphics.c **** 	/* Save the location of original screen buffer */
 288:glcd/graphics.c **** 	original_buffer = glcd_buffer_selected;
 289:glcd/graphics.c **** 	
 290:glcd/graphics.c **** 	/* Use bitmap location as screen buffer (this won't work when using AVR8 PGM_P) */
 291:glcd/graphics.c **** 	glcd_select_screen((uint8_t *)data, glcd_bbox_selected);
 292:glcd/graphics.c **** 	
 293:glcd/graphics.c **** 	/* Make sure we write the entre display */
 294:glcd/graphics.c **** 	glcd_bbox_refresh(); 
 295:glcd/graphics.c **** 	glcd_write();
 296:glcd/graphics.c **** 	
 297:glcd/graphics.c **** 	/* Restore the screen buffer back to original */
 298:glcd/graphics.c **** 	glcd_select_screen(original_buffer, glcd_bbox_selected);	
 299:glcd/graphics.c **** #endif
 300:glcd/graphics.c **** 	
 301:glcd/graphics.c **** 	/* Copy bitmap data to the screen buffer */
 302:glcd/graphics.c **** #if defined(GLCD_DEVICE_AVR8)
 303:glcd/graphics.c **** 	memcpy_P(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
 1886               		.loc 1 303 2 view .LVU364
 1887 0694 48EF      		ldi r20,lo8(-8)
 1888 0696 51E0      		ldi r21,lo8(1)
 1889 0698 BC01      		movw r22,r24
 1890 069a 8091 0000 		lds r24,glcd_buffer_selected
 1891 069e 9091 0000 		lds r25,glcd_buffer_selected+1
 1892               	.LVL204:
 1893               		.loc 1 303 2 is_stmt 0 view .LVU365
 1894 06a2 0E94 0000 		call memcpy_P
 1895               	.LVL205:
 304:glcd/graphics.c **** #else
 305:glcd/graphics.c **** 	memcpy(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
 306:glcd/graphics.c **** #endif
 307:glcd/graphics.c **** 
 308:glcd/graphics.c **** 	glcd_bbox_refresh(); 
 1896               		.loc 1 308 2 is_stmt 1 view .LVU366
 1897 06a6 0C94 0000 		jmp glcd_bbox_refresh
 1898               	.LVL206:
 1899               		.cfi_endproc
 1900               	.LFE23:
 1902               	.Letext0:
 1903               		.file 2 "/usr/avr/include/stdint.h"
 1904               		.file 3 "/usr/lib/gcc/avr/8.2.0/include/stddef.h"
 1905               		.file 4 "/usr/avr/include/stdio.h"
 1906               		.file 5 "/usr/avr/include/stdlib.h"
 1907               		.file 6 "glcd/glcd.h"
 1908               		.file 7 "glcd/unit_tests.h"
 1909               		.file 8 "/usr/avr/include/avr/pgmspace.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 graphics.c
     /tmp/ccScTCy9.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccScTCy9.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccScTCy9.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccScTCy9.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccScTCy9.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccScTCy9.s:12     .text:0000000000000000 glcd_set_pixel
     /tmp/ccScTCy9.s:92     .text:000000000000004c glcd_get_pixel
     /tmp/ccScTCy9.s:156    .text:0000000000000086 glcd_invert_pixel
     /tmp/ccScTCy9.s:239    .text:00000000000000d2 glcd_draw_line
     /tmp/ccScTCy9.s:514    .text:00000000000001ac glcd_fill_rect
     /tmp/ccScTCy9.s:695    .text:0000000000000240 glcd_draw_rect
     /tmp/ccScTCy9.s:872    .text:00000000000002e4 glcd_draw_rect_thick
     /tmp/ccScTCy9.s:1109   .text:00000000000003c4 glcd_draw_rect_shadow
     /tmp/ccScTCy9.s:1192   .text:000000000000040a glcd_draw_circle
     /tmp/ccScTCy9.s:1450   .text:000000000000051a glcd_fill_circle
     /tmp/ccScTCy9.s:1770   .text:0000000000000642 glcd_invert_area
     /tmp/ccScTCy9.s:1877   .text:0000000000000694 glcd_draw_bitmap

UNDEFINED SYMBOLS
glcd_buffer
glcd_update_bbox
glcd_buffer_selected
memcpy_P
glcd_bbox_refresh


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00003504  00003598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000234  00800166  00800166  000035fe  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000035fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00003660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000592d  00000000  00000000  00003788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c9f  00000000  00000000  000090b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004713  00000000  00000000  0000ad54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af0  00000000  00000000  0000f468  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c3e  00000000  00000000  0000ff58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000440e  00000000  00000000  00010b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  00014fa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__ctors_end>
       4:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
       8:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
       c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      10:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      14:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      18:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      1c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      20:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      24:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      28:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      2c:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__vector_11>
      30:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      34:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      38:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      3c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      40:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      44:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      48:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      4c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      50:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      54:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      58:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      5c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      60:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>
      64:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__bad_interrupt>

00000068 <batman>:
	...
      70:	00 00 f0 00 00 00 00 00 00 00 f0 0c 00 00 00 80     ................
      80:	c0 c0 20 00 00 00 00 00 00 00 00 00 00 00 00 00     .. .............
	...
      c4:	80 80 03 07 0c 98 70 00 00 00 01 00 00 00 00 07     ......p.........
      d4:	8f 9d 18 10 30 20 20 20 20 60 60 40 c0 80 00 00     ....0    ``@....
	...
     114:	00 18 1e 11 01 01 01 81 c1 60 00 00 00 00 00 00     .........`......
     124:	00 00 00 00 03 03 00 00 00 80 80 c0 c0 c0 c0 e0     ................
     134:	70 3f 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     p?..............
	...
     16c:	00 06 07 01 01 00 08 08 0c 0c 0c 0c 0c 0c 1c f8     ................
     17c:	f0 00 00 1e ff df 07 03 01 01 00 00 00 00 00 00     ................
	...
     1c0:	00 80 e0 30 18 00 08 08 10 20 20 a0 e0 f0 7e e3     ...0.....  ...~.
     1d0:	e0 f8 c0 44 18 a1 ff 1e 00 00 00 00 00 00 00 00     ...D............
	...
     214:	00 07 0e 0c 0c 0c 06 06 03 13 3b 39 29 68 68 6f     ..........;9)hho
     224:	6d 60 67 67 67 67 67 65 35 39 39 13 06 00 00 00     m`ggggge599.....
	...

00000260 <Font5x7>:
     260:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     270:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     280:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     290:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     2a0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     2b0:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     2c0:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     2d0:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     2e0:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2f0:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     300:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     310:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     320:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     330:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     340:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     350:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     360:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     370:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     380:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     390:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     3a0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     3b0:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     3c0:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     3d0:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     3e0:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3f0:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     400:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     410:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     420:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     430:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000440 <font_Earthbound_12x19_48to57>:
     440:	00 e0 f0 38 0c 0c 0c 0c 38 f8 c0 00 00 1f 7f e0     ...8....8.......
     450:	80 80 80 80 e0 ff 1f 00 00 00 00 01 01 01 01 01     ................
     460:	00 00 00 00 00 10 18 18 fc fc 00 00 00 00 00 00     ................
     470:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
     480:	01 01 00 00 00 00 00 00 00 08 1c 0c 0c 0c 0c 8c     ................
     490:	f8 f0 00 00 00 f0 f8 9c 8c 86 86 83 83 80 00 00     ................
     4a0:	00 01 01 01 01 01 01 01 01 01 00 00 00 08 1c 0c     ................
     4b0:	0c 0c 0c 8c f8 f0 00 00 00 80 c0 80 81 83 83 c7     ................
     4c0:	ff 7c 00 00 00 00 01 01 01 01 01 01 00 00 00 00     .|..............
     4d0:	00 00 00 80 c0 70 38 fc fc 00 00 00 00 1c 1e 1b     .....p8.........
     4e0:	11 18 10 ff ff 10 18 00 00 00 00 00 00 00 00 01     ................
     4f0:	01 00 00 00 00 00 f4 fc 1c 0c 0c 0c 0c 00 00 00     ................
     500:	00 80 c3 83 83 83 83 c7 fe 78 00 00 00 00 00 01     .........x......
     510:	01 01 01 01 00 00 00 00 00 c0 f0 78 1c 0c 0c 0c     ...........x....
     520:	08 00 00 00 00 3f ff c3 83 83 83 c3 fe 7c 00 00     .....?.......|..
     530:	00 00 00 01 01 01 01 01 00 00 00 00 00 0c 0c 0c     ................
     540:	0c 8c cc 7c 3c 0c 00 00 00 00 80 f0 7c 0f 03 00     ...|<.......|...
     550:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
     560:	00 f0 f8 1c 0c 0c 0c 0c f8 f0 00 00 00 f8 ff 8f     ................
     570:	07 06 06 8f ff f8 00 00 00 00 01 03 03 03 03 01     ................
     580:	01 00 00 00 00 f0 f8 1c 0c 0c 0c 1c f8 e0 00 00     ................
     590:	00 01 87 8e 8c 8c 8c ee 7f 1f 00 00 00 00 01 01     ................
     5a0:	01 01 01 00 00 00 00 00                             ........

000005a8 <bmp_oslogo>:
	...
     5d8:	00 00 00 80 80 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     5e8:	e0 e0 e0 e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00     ................
	...
     650:	00 80 c0 e0 f0 f8 fc fc fe ff ff ff ff ff ff ff     ................
     660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     670:	ff ff ff ff ff fe fc fc f8 f0 e0 c0 80 00 00 00     ................
	...
     6cc:	00 80 f0 fc fe ff ff ff ff ff ff ff ff ff ff ff     ................
     6dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6fc:	ff fe fc f0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     74c:	fc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     75c:	ff ff ff 1f 07 03 01 01 00 00 00 00 00 00 00 01     ................
     76c:	03 07 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     77c:	ff ff ff ff ff fc 00 00 00 00 00 00 00 00 00 00     ................
	...
     7cc:	1f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7dc:	ff ff ff fc f0 e0 c0 80 80 00 00 00 00 00 80 c0     ................
     7ec:	c0 f0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7fc:	ff ff ff ff ff 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
	...
     84c:	00 01 07 1f 7f ff ff ff ff ff ff ff ff ff ff ff     ................
     85c:	ff ff ff ff ff ff 7f 0f 03 00 00 00 00 01 0f 3f     ...............?
     86c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     87c:	ff 7f 1f 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     8d0:	00 00 01 03 07 0f 1f 3f 3f 7f ff ff ff ff ff 7f     .......??.......
     8e0:	0f 03 00 00 00 00 00 00 00 00 00 00 01 0f 3f ff     ..............?.
     8f0:	ff ff ff ff 7f 7f 3f 1f 0f 07 03 01 00 00 00 00     ......?.........
	...
     95c:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     96c:	00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...

000009a8 <Liberation_Sans15x21_Numbers>:
     9a8:	06 00 00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f     ................
     9b8:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     9d4:	00 00 07 00 00 1e 00 e0 1f 00 ff 1f f8 ff 03 ff     ................
     9e4:	1f 00 ff 01 00 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
     a04:	0e 00 00 00 c0 7f 00 f8 ff 01 fc ff 07 fc ff 07     ................
     a14:	3e 80 0f 0e 00 0e 0e 00 0e 0e 00 0e 1e 80 0f fc     >...............
     a24:	ff 07 fc ff 07 f8 ff 01 c0 7f 00 00 00 00 0e 00     ................
     a34:	00 00 70 00 0e 38 00 0e 38 00 0e 1c 00 0e 0e 00     ..p..8..8.......
     a44:	0e fe ff 0f fe ff 0f fe ff 0f fe ff 0f 00 00 0e     ................
     a54:	00 00 0e 00 00 0e 00 00 0e 00 00 00 0e 00 00 00     ................
     a64:	60 00 0f 78 80 0f 7c c0 0f 7c e0 0f 1e f0 0f 0e     `..x..|..|......
     a74:	f8 0e 0e 7c 0e 0e 3e 0e 1e 1f 0e fe 0f 0e fc 07     ...|..>.........
     a84:	0e f8 03 0e f0 01 0e 00 00 00 0e 00 00 00 30 80     ..............0.
     a94:	01 38 80 03 3c 80 07 3c 80 0f 1e 00 0f 0e 0e 0e     .8..<..<........
     aa4:	0e 0e 0e 0e 0e 0e 1e 1f 0f fe ff 0f fc fb 07 fc     ................
     ab4:	f9 03 f0 e0 01 00 00 00 0f 00 00 00 00 f0 00 00     ................
     ac4:	f8 00 00 fe 00 80 ef 00 c0 e7 00 f0 e1 00 7c e0     ..............|.
     ad4:	00 3e e0 00 fe ff 0f fe ff 0f fe ff 0f fe ff 0f     .>..............
     ae4:	00 e0 00 00 e0 00 0e 00 00 00 00 80 01 f8 87 03     ................
     af4:	fe 87 07 fe 87 0f fe 07 0f 0e 03 0e 8e 03 0e 8e     ................
     b04:	03 0e 8e 07 0f 8e ff 07 0e ff 07 0e fe 03 00 fc     ................
     b14:	00 00 00 00 0e 00 00 00 c0 7f 00 f0 ff 01 f8 ff     ................
     b24:	07 fc ff 07 3e 0e 0f 0e 07 0e 0e 07 0e 0e 07 0e     ....>...........
     b34:	1e 0f 0f 3e ff 0f 3c fe 07 38 fe 03 30 f8 01 00     ...>..<..8..0...
     b44:	00 00 0e 00 00 00 0e 00 00 0e 00 00 0e 00 00 0e     ................
     b54:	00 0f 0e e0 0f 0e f8 0f 0e fe 0f 8e ff 00 ce 0f     ................
     b64:	00 fe 03 00 fe 00 00 3e 00 00 1e 00 00 00 00 00     .......>........
     b74:	0e 00 00 00 f0 e0 01 f8 fb 03 fc fb 07 fe ff 0f     ................
     b84:	1e 1f 0f 0e 0e 0e 0e 0e 0e 0e 0e 0e 1e 1f 0f fe     ................
     b94:	ff 0f fc fb 07 fc fb 03 f0 e0 01 00 00 00 0e 00     ................
     ba4:	00 00 f0 83 01 f8 87 03 fc 8f 07 fe 9f 0f 1e 1e     ................
     bb4:	0f 0e 1c 0e 0e 1c 0e 0e 1c 0e 1e 8e 0f fc ff 07     ................
     bc4:	fc ff 03 f8 ff 01 c0 7f 00 00 00 00                 ............

00000bd0 <Font5x7>:
     bd0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     be0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     bf0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     c00:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     c10:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     c20:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     c30:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     c40:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     c50:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     c60:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     c70:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     c80:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     c90:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     ca0:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     cb0:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     cc0:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     cd0:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     ce0:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     cf0:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     d00:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     d10:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     d20:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     d30:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     d40:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     d50:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     d60:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     d70:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     d80:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     d90:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     da0:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000db0 <__ctors_end>:
     db0:	11 24       	eor	r1, r1
     db2:	1f be       	out	0x3f, r1	; 63
     db4:	cf ef       	ldi	r28, 0xFF	; 255
     db6:	d8 e0       	ldi	r29, 0x08	; 8
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	cd bf       	out	0x3d, r28	; 61

00000dbc <__do_copy_data>:
     dbc:	11 e0       	ldi	r17, 0x01	; 1
     dbe:	a0 e0       	ldi	r26, 0x00	; 0
     dc0:	b1 e0       	ldi	r27, 0x01	; 1
     dc2:	e4 e0       	ldi	r30, 0x04	; 4
     dc4:	f5 e3       	ldi	r31, 0x35	; 53
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <__do_copy_data+0x10>
     dc8:	05 90       	lpm	r0, Z+
     dca:	0d 92       	st	X+, r0
     dcc:	a6 36       	cpi	r26, 0x66	; 102
     dce:	b1 07       	cpc	r27, r17
     dd0:	d9 f7       	brne	.-10     	; 0xdc8 <__do_copy_data+0xc>

00000dd2 <__do_clear_bss>:
     dd2:	23 e0       	ldi	r18, 0x03	; 3
     dd4:	a6 e6       	ldi	r26, 0x66	; 102
     dd6:	b1 e0       	ldi	r27, 0x01	; 1
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <.do_clear_bss_start>

00000dda <.do_clear_bss_loop>:
     dda:	1d 92       	st	X+, r1

00000ddc <.do_clear_bss_start>:
     ddc:	aa 39       	cpi	r26, 0x9A	; 154
     dde:	b2 07       	cpc	r27, r18
     de0:	e1 f7       	brne	.-8      	; 0xdda <.do_clear_bss_loop>
     de2:	0e 94 26 14 	call	0x284c	; 0x284c <main>
     de6:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <_exit>

00000dea <__bad_interrupt>:
     dea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000dee <__vector_11>:
volatile uint8_t ball_pos_y, balken_pos_x, ball_vert_richt, ball_horiz_richt, balk_horiz_richt, ball_refresh, balk_refresh;
volatile uint8_t ball_speed_y, ball_speed_x, ball_speed_y_counter,ball_speed_x_counter;
uint8_t balk_vert_pos, balk_end_left, balk_end_right, balk_lenght, ball_pos_x, ball_radius;

ISR (TIMER1_COMPA_vect)
{
     dee:	1f 92       	push	r1
     df0:	1f b6       	in	r1, 0x3f	; 63
     df2:	1f 92       	push	r1
     df4:	11 24       	eor	r1, r1
     df6:	2f 93       	push	r18
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
	ms10++;
     dfc:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <ms10>
     e00:	9f 5f       	subi	r25, 0xFF	; 255
     e02:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <ms10>
	if(entprell != 0)entprell--;
     e06:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <entprell>
     e0a:	88 23       	and	r24, r24
     e0c:	19 f0       	breq	.+6      	; 0xe14 <__vector_11+0x26>
     e0e:	81 50       	subi	r24, 0x01	; 1
     e10:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <entprell>
	
	//y-movement ball
	ball_speed_y_counter++;
     e14:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ball_speed_y_counter>
     e18:	8f 5f       	subi	r24, 0xFF	; 255
     e1a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <ball_speed_y_counter>
	if(ball_speed_y_counter>=ball_speed_y)
     e1e:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <ball_speed_y_counter>
     e22:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <ball_speed_y>
     e26:	28 17       	cp	r18, r24
     e28:	70 f0       	brcs	.+28     	; 0xe46 <__vector_11+0x58>
	{
		ball_refresh=EIN;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <ball_refresh>
		ball_speed_y_counter=0;
     e30:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <ball_speed_y_counter>
		if(ball_vert_richt==DOWN)
     e34:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <ball_vert_richt>
     e38:	81 11       	cpse	r24, r1
     e3a:	45 c0       	rjmp	.+138    	; 0xec6 <__vector_11+0xd8>
		{
			ball_pos_y++;
     e3c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ball_pos_y>
     e40:	8f 5f       	subi	r24, 0xFF	; 255
		}else ball_pos_y--;
     e42:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <ball_pos_y>
	}
	//x-movement ball
	ball_speed_x_counter++;
     e46:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <ball_speed_x_counter>
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
     e4c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <ball_speed_x_counter>
	if((ball_speed_x_counter>=ball_speed_x) && (ball_speed_x!=0))
     e50:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <ball_speed_x_counter>
     e54:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <ball_speed_x>
     e58:	28 17       	cp	r18, r24
     e5a:	78 f0       	brcs	.+30     	; 0xe7a <__vector_11+0x8c>
     e5c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <ball_speed_x>
     e60:	88 23       	and	r24, r24
     e62:	59 f0       	breq	.+22     	; 0xe7a <__vector_11+0x8c>
	{
		ball_speed_x_counter=0;
     e64:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <ball_speed_x_counter>
		//ball_refresh=EIN;
		if(ball_horiz_richt==RIGHT)
     e68:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <ball_horiz_richt>
     e6c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ball_pos_x>
     e70:	21 30       	cpi	r18, 0x01	; 1
     e72:	69 f5       	brne	.+90     	; 0xece <__vector_11+0xe0>
		{
			ball_pos_x++;
     e74:	8f 5f       	subi	r24, 0xFF	; 255
		}else ball_pos_x--;
     e76:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <ball_pos_x>
	}
		
	if(ms10==10)	//10ms
     e7a:	9a 30       	cpi	r25, 0x0A	; 10
     e7c:	39 f4       	brne	.+14     	; 0xe8c <__vector_11+0x9e>
     e7e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <ms100>
	{
		ms10=0;
     e82:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <ms10>
		ms100++;
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <ms100>
	
		
	}
    if(ms100==10)	//100ms
     e8c:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <ms100>
     e90:	8a 30       	cpi	r24, 0x0A	; 10
     e92:	39 f4       	brne	.+14     	; 0xea2 <__vector_11+0xb4>
     e94:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sec>
	{
		ms100=0;
     e98:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <ms100>
		sec++;
     e9c:	8f 5f       	subi	r24, 0xFF	; 255
     e9e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <sec>
	}
	if(sec==60)	//Minute
     ea2:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sec>
     ea6:	8c 33       	cpi	r24, 0x3C	; 60
     ea8:	39 f4       	brne	.+14     	; 0xeb8 <__vector_11+0xca>
	{
		sec=0;
     eaa:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <sec>
		min++;
     eae:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <min>
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <min>
	}
}
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	2f 91       	pop	r18
     ebe:	1f 90       	pop	r1
     ec0:	1f be       	out	0x3f, r1	; 63
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti
		}else ball_pos_y--;
     ec6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ball_pos_y>
     eca:	81 50       	subi	r24, 0x01	; 1
     ecc:	ba cf       	rjmp	.-140    	; 0xe42 <__vector_11+0x54>
		}else ball_pos_x--;
     ece:	81 50       	subi	r24, 0x01	; 1
     ed0:	d2 cf       	rjmp	.-92     	; 0xe76 <__vector_11+0x88>

00000ed2 <block1>:
	
	};
	
	
void block1(uint8_t bx, uint8_t by)
{
     ed2:	0f 93       	push	r16
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	c8 2f       	mov	r28, r24
     eda:	d6 2f       	mov	r29, r22
	const uint8_t blockx=10;
	const uint8_t blocky=0;
	const uint8_t block_lenght=20;
	const uint8_t block_hight=5;
	
	if(aktiv==1)//noch nie getroffen
     edc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	59 f5       	brne	.+86     	; 0xf3a <block1+0x68>
	{
		glcd_draw_rect(blockx, blocky, block_lenght, block_hight, BLACK);
     ee4:	01 e0       	ldi	r16, 0x01	; 1
     ee6:	25 e0       	ldi	r18, 0x05	; 5
     ee8:	44 e1       	ldi	r20, 0x14	; 20
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	8a e0       	ldi	r24, 0x0A	; 10
     eee:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <glcd_draw_rect>
		if(ball_vert_richt==UP)//block hit from the bottom?
     ef2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <ball_vert_richt>
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	01 f5       	brne	.+64     	; 0xf3a <block1+0x68>
		{
			if(BLOCK_BOTTOM)
     efa:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <ball_radius>
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	c9 01       	movw	r24, r18
     f02:	05 96       	adiw	r24, 0x05	; 5
     f04:	d8 17       	cp	r29, r24
     f06:	19 06       	cpc	r1, r25
     f08:	c1 f4       	brne	.+48     	; 0xf3a <block1+0x68>
     f0a:	d0 e0       	ldi	r29, 0x00	; 0
     f0c:	4a e0       	ldi	r20, 0x0A	; 10
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	42 1b       	sub	r20, r18
     f12:	53 0b       	sbc	r21, r19
     f14:	4c 17       	cp	r20, r28
     f16:	5d 07       	cpc	r21, r29
     f18:	84 f4       	brge	.+32     	; 0xf3a <block1+0x68>
     f1a:	23 5e       	subi	r18, 0xE3	; 227
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	2c 17       	cp	r18, r28
     f20:	3d 07       	cpc	r19, r29
     f22:	5c f0       	brlt	.+22     	; 0xf3a <block1+0x68>
			{
				ball_vert_richt=DOWN;
     f24:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <ball_vert_richt>
				aktiv=0;//block verbraucht weil getroffen
     f28:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				glcd_draw_rect(blockx, blocky, block_lenght, block_hight, WHITE);
     f2c:	00 e0       	ldi	r16, 0x00	; 0
     f2e:	25 e0       	ldi	r18, 0x05	; 5
     f30:	44 e1       	ldi	r20, 0x14	; 20
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	8a e0       	ldi	r24, 0x0A	; 10
     f36:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <glcd_draw_rect>
		
	}
	
	
	
}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	0f 91       	pop	r16
     f40:	08 95       	ret

00000f42 <glcd_update_bbox>:
/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
	/* Keep and check bounding box within limits of LCD screen dimensions */
	if (xmin > (GLCD_LCD_WIDTH-1)) {
     f42:	84 35       	cpi	r24, 0x54	; 84
     f44:	08 f0       	brcs	.+2      	; 0xf48 <glcd_update_bbox+0x6>
     f46:	83 e5       	ldi	r24, 0x53	; 83
		xmin = GLCD_LCD_WIDTH-1;
	}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
     f48:	44 35       	cpi	r20, 0x54	; 84
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <glcd_update_bbox+0xc>
     f4c:	43 e5       	ldi	r20, 0x53	; 83
		xmax = GLCD_LCD_WIDTH-1;
	}

	if (ymin > (GLCD_LCD_HEIGHT-1)) {
     f4e:	60 33       	cpi	r22, 0x30	; 48
     f50:	08 f0       	brcs	.+2      	; 0xf54 <glcd_update_bbox+0x12>
     f52:	6f e2       	ldi	r22, 0x2F	; 47
		ymin = GLCD_LCD_HEIGHT-1;
	}
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
     f54:	20 33       	cpi	r18, 0x30	; 48
     f56:	08 f0       	brcs	.+2      	; 0xf5a <glcd_update_bbox+0x18>
     f58:	2f e2       	ldi	r18, 0x2F	; 47
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
     f5a:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <glcd_bbox_selected>
     f5e:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <glcd_bbox_selected+0x1>
     f62:	90 81       	ld	r25, Z
     f64:	89 17       	cp	r24, r25
     f66:	08 f4       	brcc	.+2      	; 0xf6a <glcd_update_bbox+0x28>
		glcd_bbox_selected->x_min = xmin;
     f68:	80 83       	st	Z, r24
	}		
	if (xmax > glcd_bbox_selected->x_max) {
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	84 17       	cp	r24, r20
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <glcd_update_bbox+0x30>
		glcd_bbox_selected->x_max = xmax;
     f70:	42 83       	std	Z+2, r20	; 0x02
	}
	if (ymin < glcd_bbox_selected->y_min) {
     f72:	81 81       	ldd	r24, Z+1	; 0x01
     f74:	68 17       	cp	r22, r24
     f76:	08 f4       	brcc	.+2      	; 0xf7a <glcd_update_bbox+0x38>
		glcd_bbox_selected->y_min = ymin;
     f78:	61 83       	std	Z+1, r22	; 0x01
	}		
	if (ymax > glcd_bbox_selected->y_max) {
     f7a:	83 81       	ldd	r24, Z+3	; 0x03
     f7c:	82 17       	cp	r24, r18
     f7e:	08 f4       	brcc	.+2      	; 0xf82 <glcd_update_bbox+0x40>
		glcd_bbox_selected->y_max = ymax;
     f80:	23 83       	std	Z+3, r18	; 0x03
	}			
}
     f82:	08 95       	ret

00000f84 <glcd_reset_bbox>:

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
     f84:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <glcd_bbox_selected>
     f88:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <glcd_bbox_selected+0x1>
     f8c:	83 e5       	ldi	r24, 0x53	; 83
     f8e:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
     f90:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
     f92:	8f e2       	ldi	r24, 0x2F	; 47
     f94:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
     f96:	13 82       	std	Z+3, r1	; 0x03
}
     f98:	08 95       	ret

00000f9a <glcd_bbox_reset>:

void glcd_bbox_reset() {
	glcd_reset_bbox();
     f9a:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <glcd_reset_bbox>

00000f9e <glcd_bbox_refresh>:
}

void glcd_bbox_refresh() {
	/* Marks bounding box as entire screen, so on next glcd_write(), it writes the entire buffer to the LCD */
	glcd_bbox_selected->x_min = 0;
     f9e:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <glcd_bbox_selected>
     fa2:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <glcd_bbox_selected+0x1>
     fa6:	10 82       	st	Z, r1
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
     fa8:	83 e5       	ldi	r24, 0x53	; 83
     faa:	82 83       	std	Z+2, r24	; 0x02
	glcd_bbox_selected->y_min = 0;
     fac:	11 82       	std	Z+1, r1	; 0x01
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
     fae:	8f e2       	ldi	r24, 0x2F	; 47
     fb0:	83 83       	std	Z+3, r24	; 0x03
}
     fb2:	08 95       	ret

00000fb4 <glcd_clear>:

void glcd_clear(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
     fb4:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <glcd_buffer_selected>
     fb8:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <glcd_buffer_selected+0x1>
     fbc:	88 ef       	ldi	r24, 0xF8	; 248
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	df 01       	movw	r26, r30
     fc2:	9c 01       	movw	r18, r24
     fc4:	1d 92       	st	X+, r1
     fc6:	21 50       	subi	r18, 0x01	; 1
     fc8:	30 40       	sbci	r19, 0x00	; 0
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <glcd_clear+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     fcc:	2f e2       	ldi	r18, 0x2F	; 47
     fce:	43 e5       	ldi	r20, 0x53	; 83
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 a1 07 	call	0xf42	; 0xf42 <glcd_update_bbox>
	glcd_write();
     fd8:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <glcd_write>

00000fdc <glcd_clear_buffer>:
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
     fdc:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <glcd_buffer_selected>
     fe0:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <glcd_buffer_selected+0x1>
     fe4:	88 ef       	ldi	r24, 0xF8	; 248
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	df 01       	movw	r26, r30
     fea:	9c 01       	movw	r18, r24
     fec:	1d 92       	st	X+, r1
     fee:	21 50       	subi	r18, 0x01	; 1
     ff0:	30 40       	sbci	r19, 0x00	; 0
     ff2:	e1 f7       	brne	.-8      	; 0xfec <glcd_clear_buffer+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     ff4:	2f e2       	ldi	r18, 0x2F	; 47
     ff6:	43 e5       	ldi	r20, 0x53	; 83
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <glcd_update_bbox>

00001000 <glcd_select_screen>:
}

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
    1000:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <glcd_buffer_selected+0x1>
    1004:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <glcd_buffer_selected>
	glcd_bbox_selected = bbox;
    1008:	70 93 92 03 	sts	0x0392, r23	; 0x800392 <glcd_bbox_selected+0x1>
    100c:	60 93 91 03 	sts	0x0391, r22	; 0x800391 <glcd_bbox_selected>
}
    1010:	08 95       	ret

00001012 <glcd_scroll>:
		uint8_t x;
		for (x=0; x<GLCD_LCD_WIDTH; x++) {
			
		}
	}
}
    1012:	08 95       	ret

00001014 <glcd_scroll_line>:

void glcd_scroll_line(void)
{
    1014:	24 e5       	ldi	r18, 0x54	; 84
    1016:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
    1018:	80 e0       	ldi	r24, 0x00	; 0
		if (y < (number_of_rows - 1)) {
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
    101a:	44 e5       	ldi	r20, 0x54	; 84
		if (y < (number_of_rows - 1)) {
    101c:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <glcd_buffer_selected>
    1020:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <glcd_buffer_selected+0x1>
    1024:	85 30       	cpi	r24, 0x05	; 5
    1026:	b9 f0       	breq	.+46     	; 0x1056 <glcd_scroll_line+0x42>
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
    1028:	d9 01       	movw	r26, r18
    102a:	a4 55       	subi	r26, 0x54	; 84
    102c:	b1 09       	sbc	r27, r1
    102e:	ae 0f       	add	r26, r30
    1030:	bf 1f       	adc	r27, r31
    1032:	e2 0f       	add	r30, r18
    1034:	f3 1f       	adc	r31, r19
    1036:	94 e5       	ldi	r25, 0x54	; 84
    1038:	01 90       	ld	r0, Z+
    103a:	0d 92       	st	X+, r0
    103c:	9a 95       	dec	r25
    103e:	e1 f7       	brne	.-8      	; 0x1038 <glcd_scroll_line+0x24>
	for (y=0; y<number_of_rows; y++) {
    1040:	8f 5f       	subi	r24, 0xFF	; 255
    1042:	2c 5a       	subi	r18, 0xAC	; 172
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	86 30       	cpi	r24, 0x06	; 6
    1048:	49 f7       	brne	.-46     	; 0x101c <glcd_scroll_line+0x8>
		}
	}
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
    104a:	2f e2       	ldi	r18, 0x2F	; 47
    104c:	43 e5       	ldi	r20, 0x53	; 83
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <glcd_update_bbox>
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
    1056:	ec 55       	subi	r30, 0x5C	; 92
    1058:	fe 4f       	sbci	r31, 0xFE	; 254
    105a:	df 01       	movw	r26, r30
    105c:	94 2f       	mov	r25, r20
    105e:	1d 92       	st	X+, r1
    1060:	9a 95       	dec	r25
    1062:	e9 f7       	brne	.-6      	; 0x105e <glcd_scroll_line+0x4a>
    1064:	ed cf       	rjmp	.-38     	; 0x1040 <glcd_scroll_line+0x2c>

00001066 <glcd_init>:
	/*
	 * Set up SPI for AVR8
	 * Note: AVR's SS pin must be set to output, regardless of whether we
	 * actually use it. This is a requirement of SPI mster mode.
	 */
	sbi(DDR(AVR_SS_PORT),AVR_SS_PIN);
    1066:	20 9a       	sbi	0x04, 0	; 4
	
	/*
	 *  Set MOSI, Master SS, SCK to output (otherwise SPI won't work)
	 *  Must be done even if native SS pin not used
	 */
	sbi(DDR(CONTROLLER_MOSI_PORT),CONTROLLER_MOSI_PIN);
    1068:	23 9a       	sbi	0x04, 3	; 4
	sbi(DDR(CONTROLLER_SS_PORT),CONTROLLER_SS_PIN);
    106a:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDR(CONTROLLER_SCK_PORT),CONTROLLER_SCK_PIN);
    106c:	25 9a       	sbi	0x04, 5	; 4
		
	/* Set SS, DC and RST pins to output */
	sbi( DDR(CONTROLLER_SS_PORT), CONTROLLER_SS_PIN );
    106e:	20 9a       	sbi	0x04, 0	; 4
	sbi( DDR(CONTROLLER_DC_PORT), CONTROLLER_DC_PIN );
    1070:	21 9a       	sbi	0x04, 1	; 4
	sbi( DDR(CONTROLLER_RST_PORT), CONTROLLER_RST_PIN );
    1072:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Deselect LCD */
	GLCD_DESELECT();
    1074:	28 9a       	sbi	0x05, 0	; 5

	/*
	 * Max allowed SPI clock is 4 MHz from datasheet.
	 * Enable SPI, set master mode and clock rate to /4 (4MHz with F_CPU=8MHz)
	 */
	SPCR = (1<<SPE)|(1<<MSTR);
    1076:	80 e5       	ldi	r24, 0x50	; 80
    1078:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
    107a:	1d bc       	out	0x2d, r1	; 45
	
	glcd_PCD8544_init();
    107c:	0e 94 cd 08 	call	0x119a	; 0x119a <glcd_PCD8544_init>

	/* Select screen buffer */
	glcd_select_screen(glcd_buffer,&glcd_bbox);
    1080:	63 e9       	ldi	r22, 0x93	; 147
    1082:	71 e0       	ldi	r23, 0x01	; 1
    1084:	87 e9       	ldi	r24, 0x97	; 151
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	0e 94 00 08 	call	0x1000	; 0x1000 <glcd_select_screen>
	
	/* Clear screen, we are now ready to go */
	glcd_clear();
    108c:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <glcd_clear>

00001090 <glcd_spi_write>:
	
}

void glcd_spi_write(uint8_t c)
{
	GLCD_SELECT();
    1090:	28 98       	cbi	0x05, 0	; 5
	SPDR = c;
    1092:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); /* wait until transmission is complete */
    1094:	0d b4       	in	r0, 0x2d	; 45
    1096:	07 fe       	sbrs	r0, 7
    1098:	fd cf       	rjmp	.-6      	; 0x1094 <glcd_spi_write+0x4>
	GLCD_DESELECT();	
    109a:	28 9a       	sbi	0x05, 0	; 5
}
    109c:	08 95       	ret

0000109e <glcd_reset>:

void glcd_reset(void)
{
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
    109e:	28 98       	cbi	0x05, 0	; 5
	GLCD_RESET_LOW();
    10a0:	5f 98       	cbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10a2:	80 ea       	ldi	r24, 0xA0	; 160
    10a4:	9f e0       	ldi	r25, 0x0F	; 15
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <glcd_reset+0x8>
	delay_ms(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
    10aa:	5f 9a       	sbi	0x0b, 7	; 11
	GLCD_DESELECT();	
    10ac:	28 9a       	sbi	0x05, 0	; 5
}
    10ae:	08 95       	ret

000010b0 <glcd_command>:

#include "../glcd.h"

void glcd_command(uint8_t c)
{
	GLCD_DC_LOW();
    10b0:	29 98       	cbi	0x05, 1	; 5
	glcd_spi_write(c);
    10b2:	0c 94 48 08 	jmp	0x1090	; 0x1090 <glcd_spi_write>

000010b6 <glcd_data>:
}

void glcd_data(uint8_t c)
{
	GLCD_DC_HIGH();
    10b6:	29 9a       	sbi	0x05, 1	; 5
	glcd_spi_write(c);
    10b8:	0c 94 48 08 	jmp	0x1090	; 0x1090 <glcd_spi_write>

000010bc <glcd_set_contrast>:
}

void glcd_set_contrast(uint8_t val) {
    10bc:	cf 93       	push	r28
    10be:	c8 2f       	mov	r28, r24
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    10c0:	81 e2       	ldi	r24, 0x21	; 33
    10c2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <glcd_command>
	glcd_command(PCD8544_SET_VOP | (val&0x7f));
    10c6:	8c 2f       	mov	r24, r28
    10c8:	80 68       	ori	r24, 0x80	; 128
    10ca:	0e 94 58 08 	call	0x10b0	; 0x10b0 <glcd_command>
	glcd_command(PCD8544_FUNCTION_SET);
    10ce:	80 e2       	ldi	r24, 0x20	; 32
    10d0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <glcd_command>
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    10d4:	8c e0       	ldi	r24, 0x0C	; 12
}
    10d6:	cf 91       	pop	r28
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    10d8:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <glcd_command>

000010dc <glcd_power_down>:

void glcd_power_down(void)
{
	/* First, fill RAM with zeroes to ensure minimum specified current consumption */
	glcd_clear();
    10dc:	0e 94 da 07 	call	0xfb4	; 0xfb4 <glcd_clear>

	/* Power down */
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
    10e0:	84 e2       	ldi	r24, 0x24	; 36
    10e2:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <glcd_command>

000010e6 <glcd_power_up>:
}

void glcd_power_up(void)
{
	glcd_command(PCD8544_FUNCTION_SET);
    10e6:	80 e2       	ldi	r24, 0x20	; 32
    10e8:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <glcd_command>

000010ec <glcd_set_y_address>:
}

void glcd_set_y_address(uint8_t y)
{
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
    10ec:	86 30       	cpi	r24, 0x06	; 6
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <glcd_set_y_address+0x6>
    10f0:	85 e0       	ldi	r24, 0x05	; 5
    10f2:	80 64       	ori	r24, 0x40	; 64
    10f4:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <glcd_command>

000010f8 <glcd_set_x_address>:
}

void glcd_set_x_address(uint8_t x)
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
    10f8:	80 68       	ori	r24, 0x80	; 128
    10fa:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <glcd_command>

000010fe <glcd_write>:
}

void glcd_write()
{
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	f1 2c       	mov	r15, r1
    110c:	e1 2c       	mov	r14, r1
    110e:	08 e0       	ldi	r16, 0x08	; 8
    1110:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t bank;

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
    1112:	c0 e0       	ldi	r28, 0x00	; 0
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
    1114:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <glcd_bbox_selected>
    1118:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <glcd_bbox_selected+0x1>
    111c:	81 81       	ldd	r24, Z+1	; 0x01
    111e:	80 17       	cp	r24, r16
    1120:	11 06       	cpc	r1, r17
    1122:	84 f0       	brlt	.+32     	; 0x1144 <glcd_write+0x46>
	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
    1124:	cf 5f       	subi	r28, 0xFF	; 255
    1126:	08 5f       	subi	r16, 0xF8	; 248
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	84 e5       	ldi	r24, 0x54	; 84
    112c:	e8 0e       	add	r14, r24
    112e:	f1 1c       	adc	r15, r1
    1130:	c6 30       	cpi	r28, 0x06	; 6
    1132:	81 f7       	brne	.-32     	; 0x1114 <glcd_write+0x16>
		}
	}

	glcd_reset_bbox();

}
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	ff 90       	pop	r15
    113e:	ef 90       	pop	r14
	glcd_reset_bbox();
    1140:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <glcd_reset_bbox>
		if (glcd_bbox_selected->y_max < bank*8) {
    1144:	23 81       	ldd	r18, Z+3	; 0x03
    1146:	c8 01       	movw	r24, r16
    1148:	08 97       	sbiw	r24, 0x08	; 8
    114a:	28 17       	cp	r18, r24
    114c:	19 06       	cpc	r1, r25
    114e:	94 f3       	brlt	.-28     	; 0x1134 <glcd_write+0x36>
		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
    1150:	8c 2f       	mov	r24, r28
    1152:	80 64       	ori	r24, 0x40	; 64
    1154:	0e 94 58 08 	call	0x10b0	; 0x10b0 <glcd_command>
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);
    1158:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <glcd_bbox_selected>
    115c:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <glcd_bbox_selected+0x1>
    1160:	80 81       	ld	r24, Z
    1162:	80 68       	ori	r24, 0x80	; 128
    1164:	0e 94 58 08 	call	0x10b0	; 0x10b0 <glcd_command>
		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    1168:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <glcd_bbox_selected>
    116c:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <glcd_bbox_selected+0x1>
    1170:	d0 81       	ld	r29, Z
    1172:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <glcd_bbox_selected>
    1176:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <glcd_bbox_selected+0x1>
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	8d 17       	cp	r24, r29
    117e:	90 f2       	brcs	.-92     	; 0x1124 <glcd_write+0x26>
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
    1180:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <glcd_buffer_selected>
    1184:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <glcd_buffer_selected+0x1>
    1188:	ee 0d       	add	r30, r14
    118a:	ff 1d       	adc	r31, r15
    118c:	ed 0f       	add	r30, r29
    118e:	f1 1d       	adc	r31, r1
    1190:	80 81       	ld	r24, Z
    1192:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <glcd_data>
		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    1196:	df 5f       	subi	r29, 0xFF	; 255
    1198:	ec cf       	rjmp	.-40     	; 0x1172 <glcd_write+0x74>

0000119a <glcd_PCD8544_init>:

void glcd_PCD8544_init(void) {

	glcd_reset();
    119a:	0e 94 4f 08 	call	0x109e	; 0x109e <glcd_reset>
	
	/* Get into the EXTENDED mode! */
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    119e:	81 e2       	ldi	r24, 0x21	; 33
    11a0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <glcd_command>

	/* LCD bias select (4 is optimal?) */
	glcd_command(PCD8544_SET_BIAS | 0x2);
    11a4:	82 e1       	ldi	r24, 0x12	; 18
    11a6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <glcd_command>

	/* Set VOP (affects contrast) */
	glcd_command(PCD8544_SET_VOP | 60); /* Experimentally determined, play with this figure until contrast looks nice */
    11aa:	8c eb       	ldi	r24, 0xBC	; 188
    11ac:	0e 94 58 08 	call	0x10b0	; 0x10b0 <glcd_command>

	/* Back to standard instructions */
	glcd_command(PCD8544_FUNCTION_SET);
    11b0:	80 e2       	ldi	r24, 0x20	; 32
    11b2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <glcd_command>

	/* Normal mode */
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    11b6:	8c e0       	ldi	r24, 0x0C	; 12
    11b8:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <glcd_command>

000011bc <glcd_bar_graph_horizontal>:
#include "glcd.h"

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x);

void glcd_bar_graph_horizontal(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	f8 2e       	mov	r15, r24
    11ca:	16 2f       	mov	r17, r22
    11cc:	c4 2f       	mov	r28, r20
    11ce:	d2 2f       	mov	r29, r18
    11d0:	e0 2e       	mov	r14, r16
	if (height < 3) {
    11d2:	23 30       	cpi	r18, 0x03	; 3
    11d4:	a0 f0       	brcs	.+40     	; 0x11fe <glcd_bar_graph_horizontal+0x42>
		return;
	}
	glcd_draw_rect(x, y, width, height, BLACK);
    11d6:	01 e0       	ldi	r16, 0x01	; 1
    11d8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
    11dc:	2e ef       	ldi	r18, 0xFE	; 254
    11de:	2d 0f       	add	r18, r29
    11e0:	c2 50       	subi	r28, 0x02	; 2
	}
}

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x)
{
	return x1+(x2-x1)*x/255;	
    11e2:	ce 9d       	mul	r28, r14
    11e4:	c0 01       	movw	r24, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	6f ef       	ldi	r22, 0xFF	; 255
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
    11f0:	46 2f       	mov	r20, r22
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
    11f2:	61 e0       	ldi	r22, 0x01	; 1
    11f4:	61 0f       	add	r22, r17
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	8f 0d       	add	r24, r15
    11fa:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <glcd_fill_rect>
}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	08 95       	ret

0000120c <glcd_bar_graph_horizontal_no_border>:
{
    120c:	0f 93       	push	r16
    120e:	38 2f       	mov	r19, r24
    1210:	e6 2f       	mov	r30, r22
	if (height < 3) {
    1212:	23 30       	cpi	r18, 0x03	; 3
    1214:	68 f0       	brcs	.+26     	; 0x1230 <glcd_bar_graph_horizontal_no_border+0x24>
	return x1+(x2-x1)*x/255;	
    1216:	40 9f       	mul	r20, r16
    1218:	c0 01       	movw	r24, r0
    121a:	11 24       	eor	r1, r1
    121c:	6f ef       	ldi	r22, 0xFF	; 255
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
    1224:	46 2f       	mov	r20, r22
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
    1226:	01 e0       	ldi	r16, 0x01	; 1
    1228:	6e 2f       	mov	r22, r30
    122a:	83 2f       	mov	r24, r19
    122c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <glcd_fill_rect>
}
    1230:	0f 91       	pop	r16
    1232:	08 95       	ret

00001234 <glcd_bar_graph_vertical>:
{
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	e8 2e       	mov	r14, r24
    1242:	d6 2f       	mov	r29, r22
    1244:	f4 2e       	mov	r15, r20
    1246:	c2 2f       	mov	r28, r18
    1248:	10 2f       	mov	r17, r16
	glcd_draw_rect(x, y, width, height, BLACK);
    124a:	01 e0       	ldi	r16, 0x01	; 1
    124c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
    1250:	c2 50       	subi	r28, 0x02	; 2
    1252:	10 95       	com	r17
	return x1+(x2-x1)*x/255;	
    1254:	1c 9f       	mul	r17, r28
    1256:	c0 01       	movw	r24, r0
    1258:	11 24       	eor	r1, r1
    125a:	6f ef       	ldi	r22, 0xFF	; 255
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
    1262:	2c 2f       	mov	r18, r28
    1264:	26 1b       	sub	r18, r22
    1266:	4e ef       	ldi	r20, 0xFE	; 254
    1268:	4f 0d       	add	r20, r15
    126a:	df 5f       	subi	r29, 0xFF	; 255
    126c:	6d 0f       	add	r22, r29
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	8e 0d       	add	r24, r14
    1272:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <glcd_fill_rect>
}
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	08 95       	ret

00001284 <glcd_bar_graph_vertical_no_border>:
{
    1284:	0f 93       	push	r16
    1286:	e8 2f       	mov	r30, r24
    1288:	36 2f       	mov	r19, r22
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
    128a:	22 50       	subi	r18, 0x02	; 2
    128c:	00 95       	com	r16
	return x1+(x2-x1)*x/255;	
    128e:	02 9f       	mul	r16, r18
    1290:	c0 01       	movw	r24, r0
    1292:	11 24       	eor	r1, r1
    1294:	6f ef       	ldi	r22, 0xFF	; 255
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
    129c:	26 1b       	sub	r18, r22
    129e:	63 0f       	add	r22, r19
    12a0:	01 e0       	ldi	r16, 0x01	; 1
    12a2:	8e 2f       	mov	r24, r30
    12a4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <glcd_fill_rect>
}
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <glcd_scrolling_bar_graph>:
{
    12ac:	4f 92       	push	r4
    12ae:	5f 92       	push	r5
    12b0:	6f 92       	push	r6
    12b2:	7f 92       	push	r7
    12b4:	8f 92       	push	r8
    12b6:	9f 92       	push	r9
    12b8:	af 92       	push	r10
    12ba:	bf 92       	push	r11
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	98 2e       	mov	r9, r24
    12ce:	d6 2f       	mov	r29, r22
    12d0:	c4 2f       	mov	r28, r20
    12d2:	72 2e       	mov	r7, r18
    12d4:	60 2e       	mov	r6, r16
	glcd_draw_rect(x,y,width,height,BLACK);
    12d6:	01 e0       	ldi	r16, 0x01	; 1
    12d8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <glcd_draw_rect>
	for (ny = 1; ny <= (height-2); ny++) {
    12dc:	ee 24       	eor	r14, r14
    12de:	e3 94       	inc	r14
    12e0:	ed 0e       	add	r14, r29
    12e2:	fe 2c       	mov	r15, r14
    12e4:	07 2d       	mov	r16, r7
    12e6:	10 e0       	ldi	r17, 0x00	; 0
    12e8:	68 01       	movw	r12, r16
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	c8 1a       	sub	r12, r24
    12ee:	d1 08       	sbc	r13, r1
		for (nx = 1; nx <= (width-2); nx += 1) {
    12f0:	8c 2f       	mov	r24, r28
    12f2:	81 50       	subi	r24, 0x01	; 1
    12f4:	99 0b       	sbc	r25, r25
    12f6:	5c 01       	movw	r10, r24
			color = glcd_get_pixel(x+nx+1,y+ny);
    12f8:	55 24       	eor	r5, r5
    12fa:	53 94       	inc	r5
    12fc:	59 0c       	add	r5, r9
	for (ny = 1; ny <= (height-2); ny++) {
    12fe:	8f 2d       	mov	r24, r15
    1300:	8d 1b       	sub	r24, r29
    1302:	8c 15       	cp	r24, r12
    1304:	1d 04       	cpc	r1, r13
    1306:	0c f4       	brge	.+2      	; 0x130a <glcd_scrolling_bar_graph+0x5e>
    1308:	4d c0       	rjmp	.+154    	; 0x13a4 <glcd_scrolling_bar_graph+0xf8>
	val = val * (height-3) / 255;
    130a:	98 01       	movw	r18, r16
    130c:	23 50       	subi	r18, 0x03	; 3
    130e:	31 09       	sbc	r19, r1
    1310:	62 9e       	mul	r6, r18
    1312:	c0 01       	movw	r24, r0
    1314:	63 9e       	mul	r6, r19
    1316:	90 0d       	add	r25, r0
    1318:	11 24       	eor	r1, r1
    131a:	6f ef       	ldi	r22, 0xFF	; 255
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
	if (val > (height-3)) {
    1322:	02 50       	subi	r16, 0x02	; 2
    1324:	11 09       	sbc	r17, r1
    1326:	60 17       	cp	r22, r16
    1328:	11 06       	cpc	r1, r17
    132a:	14 f0       	brlt	.+4      	; 0x1330 <glcd_scrolling_bar_graph+0x84>
		val = height - 3;
    132c:	6d ef       	ldi	r22, 0xFD	; 253
    132e:	67 0d       	add	r22, r7
	glcd_draw_line(x+width-2,y+height-2,x+width-2,y+height-2-val,BLACK);
    1330:	d7 0d       	add	r29, r7
    1332:	1d 2f       	mov	r17, r29
    1334:	16 1b       	sub	r17, r22
    1336:	c2 50       	subi	r28, 0x02	; 2
    1338:	c9 0d       	add	r28, r9
    133a:	2e ef       	ldi	r18, 0xFE	; 254
    133c:	21 0f       	add	r18, r17
    133e:	6e ef       	ldi	r22, 0xFE	; 254
    1340:	6d 0f       	add	r22, r29
    1342:	01 e0       	ldi	r16, 0x01	; 1
    1344:	4c 2f       	mov	r20, r28
    1346:	8c 2f       	mov	r24, r28
    1348:	0e 94 bd 0c 	call	0x197a	; 0x197a <glcd_draw_line>
	glcd_draw_line(x+width-2,y+height-3-val,x+width-2,y+1,WHITE);
    134c:	6d ef       	ldi	r22, 0xFD	; 253
    134e:	61 0f       	add	r22, r17
    1350:	00 e0       	ldi	r16, 0x00	; 0
    1352:	2e 2d       	mov	r18, r14
    1354:	4c 2f       	mov	r20, r28
    1356:	8c 2f       	mov	r24, r28
    1358:	0e 94 bd 0c 	call	0x197a	; 0x197a <glcd_draw_line>
}
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	df 90       	pop	r13
    136a:	cf 90       	pop	r12
    136c:	bf 90       	pop	r11
    136e:	af 90       	pop	r10
    1370:	9f 90       	pop	r9
    1372:	8f 90       	pop	r8
    1374:	7f 90       	pop	r7
    1376:	6f 90       	pop	r6
    1378:	5f 90       	pop	r5
    137a:	4f 90       	pop	r4
	glcd_write();
    137c:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <glcd_write>
			color = glcd_get_pixel(x+nx+1,y+ny);
    1380:	48 2c       	mov	r4, r8
    1382:	49 0c       	add	r4, r9
    1384:	6f 2d       	mov	r22, r15
    1386:	85 2d       	mov	r24, r5
    1388:	88 0d       	add	r24, r8
    138a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <glcd_get_pixel>
			glcd_set_pixel(x+nx,y+ny,color);
    138e:	48 2f       	mov	r20, r24
    1390:	6f 2d       	mov	r22, r15
    1392:	84 2d       	mov	r24, r4
    1394:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		for (nx = 1; nx <= (width-2); nx += 1) {
    1398:	83 94       	inc	r8
    139a:	8a 14       	cp	r8, r10
    139c:	1b 04       	cpc	r1, r11
    139e:	84 f3       	brlt	.-32     	; 0x1380 <glcd_scrolling_bar_graph+0xd4>
    13a0:	f3 94       	inc	r15
    13a2:	ad cf       	rjmp	.-166    	; 0x12fe <glcd_scrolling_bar_graph+0x52>
    13a4:	88 24       	eor	r8, r8
    13a6:	83 94       	inc	r8
    13a8:	f8 cf       	rjmp	.-16     	; 0x139a <glcd_scrolling_bar_graph+0xee>

000013aa <glcd_scrolling_bar_graph_timing>:
{
    13aa:	8f 92       	push	r8
    13ac:	9f 92       	push	r9
    13ae:	af 92       	push	r10
    13b0:	bf 92       	push	r11
    13b2:	cf 92       	push	r12
    13b4:	df 92       	push	r13
    13b6:	ef 92       	push	r14
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    13bc:	cf 93       	push	r28
    13be:	b8 2e       	mov	r11, r24
    13c0:	a6 2e       	mov	r10, r22
    13c2:	94 2e       	mov	r9, r20
    13c4:	82 2e       	mov	r8, r18
    13c6:	c0 2f       	mov	r28, r16
	if (line_width == 0) {
    13c8:	e1 10       	cpse	r14, r1
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <glcd_scrolling_bar_graph_timing+0x26>
		line_width = 1;
    13cc:	ee 24       	eor	r14, r14
    13ce:	e3 94       	inc	r14
	for (n=0; n<line_width; n++) {
    13d0:	f1 2c       	mov	r15, r1
		glcd_scrolling_bar_graph(x,y,width,height,val);
    13d2:	0c 2f       	mov	r16, r28
    13d4:	28 2d       	mov	r18, r8
    13d6:	49 2d       	mov	r20, r9
    13d8:	6a 2d       	mov	r22, r10
    13da:	8b 2d       	mov	r24, r11
    13dc:	0e 94 56 09 	call	0x12ac	; 0x12ac <glcd_scrolling_bar_graph>
	for (n=0; n<line_width; n++) {
    13e0:	f3 94       	inc	r15
    13e2:	ef 10       	cpse	r14, r15
    13e4:	f6 cf       	rjmp	.-20     	; 0x13d2 <glcd_scrolling_bar_graph_timing+0x28>
	if (delay) {
    13e6:	c1 14       	cp	r12, r1
    13e8:	d1 04       	cpc	r13, r1
    13ea:	81 f1       	breq	.+96     	; 0x144c <glcd_scrolling_bar_graph_timing+0xa2>
		delay_ms(delay);
    13ec:	b6 01       	movw	r22, r12
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <__floatunsisf>
    13f6:	4b 01       	movw	r8, r22
    13f8:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	4a e7       	ldi	r20, 0x7A	; 122
    1400:	55 e4       	ldi	r21, 0x45	; 69
    1402:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    1406:	6b 01       	movw	r12, r22
    1408:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e8       	ldi	r20, 0x80	; 128
    1410:	5f e3       	ldi	r21, 0x3F	; 63
    1412:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__cmpsf2>
    1416:	87 fd       	sbrc	r24, 7
    1418:	32 c0       	rjmp	.+100    	; 0x147e <glcd_scrolling_bar_graph_timing+0xd4>
		__ticks = 1;
	else if (__tmp > 65535)
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	3f ef       	ldi	r19, 0xFF	; 255
    141e:	4f e7       	ldi	r20, 0x7F	; 127
    1420:	57 e4       	ldi	r21, 0x47	; 71
    1422:	c7 01       	movw	r24, r14
    1424:	b6 01       	movw	r22, r12
    1426:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__gesf2>
    142a:	18 16       	cp	r1, r24
    142c:	04 f5       	brge	.+64     	; 0x146e <glcd_scrolling_bar_graph_timing+0xc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	51 e4       	ldi	r21, 0x41	; 65
    1436:	c5 01       	movw	r24, r10
    1438:	b4 01       	movw	r22, r8
    143a:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <__mulsf3>
    143e:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__fixunssfsi>
    1442:	20 e9       	ldi	r18, 0x90	; 144
    1444:	31 e0       	ldi	r19, 0x01	; 1
		while(__ticks)
    1446:	61 15       	cp	r22, r1
    1448:	71 05       	cpc	r23, r1
    144a:	59 f4       	brne	.+22     	; 0x1462 <glcd_scrolling_bar_graph_timing+0xb8>
}
    144c:	cf 91       	pop	r28
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	ef 90       	pop	r14
    1454:	df 90       	pop	r13
    1456:	cf 90       	pop	r12
    1458:	bf 90       	pop	r11
    145a:	af 90       	pop	r10
    145c:	9f 90       	pop	r9
    145e:	8f 90       	pop	r8
    1460:	08 95       	ret
    1462:	c9 01       	movw	r24, r18
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <glcd_scrolling_bar_graph_timing+0xba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1468:	61 50       	subi	r22, 0x01	; 1
    146a:	71 09       	sbc	r23, r1
    146c:	ec cf       	rjmp	.-40     	; 0x1446 <glcd_scrolling_bar_graph_timing+0x9c>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146e:	c7 01       	movw	r24, r14
    1470:	b6 01       	movw	r22, r12
    1472:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__fixunssfsi>
    1476:	cb 01       	movw	r24, r22
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <glcd_scrolling_bar_graph_timing+0xce>
    147c:	e7 cf       	rjmp	.-50     	; 0x144c <glcd_scrolling_bar_graph_timing+0xa2>
		__ticks = 1;
    147e:	61 e0       	ldi	r22, 0x01	; 1
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	f9 cf       	rjmp	.-14     	; 0x1476 <glcd_scrolling_bar_graph_timing+0xcc>

00001484 <glcd_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    1484:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    1486:	e3 e9       	ldi	r30, 0x93	; 147
    1488:	f3 e0       	ldi	r31, 0x03	; 3
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	80 83       	st	Z, r24
	font_current.width = width;
    148e:	62 83       	std	Z+2, r22	; 0x02
	font_current.height = height;
    1490:	43 83       	std	Z+3, r20	; 0x03
	font_current.start_char = start_char;
    1492:	24 83       	std	Z+4, r18	; 0x04
	font_current.end_char = end_char;
    1494:	05 83       	std	Z+5, r16	; 0x05
	font_current.table_type = MIKRO; /* Only supports MikroElektronika generated format at the moment */
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	86 83       	std	Z+6, r24	; 0x06
}
    149a:	0f 91       	pop	r16
    149c:	08 95       	ret

0000149e <glcd_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#else
void glcd_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#endif
{
    149e:	ef 92       	push	r14
    14a0:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    14a2:	e3 e9       	ldi	r30, 0x93	; 147
    14a4:	f3 e0       	ldi	r31, 0x03	; 3
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	80 83       	st	Z, r24
	font_current.width = width;
    14aa:	62 83       	std	Z+2, r22	; 0x02
	font_current.height = height;
    14ac:	43 83       	std	Z+3, r20	; 0x03
	font_current.start_char = start_char;
    14ae:	24 83       	std	Z+4, r18	; 0x04
	font_current.end_char = end_char;
    14b0:	05 83       	std	Z+5, r16	; 0x05
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
    14b2:	e6 82       	std	Z+6, r14	; 0x06
}
    14b4:	0f 91       	pop	r16
    14b6:	ef 90       	pop	r14
    14b8:	08 95       	ret

000014ba <glcd_draw_char_xy>:

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    14ba:	2f 92       	push	r2
    14bc:	3f 92       	push	r3
    14be:	4f 92       	push	r4
    14c0:	5f 92       	push	r5
    14c2:	6f 92       	push	r6
    14c4:	7f 92       	push	r7
    14c6:	8f 92       	push	r8
    14c8:	9f 92       	push	r9
    14ca:	af 92       	push	r10
    14cc:	bf 92       	push	r11
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	29 97       	sbiw	r28, 0x09	; 9
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	48 2e       	mov	r4, r24
    14f0:	68 87       	std	Y+8, r22	; 0x08
	if (c < font_current.start_char || c > font_current.end_char) {
    14f2:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <font_current+0x4>
    14f6:	42 17       	cp	r20, r18
    14f8:	20 f0       	brcs	.+8      	; 0x1502 <glcd_draw_char_xy+0x48>
    14fa:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <font_current+0x5>
    14fe:	84 17       	cp	r24, r20
    1500:	08 f4       	brcc	.+2      	; 0x1504 <glcd_draw_char_xy+0x4a>
		c = '.';
    1502:	4e e2       	ldi	r20, 0x2E	; 46
	}
	
	if (font_current.table_type == STANG) {
    1504:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <font_current+0x6>
    1508:	88 23       	and	r24, r24
    150a:	09 f4       	brne	.+2      	; 0x150e <glcd_draw_char_xy+0x54>
    150c:	9e c0       	rjmp	.+316    	; 0x164a <glcd_draw_char_xy+0x190>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	09 f0       	breq	.+2      	; 0x1514 <glcd_draw_char_xy+0x5a>
    1512:	f1 c0       	rjmp	.+482    	; 0x16f6 <glcd_draw_char_xy+0x23c>
		
		uint8_t i;
		uint8_t var_width;
		uint8_t bytes_high;
		
		if ((font_current.height % 8) > 0){
    1514:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <font_current+0x3>
    1518:	38 2f       	mov	r19, r24
    151a:	36 95       	lsr	r19
    151c:	36 95       	lsr	r19
    151e:	36 95       	lsr	r19
    1520:	39 87       	std	Y+9, r19	; 0x09
    1522:	87 70       	andi	r24, 0x07	; 7
    1524:	11 f0       	breq	.+4      	; 0x152a <glcd_draw_char_xy+0x70>
			bytes_high = (font_current.height / 8) + 1;
    1526:	3f 5f       	subi	r19, 0xFF	; 255
    1528:	39 87       	std	Y+9, r19	; 0x09
		}
		else{
			bytes_high = (font_current.height / 8);
		}
		uint8_t bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
    152a:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <font_current+0x2>
    152e:	59 85       	ldd	r21, Y+9	; 0x09
    1530:	58 9f       	mul	r21, r24
    1532:	80 2d       	mov	r24, r0
    1534:	11 24       	eor	r1, r1
    1536:	8f 5f       	subi	r24, 0xFF	; 255
		
		const char *p;
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    1538:	42 1b       	sub	r20, r18
    153a:	55 0b       	sbc	r21, r21
    153c:	84 9f       	mul	r24, r20
    153e:	80 01       	movw	r16, r0
    1540:	85 9f       	mul	r24, r21
    1542:	10 0d       	add	r17, r0
    1544:	11 24       	eor	r1, r1
    1546:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <font_current>
    154a:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <font_current+0x1>
    154e:	e0 0f       	add	r30, r16
    1550:	f1 1f       	adc	r31, r17

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
    1552:	54 90       	lpm	r5, Z
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    1554:	99 85       	ldd	r25, Y+9	; 0x09
    1556:	89 2f       	mov	r24, r25
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
    155e:	8f 01       	movw	r16, r30
    1560:	0f 5f       	subi	r16, 0xFF	; 255
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
    1564:	c4 2c       	mov	r12, r4
    1566:	d1 2c       	mov	r13, r1
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1568:	f8 85       	ldd	r31, Y+8	; 0x08
    156a:	ef 2f       	mov	r30, r31
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	ff 83       	std	Y+7, r31	; 0x07
    1570:	ee 83       	std	Y+6, r30	; 0x06
    1572:	ca 82       	std	Y+2, r12	; 0x02
		for ( i = 0; i < var_width; i++ ) {
    1574:	8c 2d       	mov	r24, r12
    1576:	84 19       	sub	r24, r4
    1578:	85 15       	cp	r24, r5
    157a:	08 f0       	brcs	.+2      	; 0x157e <glcd_draw_char_xy+0xc4>
    157c:	4c c0       	rjmp	.+152    	; 0x1616 <glcd_draw_char_xy+0x15c>
    157e:	58 01       	movw	r10, r16
    1580:	91 2c       	mov	r9, r1
    1582:	81 2c       	mov	r8, r1
			for ( j = 0; j < bytes_high; j++ ) {
    1584:	19 82       	std	Y+1, r1	; 0x01
    1586:	ab c0       	rjmp	.+342    	; 0x16de <glcd_draw_char_xy+0x224>
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    1588:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <font_current+0x4>
    158c:	93 01       	movw	r18, r6
    158e:	28 1b       	sub	r18, r24
    1590:	31 09       	sbc	r19, r1
    1592:	52 9e       	mul	r5, r18
    1594:	80 01       	movw	r16, r0
    1596:	53 9e       	mul	r5, r19
    1598:	10 0d       	add	r17, r0
    159a:	11 24       	eor	r1, r1
    159c:	39 81       	ldd	r19, Y+1	; 0x01
    159e:	83 2e       	mov	r8, r19
    15a0:	91 2c       	mov	r9, r1
    15a2:	08 0d       	add	r16, r8
    15a4:	19 1d       	adc	r17, r9
    15a6:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <font_current>
    15aa:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <font_current+0x1>
    15ae:	e0 0f       	add	r30, r16
    15b0:	f1 1f       	adc	r31, r17
    15b2:	e4 91       	lpm	r30, Z
    15b4:	f1 2c       	mov	r15, r1
    15b6:	e1 2c       	mov	r14, r1
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    15b8:	8c 0c       	add	r8, r12
    15ba:	9d 1c       	adc	r9, r13
				if (dat & (1<<j)) {
    15bc:	0e 2f       	mov	r16, r30
    15be:	10 e0       	ldi	r17, 0x00	; 0
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    15c0:	44 e5       	ldi	r20, 0x54	; 84
    15c2:	84 16       	cp	r8, r20
    15c4:	91 04       	cpc	r9, r1
    15c6:	0c f0       	brlt	.+2      	; 0x15ca <glcd_draw_char_xy+0x110>
    15c8:	2b c1       	rjmp	.+598    	; 0x1820 <glcd_draw_char_xy+0x366>
    15ca:	c5 01       	movw	r24, r10
    15cc:	8e 0d       	add	r24, r14
    15ce:	9f 1d       	adc	r25, r15
    15d0:	c0 97       	sbiw	r24, 0x30	; 48
    15d2:	08 f0       	brcs	.+2      	; 0x15d6 <glcd_draw_char_xy+0x11c>
    15d4:	25 c1       	rjmp	.+586    	; 0x1820 <glcd_draw_char_xy+0x366>
				if (dat & (1<<j)) {
    15d6:	68 85       	ldd	r22, Y+8	; 0x08
    15d8:	6e 0d       	add	r22, r14
    15da:	c8 01       	movw	r24, r16
    15dc:	0e 2c       	mov	r0, r14
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <glcd_draw_char_xy+0x12a>
    15e0:	95 95       	asr	r25
    15e2:	87 95       	ror	r24
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <glcd_draw_char_xy+0x126>
					glcd_set_pixel(x+i,y+j,BLACK);
    15e8:	41 e0       	ldi	r20, 0x01	; 1
				if (dat & (1<<j)) {
    15ea:	80 ff       	sbrs	r24, 0
					glcd_set_pixel(x+i,y+j,WHITE);
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	84 2d       	mov	r24, r4
    15f0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
    15f4:	5f ef       	ldi	r21, 0xFF	; 255
    15f6:	e5 1a       	sub	r14, r21
    15f8:	f5 0a       	sbc	r15, r21
			for (j = 0; j < 8; j++) {
    15fa:	88 e0       	ldi	r24, 0x08	; 8
    15fc:	e8 16       	cp	r14, r24
    15fe:	f1 04       	cpc	r15, r1
    1600:	f9 f6       	brne	.-66     	; 0x15c0 <glcd_draw_char_xy+0x106>
		for ( i = 0; i < font_current.width; i++ ) {
    1602:	99 81       	ldd	r25, Y+1	; 0x01
    1604:	9f 5f       	subi	r25, 0xFF	; 255
    1606:	99 83       	std	Y+1, r25	; 0x01
    1608:	43 94       	inc	r4
    160a:	50 90 95 03 	lds	r5, 0x0395	; 0x800395 <font_current+0x2>
    160e:	f9 81       	ldd	r31, Y+1	; 0x01
    1610:	f5 15       	cp	r31, r5
    1612:	08 f4       	brcc	.+2      	; 0x1616 <glcd_draw_char_xy+0x15c>
    1614:	b9 cf       	rjmp	.-142    	; 0x1588 <glcd_draw_char_xy+0xce>
		/* Don't recognise the font table */
		return 0;
		
	}

}
    1616:	85 2d       	mov	r24, r5
    1618:	29 96       	adiw	r28, 0x09	; 9
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	ff 90       	pop	r15
    162e:	ef 90       	pop	r14
    1630:	df 90       	pop	r13
    1632:	cf 90       	pop	r12
    1634:	bf 90       	pop	r11
    1636:	af 90       	pop	r10
    1638:	9f 90       	pop	r9
    163a:	8f 90       	pop	r8
    163c:	7f 90       	pop	r7
    163e:	6f 90       	pop	r6
    1640:	5f 90       	pop	r5
    1642:	4f 90       	pop	r4
    1644:	3f 90       	pop	r3
    1646:	2f 90       	pop	r2
    1648:	08 95       	ret
		for ( i = 0; i < font_current.width; i++ ) {
    164a:	19 82       	std	Y+1, r1	; 0x01
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    164c:	64 2e       	mov	r6, r20
    164e:	71 2c       	mov	r7, r1
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1650:	c4 2c       	mov	r12, r4
    1652:	d1 2c       	mov	r13, r1
    1654:	e8 85       	ldd	r30, Y+8	; 0x08
    1656:	ae 2e       	mov	r10, r30
    1658:	b1 2c       	mov	r11, r1
    165a:	d7 cf       	rjmp	.-82     	; 0x160a <glcd_draw_char_xy+0x150>
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
    165c:	f5 01       	movw	r30, r10
    165e:	64 90       	lpm	r6, Z
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1660:	2e 80       	ldd	r2, Y+6	; 0x06
    1662:	3f 80       	ldd	r3, Y+7	; 0x07
    1664:	28 0c       	add	r2, r8
    1666:	39 1c       	adc	r3, r9
    1668:	f8 85       	ldd	r31, Y+8	; 0x08
    166a:	f8 0d       	add	r31, r8
    166c:	fd 83       	std	Y+5, r31	; 0x05
    166e:	f1 2c       	mov	r15, r1
    1670:	e1 2c       	mov	r14, r1
					if (dat & (1<<bit)) {
    1672:	71 2c       	mov	r7, r1
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1674:	24 e5       	ldi	r18, 0x54	; 84
    1676:	c2 16       	cp	r12, r18
    1678:	d1 04       	cpc	r13, r1
    167a:	0c f0       	brlt	.+2      	; 0x167e <glcd_draw_char_xy+0x1c4>
    167c:	d1 c0       	rjmp	.+418    	; 0x1820 <glcd_draw_char_xy+0x366>
    167e:	91 01       	movw	r18, r2
    1680:	2e 0d       	add	r18, r14
    1682:	3f 1d       	adc	r19, r15
    1684:	20 33       	cpi	r18, 0x30	; 48
    1686:	31 05       	cpc	r19, r1
    1688:	08 f0       	brcs	.+2      	; 0x168c <glcd_draw_char_xy+0x1d2>
    168a:	ca c0       	rjmp	.+404    	; 0x1820 <glcd_draw_char_xy+0x366>
					if ((j*8 + bit) >= font_current.height) {
    168c:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <font_current+0x3>
    1690:	94 01       	movw	r18, r8
    1692:	2e 0d       	add	r18, r14
    1694:	3f 1d       	adc	r19, r15
    1696:	92 17       	cp	r25, r18
    1698:	13 06       	cpc	r1, r19
    169a:	89 f0       	breq	.+34     	; 0x16be <glcd_draw_char_xy+0x204>
    169c:	84 f0       	brlt	.+32     	; 0x16be <glcd_draw_char_xy+0x204>
					if (dat & (1<<bit)) {
    169e:	6d 81       	ldd	r22, Y+5	; 0x05
    16a0:	6e 0d       	add	r22, r14
    16a2:	a3 01       	movw	r20, r6
    16a4:	0e 2c       	mov	r0, r14
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <glcd_draw_char_xy+0x1f2>
    16a8:	55 95       	asr	r21
    16aa:	47 95       	ror	r20
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <glcd_draw_char_xy+0x1ee>
    16b0:	ca 01       	movw	r24, r20
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    16b2:	41 e0       	ldi	r20, 0x01	; 1
					if (dat & (1<<bit)) {
    16b4:	80 ff       	sbrs	r24, 0
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
    16be:	5f ef       	ldi	r21, 0xFF	; 255
    16c0:	e5 1a       	sub	r14, r21
    16c2:	f5 0a       	sbc	r15, r21
				for (bit = 0; bit < 8; bit++) {
    16c4:	88 e0       	ldi	r24, 0x08	; 8
    16c6:	e8 16       	cp	r14, r24
    16c8:	f1 04       	cpc	r15, r1
    16ca:	a1 f6       	brne	.-88     	; 0x1674 <glcd_draw_char_xy+0x1ba>
			for ( j = 0; j < bytes_high; j++ ) {
    16cc:	99 81       	ldd	r25, Y+1	; 0x01
    16ce:	9f 5f       	subi	r25, 0xFF	; 255
    16d0:	99 83       	std	Y+1, r25	; 0x01
    16d2:	e8 e0       	ldi	r30, 0x08	; 8
    16d4:	8e 0e       	add	r8, r30
    16d6:	91 1c       	adc	r9, r1
    16d8:	ff ef       	ldi	r31, 0xFF	; 255
    16da:	af 1a       	sub	r10, r31
    16dc:	bf 0a       	sbc	r11, r31
    16de:	29 85       	ldd	r18, Y+9	; 0x09
    16e0:	39 81       	ldd	r19, Y+1	; 0x01
    16e2:	23 13       	cpse	r18, r19
    16e4:	bb cf       	rjmp	.-138    	; 0x165c <glcd_draw_char_xy+0x1a2>
    16e6:	4b 81       	ldd	r20, Y+3	; 0x03
    16e8:	5c 81       	ldd	r21, Y+4	; 0x04
    16ea:	04 0f       	add	r16, r20
    16ec:	15 1f       	adc	r17, r21
    16ee:	5f ef       	ldi	r21, 0xFF	; 255
    16f0:	c5 1a       	sub	r12, r21
    16f2:	d5 0a       	sbc	r13, r21
    16f4:	3e cf       	rjmp	.-388    	; 0x1572 <glcd_draw_char_xy+0xb8>
	} else if (font_current.table_type == GLCD_UTILS) {
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	09 f0       	breq	.+2      	; 0x16fc <glcd_draw_char_xy+0x242>
    16fa:	92 c0       	rjmp	.+292    	; 0x1820 <glcd_draw_char_xy+0x366>
		bytes_high = font_current.height / 8 + 1;
    16fc:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <font_current+0x3>
    1700:	86 95       	lsr	r24
    1702:	86 95       	lsr	r24
    1704:	86 95       	lsr	r24
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	98 0f       	add	r25, r24
    170a:	99 83       	std	Y+1, r25	; 0x01
		bytes_per_char = font_current.width * bytes_high;
    170c:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <font_current+0x2>
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    1710:	42 1b       	sub	r20, r18
    1712:	55 0b       	sbc	r21, r21
		bytes_per_char = font_current.width * bytes_high;
    1714:	e9 81       	ldd	r30, Y+1	; 0x01
    1716:	9e 9f       	mul	r25, r30
    1718:	20 2d       	mov	r18, r0
    171a:	11 24       	eor	r1, r1
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    171c:	24 9f       	mul	r18, r20
    171e:	30 01       	movw	r6, r0
    1720:	25 9f       	mul	r18, r21
    1722:	70 0c       	add	r7, r0
    1724:	11 24       	eor	r1, r1
    1726:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <font_current>
    172a:	30 91 94 03 	lds	r19, 0x0394	; 0x800394 <font_current+0x1>
    172e:	62 0e       	add	r6, r18
    1730:	73 1e       	adc	r7, r19
		var_width = font_current.width;
    1732:	59 2e       	mov	r5, r25
				offset = (font_current.width - 1 - n) * row;
    1734:	49 2f       	mov	r20, r25
    1736:	41 50       	subi	r20, 0x01	; 1
    1738:	55 0b       	sbc	r21, r21
    173a:	9a 01       	movw	r18, r20
    173c:	49 2f       	mov	r20, r25
    173e:	45 19       	sub	r20, r5
    1740:	f9 01       	movw	r30, r18
    1742:	e4 1b       	sub	r30, r20
    1744:	f1 09       	sbc	r31, r1
    1746:	8e 9f       	mul	r24, r30
    1748:	e0 2d       	mov	r30, r0
    174a:	11 24       	eor	r1, r1
				max_byte = *(p + offset);
    174c:	e6 0d       	add	r30, r6
    174e:	f7 2d       	mov	r31, r7
    1750:	f1 1d       	adc	r31, r1
			if (max_byte == 0) {
    1752:	40 81       	ld	r20, Z
    1754:	41 11       	cpse	r20, r1
    1756:	03 c0       	rjmp	.+6      	; 0x175e <glcd_draw_char_xy+0x2a4>
				var_width--;
    1758:	5a 94       	dec	r5
				if (var_width == 0) {
    175a:	51 10       	cpse	r5, r1
    175c:	ef cf       	rjmp	.-34     	; 0x173c <glcd_draw_char_xy+0x282>
		for ( j = 0; j < bytes_high; j++ ) {
    175e:	98 85       	ldd	r25, Y+8	; 0x08
    1760:	89 2f       	mov	r24, r25
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 83       	std	Y+4, r25	; 0x04
    1766:	8b 83       	std	Y+3, r24	; 0x03
				dat = pgm_read_byte( p + j*font_current.width + i );
    1768:	91 2c       	mov	r9, r1
    176a:	81 2c       	mov	r8, r1
    176c:	b1 2c       	mov	r11, r1
    176e:	a1 2c       	mov	r10, r1
    1770:	2b 81       	ldd	r18, Y+3	; 0x03
    1772:	2a 83       	std	Y+2, r18	; 0x02
    1774:	e4 2c       	mov	r14, r4
    1776:	f1 2c       	mov	r15, r1
    1778:	d1 2c       	mov	r13, r1
    177a:	c1 2c       	mov	r12, r1
    177c:	3e c0       	rjmp	.+124    	; 0x17fa <glcd_draw_char_xy+0x340>
    177e:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <font_current+0x2>
    1782:	8a 9d       	mul	r24, r10
    1784:	f0 01       	movw	r30, r0
    1786:	8b 9d       	mul	r24, r11
    1788:	f0 0d       	add	r31, r0
    178a:	11 24       	eor	r1, r1
    178c:	ec 0d       	add	r30, r12
    178e:	fd 1d       	adc	r31, r13
    1790:	e6 0d       	add	r30, r6
    1792:	f7 1d       	adc	r31, r7
    1794:	e4 91       	lpm	r30, Z
    1796:	10 e0       	ldi	r17, 0x00	; 0
    1798:	00 e0       	ldi	r16, 0x00	; 0
					if (dat & (1<<bit)) {
    179a:	2e 2e       	mov	r2, r30
    179c:	31 2c       	mov	r3, r1
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    179e:	e4 e5       	ldi	r30, 0x54	; 84
    17a0:	ee 16       	cp	r14, r30
    17a2:	f1 04       	cpc	r15, r1
    17a4:	e8 f5       	brcc	.+122    	; 0x1820 <glcd_draw_char_xy+0x366>
    17a6:	2b 81       	ldd	r18, Y+3	; 0x03
    17a8:	3c 81       	ldd	r19, Y+4	; 0x04
    17aa:	20 0f       	add	r18, r16
    17ac:	31 1f       	adc	r19, r17
    17ae:	20 33       	cpi	r18, 0x30	; 48
    17b0:	31 05       	cpc	r19, r1
    17b2:	b4 f5       	brge	.+108    	; 0x1820 <glcd_draw_char_xy+0x366>
					if ((j*8 + bit) >= font_current.height) {
    17b4:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <font_current+0x3>
    17b8:	94 01       	movw	r18, r8
    17ba:	20 0f       	add	r18, r16
    17bc:	31 1f       	adc	r19, r17
    17be:	92 17       	cp	r25, r18
    17c0:	13 06       	cpc	r1, r19
    17c2:	81 f0       	breq	.+32     	; 0x17e4 <glcd_draw_char_xy+0x32a>
    17c4:	7c f0       	brlt	.+30     	; 0x17e4 <glcd_draw_char_xy+0x32a>
					if (dat & (1<<bit)) {
    17c6:	6a 81       	ldd	r22, Y+2	; 0x02
    17c8:	60 0f       	add	r22, r16
    17ca:	91 01       	movw	r18, r2
    17cc:	00 2e       	mov	r0, r16
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <glcd_draw_char_xy+0x31a>
    17d0:	35 95       	asr	r19
    17d2:	27 95       	ror	r18
    17d4:	0a 94       	dec	r0
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <glcd_draw_char_xy+0x316>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    17d8:	41 e0       	ldi	r20, 0x01	; 1
					if (dat & (1<<bit)) {
    17da:	20 ff       	sbrs	r18, 0
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	8e 2d       	mov	r24, r14
    17e0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
    17e4:	0f 5f       	subi	r16, 0xFF	; 255
    17e6:	1f 4f       	sbci	r17, 0xFF	; 255
				for (bit = 0; bit < 8; bit++) {
    17e8:	08 30       	cpi	r16, 0x08	; 8
    17ea:	11 05       	cpc	r17, r1
    17ec:	c1 f6       	brne	.-80     	; 0x179e <glcd_draw_char_xy+0x2e4>
    17ee:	3f ef       	ldi	r19, 0xFF	; 255
    17f0:	c3 1a       	sub	r12, r19
    17f2:	d3 0a       	sbc	r13, r19
    17f4:	4f ef       	ldi	r20, 0xFF	; 255
    17f6:	e4 1a       	sub	r14, r20
    17f8:	f4 0a       	sbc	r15, r20
			for ( i = 0; i < var_width; i++ ) {
    17fa:	c5 14       	cp	r12, r5
    17fc:	08 f4       	brcc	.+2      	; 0x1800 <glcd_draw_char_xy+0x346>
    17fe:	bf cf       	rjmp	.-130    	; 0x177e <glcd_draw_char_xy+0x2c4>
    1800:	5f ef       	ldi	r21, 0xFF	; 255
    1802:	a5 1a       	sub	r10, r21
    1804:	b5 0a       	sbc	r11, r21
    1806:	88 e0       	ldi	r24, 0x08	; 8
    1808:	88 0e       	add	r8, r24
    180a:	91 1c       	adc	r9, r1
    180c:	eb 81       	ldd	r30, Y+3	; 0x03
    180e:	fc 81       	ldd	r31, Y+4	; 0x04
    1810:	38 96       	adiw	r30, 0x08	; 8
    1812:	fc 83       	std	Y+4, r31	; 0x04
    1814:	eb 83       	std	Y+3, r30	; 0x03
		for ( j = 0; j < bytes_high; j++ ) {
    1816:	f9 81       	ldd	r31, Y+1	; 0x01
    1818:	af 16       	cp	r10, r31
    181a:	08 f4       	brcc	.+2      	; 0x181e <glcd_draw_char_xy+0x364>
    181c:	a9 cf       	rjmp	.-174    	; 0x1770 <glcd_draw_char_xy+0x2b6>
    181e:	fb ce       	rjmp	.-522    	; 0x1616 <glcd_draw_char_xy+0x15c>
					return 0;
    1820:	51 2c       	mov	r5, r1
    1822:	f9 ce       	rjmp	.-526    	; 0x1616 <glcd_draw_char_xy+0x15c>

00001824 <glcd_draw_string_xy>:

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	18 2f       	mov	r17, r24
    182e:	06 2f       	mov	r16, r22
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    1830:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <font_current+0x3>
    1834:	8f e2       	ldi	r24, 0x2F	; 47
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	82 1b       	sub	r24, r18
    183a:	91 09       	sbc	r25, r1
    183c:	ea 01       	movw	r28, r20
    183e:	68 17       	cp	r22, r24
    1840:	19 06       	cpc	r1, r25
    1842:	61 f0       	breq	.+24     	; 0x185c <glcd_draw_string_xy+0x38>
    1844:	5c f0       	brlt	.+22     	; 0x185c <glcd_draw_string_xy+0x38>
	while (*c) {
		width = glcd_draw_char_xy(x,y,*c);
		x += (width + 1);
		c++;
	}		
}
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	08 95       	ret
		width = glcd_draw_char_xy(x,y,*c);
    1850:	60 2f       	mov	r22, r16
    1852:	81 2f       	mov	r24, r17
    1854:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <glcd_draw_char_xy>
		x += (width + 1);
    1858:	8f 5f       	subi	r24, 0xFF	; 255
    185a:	18 0f       	add	r17, r24
	while (*c) {
    185c:	49 91       	ld	r20, Y+
    185e:	41 11       	cpse	r20, r1
    1860:	f7 cf       	rjmp	.-18     	; 0x1850 <glcd_draw_string_xy+0x2c>
    1862:	f1 cf       	rjmp	.-30     	; 0x1846 <glcd_draw_string_xy+0x22>

00001864 <glcd_draw_string_xy_P>:

void glcd_draw_string_xy_P(uint8_t x, uint8_t y, const char *str)
{
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	18 2f       	mov	r17, r24
    186e:	06 2f       	mov	r16, r22
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    1870:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <font_current+0x3>
    1874:	8f e2       	ldi	r24, 0x2F	; 47
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	82 1b       	sub	r24, r18
    187a:	91 09       	sbc	r25, r1
    187c:	68 17       	cp	r22, r24
    187e:	19 06       	cpc	r1, r25
    1880:	09 f0       	breq	.+2      	; 0x1884 <glcd_draw_string_xy_P+0x20>
    1882:	6c f4       	brge	.+26     	; 0x189e <glcd_draw_string_xy_P+0x3a>
    1884:	ea 01       	movw	r28, r20
		return;
	}

	while (1) {
#if defined(GLCD_DEVICE_AVR8)		
		char c = pgm_read_byte(str++);
    1886:	fe 01       	movw	r30, r28
    1888:	44 91       	lpm	r20, Z
#else
		char c = *(str++);
#endif
		if (!c)
    188a:	21 96       	adiw	r28, 0x01	; 1
    188c:	44 23       	and	r20, r20
    188e:	39 f0       	breq	.+14     	; 0x189e <glcd_draw_string_xy_P+0x3a>
			return;
					
		width = glcd_draw_char_xy(x,y,c);
    1890:	60 2f       	mov	r22, r16
    1892:	81 2f       	mov	r24, r17
    1894:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <glcd_draw_char_xy>
		x += (width + 1);
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	18 0f       	add	r17, r24
	while (1) {
    189c:	f4 cf       	rjmp	.-24     	; 0x1886 <glcd_draw_string_xy_P+0x22>
		c++;
	}		
}
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <glcd_set_pixel>:
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
    18a8:	84 35       	cpi	r24, 0x54	; 84
    18aa:	18 f5       	brcc	.+70     	; 0x18f2 <glcd_set_pixel+0x4a>
    18ac:	60 33       	cpi	r22, 0x30	; 48
    18ae:	08 f5       	brcc	.+66     	; 0x18f2 <glcd_set_pixel+0x4a>
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
    18b0:	e8 2f       	mov	r30, r24
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	96 2f       	mov	r25, r22
    18b6:	96 95       	lsr	r25
    18b8:	96 95       	lsr	r25
    18ba:	96 95       	lsr	r25
    18bc:	24 e5       	ldi	r18, 0x54	; 84
    18be:	92 9f       	mul	r25, r18
    18c0:	e0 0d       	add	r30, r0
    18c2:	f1 1d       	adc	r31, r1
    18c4:	11 24       	eor	r1, r1
    18c6:	e9 56       	subi	r30, 0x69	; 105
    18c8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ca:	90 81       	ld	r25, Z
    18cc:	56 2f       	mov	r21, r22
    18ce:	57 70       	andi	r21, 0x07	; 7
    18d0:	21 e0       	ldi	r18, 0x01	; 1
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <glcd_set_pixel+0x30>
    18d6:	22 0f       	add	r18, r18
    18d8:	5a 95       	dec	r21
    18da:	ea f7       	brpl	.-6      	; 0x18d6 <glcd_set_pixel+0x2e>
    18dc:	44 23       	and	r20, r20
    18de:	31 f0       	breq	.+12     	; 0x18ec <glcd_set_pixel+0x44>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
    18e0:	29 2b       	or	r18, r25
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
    18e2:	20 83       	st	Z, r18
	}

	glcd_update_bbox(x,y,x,y);
    18e4:	26 2f       	mov	r18, r22
    18e6:	48 2f       	mov	r20, r24
    18e8:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <glcd_update_bbox>
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
    18ec:	20 95       	com	r18
    18ee:	29 23       	and	r18, r25
    18f0:	f8 cf       	rjmp	.-16     	; 0x18e2 <glcd_set_pixel+0x3a>
}
    18f2:	08 95       	ret

000018f4 <glcd_get_pixel>:

/* Based on PCD8544 library by Limor Fried */
uint8_t glcd_get_pixel(uint8_t x, uint8_t y) {
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    18f4:	84 35       	cpi	r24, 0x54	; 84
    18f6:	c8 f4       	brcc	.+50     	; 0x192a <glcd_get_pixel+0x36>
    18f8:	60 33       	cpi	r22, 0x30	; 48
    18fa:	b8 f4       	brcc	.+46     	; 0x192a <glcd_get_pixel+0x36>
		return 0;
	}
	
	if ( glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] & ( 1 << (y%8)) ) {
    18fc:	96 2f       	mov	r25, r22
    18fe:	96 95       	lsr	r25
    1900:	96 95       	lsr	r25
    1902:	96 95       	lsr	r25
    1904:	44 e5       	ldi	r20, 0x54	; 84
    1906:	94 9f       	mul	r25, r20
    1908:	90 01       	movw	r18, r0
    190a:	11 24       	eor	r1, r1
    190c:	29 56       	subi	r18, 0x69	; 105
    190e:	3e 4f       	sbci	r19, 0xFE	; 254
    1910:	28 0f       	add	r18, r24
    1912:	31 1d       	adc	r19, r1
    1914:	f9 01       	movw	r30, r18
    1916:	80 81       	ld	r24, Z
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	67 70       	andi	r22, 0x07	; 7
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <glcd_get_pixel+0x2e>
    191e:	95 95       	asr	r25
    1920:	87 95       	ror	r24
    1922:	6a 95       	dec	r22
    1924:	e2 f7       	brpl	.-8      	; 0x191e <glcd_get_pixel+0x2a>
    1926:	81 70       	andi	r24, 0x01	; 1
    1928:	08 95       	ret
		return 0;
    192a:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	} else {
		return 0;
	}
}
    192c:	08 95       	ret

0000192e <glcd_invert_pixel>:

void glcd_invert_pixel(uint8_t x, uint8_t y) {
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	c8 2f       	mov	r28, r24
    1934:	d6 2f       	mov	r29, r22
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    1936:	84 35       	cpi	r24, 0x54	; 84
    1938:	e8 f4       	brcc	.+58     	; 0x1974 <glcd_invert_pixel+0x46>
    193a:	60 33       	cpi	r22, 0x30	; 48
    193c:	d8 f4       	brcc	.+54     	; 0x1974 <glcd_invert_pixel+0x46>
		return;
	}
	glcd_update_bbox(x,y,x,y);
    193e:	26 2f       	mov	r18, r22
    1940:	48 2f       	mov	r20, r24
    1942:	0e 94 a1 07 	call	0xf42	; 0xf42 <glcd_update_bbox>
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
    1946:	8d 2f       	mov	r24, r29
    1948:	86 95       	lsr	r24
    194a:	86 95       	lsr	r24
    194c:	86 95       	lsr	r24
    194e:	ec 2f       	mov	r30, r28
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	94 e5       	ldi	r25, 0x54	; 84
    1954:	89 9f       	mul	r24, r25
    1956:	e0 0d       	add	r30, r0
    1958:	f1 1d       	adc	r31, r1
    195a:	11 24       	eor	r1, r1
    195c:	e9 56       	subi	r30, 0x69	; 105
    195e:	fe 4f       	sbci	r31, 0xFE	; 254
    1960:	d7 70       	andi	r29, 0x07	; 7
    1962:	21 e0       	ldi	r18, 0x01	; 1
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	01 c0       	rjmp	.+2      	; 0x196a <glcd_invert_pixel+0x3c>
    1968:	22 0f       	add	r18, r18
    196a:	da 95       	dec	r29
    196c:	ea f7       	brpl	.-6      	; 0x1968 <glcd_invert_pixel+0x3a>
    196e:	80 81       	ld	r24, Z
    1970:	82 27       	eor	r24, r18
    1972:	80 83       	st	Z, r24
}
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <glcd_draw_line>:

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
    197a:	8f 92       	push	r8
    197c:	9f 92       	push	r9
    197e:	af 92       	push	r10
    1980:	bf 92       	push	r11
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	c8 2f       	mov	r28, r24
    1994:	d6 2f       	mov	r29, r22
    1996:	14 2f       	mov	r17, r20
    1998:	f2 2e       	mov	r15, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    199a:	26 1b       	sub	r18, r22
    199c:	33 0b       	sbc	r19, r19
    199e:	69 01       	movw	r12, r18
    19a0:	37 ff       	sbrs	r19, 7
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <glcd_draw_line+0x30>
    19a4:	d1 94       	neg	r13
    19a6:	c1 94       	neg	r12
    19a8:	d1 08       	sbc	r13, r1
    19aa:	81 2f       	mov	r24, r17
    19ac:	8c 1b       	sub	r24, r28
    19ae:	99 0b       	sbc	r25, r25
    19b0:	5c 01       	movw	r10, r24
    19b2:	97 ff       	sbrs	r25, 7
    19b4:	03 c0       	rjmp	.+6      	; 0x19bc <glcd_draw_line+0x42>
    19b6:	b1 94       	neg	r11
    19b8:	a1 94       	neg	r10
    19ba:	b1 08       	sbc	r11, r1
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
    19bc:	ac 14       	cp	r10, r12
    19be:	bd 04       	cpc	r11, r13
    19c0:	34 f4       	brge	.+12     	; 0x19ce <glcd_draw_line+0x54>
    19c2:	81 2f       	mov	r24, r17
		swap(x0, y0);
		swap(x1, y1);
    19c4:	1f 2d       	mov	r17, r15
    19c6:	f8 2e       	mov	r15, r24
	if (steep) {
    19c8:	8c 2f       	mov	r24, r28
		swap(x0, y0);
    19ca:	cd 2f       	mov	r28, r29
    19cc:	d8 2f       	mov	r29, r24
	}
	
	if (x0 > x1) {
    19ce:	1c 17       	cp	r17, r28
    19d0:	30 f4       	brcc	.+12     	; 0x19de <glcd_draw_line+0x64>
    19d2:	8d 2f       	mov	r24, r29
		swap(x0, x1);
		swap(y0, y1);
    19d4:	df 2d       	mov	r29, r15
    19d6:	f8 2e       	mov	r15, r24
	if (x0 > x1) {
    19d8:	8c 2f       	mov	r24, r28
    19da:	c1 2f       	mov	r28, r17
    19dc:	18 2f       	mov	r17, r24
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
    19de:	2f 2d       	mov	r18, r15
    19e0:	41 2f       	mov	r20, r17
    19e2:	6d 2f       	mov	r22, r29
    19e4:	8c 2f       	mov	r24, r28
    19e6:	0e 94 a1 07 	call	0xf42	; 0xf42 <glcd_update_bbox>

	dx = x1 - x0;
    19ea:	81 2e       	mov	r8, r17
    19ec:	8c 1a       	sub	r8, r28
	dy = abs(y1 - y0);
    19ee:	2f 2d       	mov	r18, r15
    19f0:	2d 1b       	sub	r18, r29
    19f2:	33 0b       	sbc	r19, r19
    19f4:	c9 01       	movw	r24, r18
    19f6:	37 ff       	sbrs	r19, 7
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <glcd_draw_line+0x86>
    19fa:	91 95       	neg	r25
    19fc:	81 95       	neg	r24
    19fe:	91 09       	sbc	r25, r1
    1a00:	e8 2e       	mov	r14, r24
	
	err = dx / 2;
    1a02:	98 2c       	mov	r9, r8
    1a04:	96 94       	lsr	r9
	
	if (y0 < y1) {
    1a06:	df 15       	cp	r29, r15
    1a08:	10 f1       	brcs	.+68     	; 0x1a4e <glcd_draw_line+0xd4>
		ystep = 1;
	} else {
		ystep = -1;
    1a0a:	ff 24       	eor	r15, r15
    1a0c:	fa 94       	dec	r15
	}
	
	for (; x0<=x1; x0++) {
    1a0e:	1c 17       	cp	r17, r28
    1a10:	68 f4       	brcc	.+26     	; 0x1a2c <glcd_draw_line+0xb2>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	cf 90       	pop	r12
    1a22:	bf 90       	pop	r11
    1a24:	af 90       	pop	r10
    1a26:	9f 90       	pop	r9
    1a28:	8f 90       	pop	r8
    1a2a:	08 95       	ret
			glcd_set_pixel(y0, x0, color);
    1a2c:	40 2f       	mov	r20, r16
    1a2e:	6c 2f       	mov	r22, r28
    1a30:	8d 2f       	mov	r24, r29
		if (steep) {
    1a32:	ac 14       	cp	r10, r12
    1a34:	bd 04       	cpc	r11, r13
    1a36:	14 f0       	brlt	.+4      	; 0x1a3c <glcd_draw_line+0xc2>
			glcd_set_pixel(x0, y0, color);
    1a38:	6d 2f       	mov	r22, r29
    1a3a:	8c 2f       	mov	r24, r28
    1a3c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		err -= dy;
    1a40:	9e 18       	sub	r9, r14
		if (err < 0) {
    1a42:	97 fe       	sbrs	r9, 7
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <glcd_draw_line+0xd0>
			y0 += ystep;
    1a46:	df 0d       	add	r29, r15
			err += dx;
    1a48:	98 0c       	add	r9, r8
	for (; x0<=x1; x0++) {
    1a4a:	cf 5f       	subi	r28, 0xFF	; 255
    1a4c:	e0 cf       	rjmp	.-64     	; 0x1a0e <glcd_draw_line+0x94>
		ystep = 1;
    1a4e:	ff 24       	eor	r15, r15
    1a50:	f3 94       	inc	r15
    1a52:	dd cf       	rjmp	.-70     	; 0x1a0e <glcd_draw_line+0x94>

00001a54 <glcd_fill_rect>:

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1a54:	5f 92       	push	r5
    1a56:	6f 92       	push	r6
    1a58:	7f 92       	push	r7
    1a5a:	8f 92       	push	r8
    1a5c:	9f 92       	push	r9
    1a5e:	af 92       	push	r10
    1a60:	bf 92       	push	r11
    1a62:	cf 92       	push	r12
    1a64:	df 92       	push	r13
    1a66:	ef 92       	push	r14
    1a68:	ff 92       	push	r15
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	18 2f       	mov	r17, r24
    1a74:	56 2e       	mov	r5, r22
    1a76:	c4 2f       	mov	r28, r20
    1a78:	d2 2f       	mov	r29, r18
	int16_t i;
	for (i=x; i<x+w; i++) {
    1a7a:	e8 2e       	mov	r14, r24
    1a7c:	f1 2c       	mov	r15, r1
    1a7e:	57 01       	movw	r10, r14
    1a80:	a4 0e       	add	r10, r20
    1a82:	b1 1c       	adc	r11, r1
		int16_t j;
		for (j=y; j<y+h; j++) {
    1a84:	66 2e       	mov	r6, r22
    1a86:	71 2c       	mov	r7, r1
    1a88:	43 01       	movw	r8, r6
    1a8a:	82 0e       	add	r8, r18
    1a8c:	91 1c       	adc	r9, r1
	for (i=x; i<x+w; i++) {
    1a8e:	ea 14       	cp	r14, r10
    1a90:	fb 04       	cpc	r15, r11
    1a92:	cc f0       	brlt	.+50     	; 0x1ac6 <glcd_fill_rect+0x72>
			glcd_set_pixel(i, j, color);
		}
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1a94:	2f ef       	ldi	r18, 0xFF	; 255
    1a96:	2d 0f       	add	r18, r29
    1a98:	25 0d       	add	r18, r5
    1a9a:	4f ef       	ldi	r20, 0xFF	; 255
    1a9c:	4c 0f       	add	r20, r28
    1a9e:	41 0f       	add	r20, r17
    1aa0:	65 2d       	mov	r22, r5
    1aa2:	81 2f       	mov	r24, r17
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	cf 90       	pop	r12
    1ab4:	bf 90       	pop	r11
    1ab6:	af 90       	pop	r10
    1ab8:	9f 90       	pop	r9
    1aba:	8f 90       	pop	r8
    1abc:	7f 90       	pop	r7
    1abe:	6f 90       	pop	r6
    1ac0:	5f 90       	pop	r5
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1ac2:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <glcd_update_bbox>
		for (j=y; j<y+h; j++) {
    1ac6:	63 01       	movw	r12, r6
    1ac8:	c8 14       	cp	r12, r8
    1aca:	d9 04       	cpc	r13, r9
    1acc:	24 f0       	brlt	.+8      	; 0x1ad6 <glcd_fill_rect+0x82>
	for (i=x; i<x+w; i++) {
    1ace:	8f ef       	ldi	r24, 0xFF	; 255
    1ad0:	e8 1a       	sub	r14, r24
    1ad2:	f8 0a       	sbc	r15, r24
    1ad4:	dc cf       	rjmp	.-72     	; 0x1a8e <glcd_fill_rect+0x3a>
			glcd_set_pixel(i, j, color);
    1ad6:	40 2f       	mov	r20, r16
    1ad8:	6c 2d       	mov	r22, r12
    1ada:	8e 2d       	mov	r24, r14
    1adc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		for (j=y; j<y+h; j++) {
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	c8 1a       	sub	r12, r24
    1ae4:	d8 0a       	sbc	r13, r24
    1ae6:	f0 cf       	rjmp	.-32     	; 0x1ac8 <glcd_fill_rect+0x74>

00001ae8 <glcd_draw_rect>:

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1ae8:	8f 92       	push	r8
    1aea:	9f 92       	push	r9
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	df 92       	push	r13
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	d8 2f       	mov	r29, r24
    1b00:	16 2f       	mov	r17, r22
    1b02:	c4 2f       	mov	r28, r20
    1b04:	a2 2e       	mov	r10, r18
	int16_t i;
	for (i=x; i<x+w; i++) {
    1b06:	e8 2e       	mov	r14, r24
    1b08:	f1 2c       	mov	r15, r1
    1b0a:	dd 24       	eor	r13, r13
    1b0c:	da 94       	dec	r13
    1b0e:	d2 0e       	add	r13, r18
    1b10:	d6 0e       	add	r13, r22
    1b12:	47 01       	movw	r8, r14
    1b14:	84 0e       	add	r8, r20
    1b16:	91 1c       	adc	r9, r1
    1b18:	e8 14       	cp	r14, r8
    1b1a:	f9 04       	cpc	r15, r9
    1b1c:	dc f0       	brlt	.+54     	; 0x1b54 <glcd_draw_rect+0x6c>
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1b1e:	e1 2e       	mov	r14, r17
    1b20:	f1 2c       	mov	r15, r1
    1b22:	c1 50       	subi	r28, 0x01	; 1
    1b24:	cd 0f       	add	r28, r29
    1b26:	ae 0c       	add	r10, r14
    1b28:	bf 2c       	mov	r11, r15
    1b2a:	b1 1c       	adc	r11, r1
    1b2c:	ea 14       	cp	r14, r10
    1b2e:	fb 04       	cpc	r15, r11
    1b30:	fc f0       	brlt	.+62     	; 0x1b70 <glcd_draw_rect+0x88>
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1b32:	2d 2d       	mov	r18, r13
    1b34:	4c 2f       	mov	r20, r28
    1b36:	61 2f       	mov	r22, r17
    1b38:	8d 2f       	mov	r24, r29
}
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	df 90       	pop	r13
    1b48:	bf 90       	pop	r11
    1b4a:	af 90       	pop	r10
    1b4c:	9f 90       	pop	r9
    1b4e:	8f 90       	pop	r8
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1b50:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <glcd_update_bbox>
		glcd_set_pixel(i, y, color);
    1b54:	40 2f       	mov	r20, r16
    1b56:	61 2f       	mov	r22, r17
    1b58:	8e 2d       	mov	r24, r14
    1b5a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		glcd_set_pixel(i, y+h-1, color);
    1b5e:	40 2f       	mov	r20, r16
    1b60:	6d 2d       	mov	r22, r13
    1b62:	8e 2d       	mov	r24, r14
    1b64:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
	for (i=x; i<x+w; i++) {
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	e8 1a       	sub	r14, r24
    1b6c:	f8 0a       	sbc	r15, r24
    1b6e:	d4 cf       	rjmp	.-88     	; 0x1b18 <glcd_draw_rect+0x30>
		glcd_set_pixel(x, i, color);
    1b70:	40 2f       	mov	r20, r16
    1b72:	6e 2d       	mov	r22, r14
    1b74:	8d 2f       	mov	r24, r29
    1b76:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		glcd_set_pixel(x+w-1, i, color);
    1b7a:	40 2f       	mov	r20, r16
    1b7c:	6e 2d       	mov	r22, r14
    1b7e:	8c 2f       	mov	r24, r28
    1b80:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
	for (i=y; i<y+h; i++) {
    1b84:	8f ef       	ldi	r24, 0xFF	; 255
    1b86:	e8 1a       	sub	r14, r24
    1b88:	f8 0a       	sbc	r15, r24
    1b8a:	d0 cf       	rjmp	.-96     	; 0x1b2c <glcd_draw_rect+0x44>

00001b8c <glcd_draw_rect_thick>:

void glcd_draw_rect_thick(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t tx, uint8_t ty, uint8_t color)
{
    1b8c:	6f 92       	push	r6
    1b8e:	7f 92       	push	r7
    1b90:	8f 92       	push	r8
    1b92:	9f 92       	push	r9
    1b94:	af 92       	push	r10
    1b96:	bf 92       	push	r11
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	18 2f       	mov	r17, r24
    1baa:	f6 2e       	mov	r15, r22
    1bac:	c4 2f       	mov	r28, r20
    1bae:	d2 2f       	mov	r29, r18
	int16_t i, t;
	
	if (tx == 0) {
    1bb0:	01 11       	cpse	r16, r1
    1bb2:	01 c0       	rjmp	.+2      	; 0x1bb6 <glcd_draw_rect_thick+0x2a>
		tx = 1;
    1bb4:	01 e0       	ldi	r16, 0x01	; 1
	}

	if (ty == 0) {
    1bb6:	e1 10       	cpse	r14, r1
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <glcd_draw_rect_thick+0x32>
		ty = 1;
    1bba:	ee 24       	eor	r14, r14
    1bbc:	e3 94       	inc	r14
	}
	
	for (i=x; i<x+w; i++) {
    1bbe:	a1 2e       	mov	r10, r17
    1bc0:	b1 2c       	mov	r11, r1
    1bc2:	45 01       	movw	r8, r10
    1bc4:	8c 0e       	add	r8, r28
    1bc6:	91 1c       	adc	r9, r1
    1bc8:	66 24       	eor	r6, r6
    1bca:	6a 94       	dec	r6
    1bcc:	6d 0e       	add	r6, r29
    1bce:	ef 0c       	add	r14, r15
    1bd0:	a8 14       	cp	r10, r8
    1bd2:	b9 04       	cpc	r11, r9
    1bd4:	0c f1       	brlt	.+66     	; 0x1c18 <glcd_draw_rect_thick+0x8c>
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    1bd6:	af 2c       	mov	r10, r15
    1bd8:	b1 2c       	mov	r11, r1
    1bda:	45 01       	movw	r8, r10
    1bdc:	8d 0e       	add	r8, r29
    1bde:	91 1c       	adc	r9, r1
    1be0:	c1 50       	subi	r28, 0x01	; 1
    1be2:	01 0f       	add	r16, r17
    1be4:	a8 14       	cp	r10, r8
    1be6:	b9 04       	cpc	r11, r9
    1be8:	64 f1       	brlt	.+88     	; 0x1c42 <glcd_draw_rect_thick+0xb6>
		for (t=0; t<(tx); t++) {
			glcd_set_pixel(x+t, i, color);
			glcd_set_pixel(x+w-1-t, i, color);
		}
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1bea:	2f ef       	ldi	r18, 0xFF	; 255
    1bec:	2d 0f       	add	r18, r29
    1bee:	2f 0d       	add	r18, r15
    1bf0:	4c 2f       	mov	r20, r28
    1bf2:	41 0f       	add	r20, r17
    1bf4:	6f 2d       	mov	r22, r15
    1bf6:	81 2f       	mov	r24, r17
}
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	bf 90       	pop	r11
    1c0a:	af 90       	pop	r10
    1c0c:	9f 90       	pop	r9
    1c0e:	8f 90       	pop	r8
    1c10:	7f 90       	pop	r7
    1c12:	6f 90       	pop	r6
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1c14:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <glcd_update_bbox>
    1c18:	76 2c       	mov	r7, r6
    1c1a:	7f 0c       	add	r7, r15
	for (i=x; i<x+w; i++) {
    1c1c:	df 2c       	mov	r13, r15
			glcd_set_pixel(i, y+t, color);
    1c1e:	4c 2d       	mov	r20, r12
    1c20:	6d 2d       	mov	r22, r13
    1c22:	8a 2d       	mov	r24, r10
    1c24:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
    1c28:	4c 2d       	mov	r20, r12
    1c2a:	67 2d       	mov	r22, r7
    1c2c:	8a 2d       	mov	r24, r10
    1c2e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
    1c32:	d3 94       	inc	r13
    1c34:	7a 94       	dec	r7
		for (t=0; t<(ty); t++) {
    1c36:	de 10       	cpse	r13, r14
    1c38:	f2 cf       	rjmp	.-28     	; 0x1c1e <glcd_draw_rect_thick+0x92>
	for (i=x; i<x+w; i++) {
    1c3a:	8f ef       	ldi	r24, 0xFF	; 255
    1c3c:	a8 1a       	sub	r10, r24
    1c3e:	b8 0a       	sbc	r11, r24
    1c40:	c7 cf       	rjmp	.-114    	; 0x1bd0 <glcd_draw_rect_thick+0x44>
    1c42:	dc 2e       	mov	r13, r28
    1c44:	d1 0e       	add	r13, r17
	for (i=y; i<y+h; i++) {
    1c46:	e1 2e       	mov	r14, r17
			glcd_set_pixel(x+t, i, color);
    1c48:	4c 2d       	mov	r20, r12
    1c4a:	6a 2d       	mov	r22, r10
    1c4c:	8e 2d       	mov	r24, r14
    1c4e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
			glcd_set_pixel(x+w-1-t, i, color);
    1c52:	4c 2d       	mov	r20, r12
    1c54:	6a 2d       	mov	r22, r10
    1c56:	8d 2d       	mov	r24, r13
    1c58:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
    1c5c:	e3 94       	inc	r14
    1c5e:	da 94       	dec	r13
		for (t=0; t<(tx); t++) {
    1c60:	0e 11       	cpse	r16, r14
    1c62:	f2 cf       	rjmp	.-28     	; 0x1c48 <glcd_draw_rect_thick+0xbc>
	for (i=y; i<y+h; i++) {
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	a8 1a       	sub	r10, r24
    1c68:	b8 0a       	sbc	r11, r24
    1c6a:	bc cf       	rjmp	.-136    	; 0x1be4 <glcd_draw_rect_thick+0x58>

00001c6c <glcd_draw_rect_shadow>:

void glcd_draw_rect_shadow(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1c6c:	ef 92       	push	r14
    1c6e:	ff 92       	push	r15
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	e8 2e       	mov	r14, r24
    1c7a:	16 2f       	mov	r17, r22
    1c7c:	c4 2f       	mov	r28, r20
    1c7e:	d2 2f       	mov	r29, r18
	glcd_draw_rect(x, y, w, h, color);
    1c80:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <glcd_draw_rect>
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
    1c84:	d1 0f       	add	r29, r17
    1c86:	ce 0d       	add	r28, r14
    1c88:	2d 2f       	mov	r18, r29
    1c8a:	4c 2f       	mov	r20, r28
    1c8c:	6d 2f       	mov	r22, r29
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	8e 0d       	add	r24, r14
    1c92:	0e 94 bd 0c 	call	0x197a	; 0x197a <glcd_draw_line>
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
    1c96:	61 e0       	ldi	r22, 0x01	; 1
    1c98:	61 0f       	add	r22, r17
    1c9a:	2d 2f       	mov	r18, r29
    1c9c:	4c 2f       	mov	r20, r28
    1c9e:	8c 2f       	mov	r24, r28
    1ca0:	0e 94 bd 0c 	call	0x197a	; 0x197a <glcd_draw_line>
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	08 95       	ret

00001cb2 <glcd_draw_circle>:

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1cb2:	af 92       	push	r10
    1cb4:	bf 92       	push	r11
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	e8 2e       	mov	r14, r24
    1cc8:	d6 2e       	mov	r13, r22
    1cca:	f2 2e       	mov	r15, r18
		
	int8_t f = 1 - r;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	c8 2e       	mov	r12, r24
    1cd0:	c4 1a       	sub	r12, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1cd2:	b4 2e       	mov	r11, r20
    1cd4:	b1 94       	neg	r11
    1cd6:	bb 0c       	add	r11, r11
	int8_t x = 0;
	int8_t y = r;
    1cd8:	c4 2f       	mov	r28, r20
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1cda:	a4 2e       	mov	r10, r20
    1cdc:	a6 0e       	add	r10, r22
    1cde:	14 2f       	mov	r17, r20
    1ce0:	1e 0d       	add	r17, r14
    1ce2:	06 2f       	mov	r16, r22
    1ce4:	04 1b       	sub	r16, r20
    1ce6:	de 2d       	mov	r29, r14
    1ce8:	d4 1b       	sub	r29, r20
    1cea:	2a 2d       	mov	r18, r10
    1cec:	41 2f       	mov	r20, r17
    1cee:	60 2f       	mov	r22, r16
    1cf0:	8d 2f       	mov	r24, r29
    1cf2:	0e 94 a1 07 	call	0xf42	; 0xf42 <glcd_update_bbox>
	
	glcd_set_pixel(x0, y0+r, color);
    1cf6:	4f 2d       	mov	r20, r15
    1cf8:	6a 2d       	mov	r22, r10
    1cfa:	8e 2d       	mov	r24, r14
    1cfc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
	glcd_set_pixel(x0, y0-r, color);
    1d00:	4f 2d       	mov	r20, r15
    1d02:	60 2f       	mov	r22, r16
    1d04:	8e 2d       	mov	r24, r14
    1d06:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
	glcd_set_pixel(x0+r, y0, color);
    1d0a:	4f 2d       	mov	r20, r15
    1d0c:	6d 2d       	mov	r22, r13
    1d0e:	81 2f       	mov	r24, r17
    1d10:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
	glcd_set_pixel(x0-r, y0, color);
    1d14:	4f 2d       	mov	r20, r15
    1d16:	6d 2d       	mov	r22, r13
    1d18:	8d 2f       	mov	r24, r29
    1d1a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
	int8_t x = 0;
    1d1e:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (x<y) {
    1d20:	dc 17       	cp	r29, r28
    1d22:	5c f0       	brlt	.+22     	; 0x1d3a <glcd_draw_circle+0x88>
		glcd_set_pixel(x0 - y, y0 + x, color);
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	df 90       	pop	r13
    1d32:	cf 90       	pop	r12
    1d34:	bf 90       	pop	r11
    1d36:	af 90       	pop	r10
    1d38:	08 95       	ret
		if (f >= 0) {
    1d3a:	c7 fc       	sbrc	r12, 7
    1d3c:	04 c0       	rjmp	.+8      	; 0x1d46 <glcd_draw_circle+0x94>
			y--;
    1d3e:	c1 50       	subi	r28, 0x01	; 1
			ddF_y += 2;
    1d40:	b3 94       	inc	r11
    1d42:	b3 94       	inc	r11
			f += ddF_y;
    1d44:	cb 0c       	add	r12, r11
		x++;
    1d46:	df 5f       	subi	r29, 0xFF	; 255
		ddF_x += 2;
    1d48:	8d 2f       	mov	r24, r29
    1d4a:	88 0f       	add	r24, r24
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
		f += ddF_x;
    1d4e:	c8 0e       	add	r12, r24
		glcd_set_pixel(x0 + x, y0 + y, color);
    1d50:	ae 2c       	mov	r10, r14
    1d52:	ad 0e       	add	r10, r29
    1d54:	4f 2d       	mov	r20, r15
    1d56:	1c 2f       	mov	r17, r28
    1d58:	1d 0d       	add	r17, r13
    1d5a:	61 2f       	mov	r22, r17
    1d5c:	8a 2d       	mov	r24, r10
    1d5e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		glcd_set_pixel(x0 - x, y0 + y, color);
    1d62:	0e 2d       	mov	r16, r14
    1d64:	0d 1b       	sub	r16, r29
    1d66:	4f 2d       	mov	r20, r15
    1d68:	61 2f       	mov	r22, r17
    1d6a:	80 2f       	mov	r24, r16
    1d6c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		glcd_set_pixel(x0 + x, y0 - y, color);
    1d70:	4f 2d       	mov	r20, r15
    1d72:	1d 2d       	mov	r17, r13
    1d74:	1c 1b       	sub	r17, r28
    1d76:	61 2f       	mov	r22, r17
    1d78:	8a 2d       	mov	r24, r10
    1d7a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		glcd_set_pixel(x0 - x, y0 - y, color);
    1d7e:	4f 2d       	mov	r20, r15
    1d80:	61 2f       	mov	r22, r17
    1d82:	80 2f       	mov	r24, r16
    1d84:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		glcd_set_pixel(x0 + y, y0 + x, color);
    1d88:	1d 2d       	mov	r17, r13
    1d8a:	1d 0f       	add	r17, r29
    1d8c:	4f 2d       	mov	r20, r15
    1d8e:	61 2f       	mov	r22, r17
    1d90:	0c 2f       	mov	r16, r28
    1d92:	0e 0d       	add	r16, r14
    1d94:	80 2f       	mov	r24, r16
    1d96:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 + x, color);
    1d9a:	4f 2d       	mov	r20, r15
    1d9c:	61 2f       	mov	r22, r17
    1d9e:	1e 2d       	mov	r17, r14
    1da0:	1c 1b       	sub	r17, r28
    1da2:	81 2f       	mov	r24, r17
    1da4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		glcd_set_pixel(x0 + y, y0 - x, color);
    1da8:	ad 2c       	mov	r10, r13
    1daa:	ad 1a       	sub	r10, r29
    1dac:	4f 2d       	mov	r20, r15
    1dae:	6a 2d       	mov	r22, r10
    1db0:	80 2f       	mov	r24, r16
    1db2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 - x, color);
    1db6:	4f 2d       	mov	r20, r15
    1db8:	6a 2d       	mov	r22, r10
    1dba:	81 2f       	mov	r24, r17
    1dbc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
    1dc0:	af cf       	rjmp	.-162    	; 0x1d20 <glcd_draw_circle+0x6e>

00001dc2 <glcd_fill_circle>:

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1dc2:	4f 92       	push	r4
    1dc4:	5f 92       	push	r5
    1dc6:	6f 92       	push	r6
    1dc8:	7f 92       	push	r7
    1dca:	8f 92       	push	r8
    1dcc:	9f 92       	push	r9
    1dce:	af 92       	push	r10
    1dd0:	bf 92       	push	r11
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	f8 2e       	mov	r15, r24
    1de4:	06 2f       	mov	r16, r22
    1de6:	82 2e       	mov	r8, r18
	
	int8_t f = 1 - r;
    1de8:	d1 e0       	ldi	r29, 0x01	; 1
    1dea:	d4 1b       	sub	r29, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1dec:	94 2e       	mov	r9, r20
    1dee:	91 94       	neg	r9
    1df0:	99 0c       	add	r9, r9
	int8_t x = 0;
	int8_t y = r;
    1df2:	c4 2f       	mov	r28, r20
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1df4:	24 2f       	mov	r18, r20
    1df6:	26 0f       	add	r18, r22
    1df8:	48 0f       	add	r20, r24
    1dfa:	6c 1b       	sub	r22, r28
    1dfc:	8c 1b       	sub	r24, r28
    1dfe:	0e 94 a1 07 	call	0xf42	; 0xf42 <glcd_update_bbox>
	
	for (i=y0-r; i<=y0+r; i++) {
    1e02:	10 e0       	ldi	r17, 0x00	; 0
    1e04:	cc 2e       	mov	r12, r28
    1e06:	d1 2c       	mov	r13, r1
    1e08:	58 01       	movw	r10, r16
    1e0a:	ac 18       	sub	r10, r12
    1e0c:	bd 08       	sbc	r11, r13
    1e0e:	c0 0e       	add	r12, r16
    1e10:	d1 1e       	adc	r13, r17
    1e12:	ca 14       	cp	r12, r10
    1e14:	db 04       	cpc	r13, r11
    1e16:	d4 f4       	brge	.+52     	; 0x1e4c <glcd_fill_circle+0x8a>
    1e18:	66 24       	eor	r6, r6
    1e1a:	63 94       	inc	r6
    1e1c:	6f 0c       	add	r6, r15
    1e1e:	77 24       	eor	r7, r7
    1e20:	7a 94       	dec	r7
    1e22:	7f 0c       	add	r7, r15
	int8_t x = 0;
    1e24:	e1 2c       	mov	r14, r1
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
    1e26:	ec 16       	cp	r14, r28
    1e28:	d4 f0       	brlt	.+52     	; 0x1e5e <glcd_fill_circle+0x9c>
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
			glcd_set_pixel(x0-y, i, color);
		}    
	}
}
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	1f 91       	pop	r17
    1e30:	0f 91       	pop	r16
    1e32:	ff 90       	pop	r15
    1e34:	ef 90       	pop	r14
    1e36:	df 90       	pop	r13
    1e38:	cf 90       	pop	r12
    1e3a:	bf 90       	pop	r11
    1e3c:	af 90       	pop	r10
    1e3e:	9f 90       	pop	r9
    1e40:	8f 90       	pop	r8
    1e42:	7f 90       	pop	r7
    1e44:	6f 90       	pop	r6
    1e46:	5f 90       	pop	r5
    1e48:	4f 90       	pop	r4
    1e4a:	08 95       	ret
		glcd_set_pixel(x0, i, color);
    1e4c:	48 2d       	mov	r20, r8
    1e4e:	6a 2d       	mov	r22, r10
    1e50:	8f 2d       	mov	r24, r15
    1e52:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
	for (i=y0-r; i<=y0+r; i++) {
    1e56:	8f ef       	ldi	r24, 0xFF	; 255
    1e58:	a8 1a       	sub	r10, r24
    1e5a:	b8 0a       	sbc	r11, r24
    1e5c:	da cf       	rjmp	.-76     	; 0x1e12 <glcd_fill_circle+0x50>
		if (f >= 0) {
    1e5e:	d7 fd       	sbrc	r29, 7
    1e60:	04 c0       	rjmp	.+8      	; 0x1e6a <glcd_fill_circle+0xa8>
			y--;
    1e62:	c1 50       	subi	r28, 0x01	; 1
			ddF_y += 2;
    1e64:	93 94       	inc	r9
    1e66:	93 94       	inc	r9
			f += ddF_y;
    1e68:	d9 0d       	add	r29, r9
		x++;
    1e6a:	e3 94       	inc	r14
		ddF_x += 2;
    1e6c:	8e 2d       	mov	r24, r14
    1e6e:	88 0f       	add	r24, r24
    1e70:	8f 5f       	subi	r24, 0xFF	; 255
		f += ddF_x;
    1e72:	d8 0f       	add	r29, r24
		for (i=y0-y; i<=y0+y; i++) {
    1e74:	ac 2e       	mov	r10, r28
    1e76:	0c 2e       	mov	r0, r28
    1e78:	00 0c       	add	r0, r0
    1e7a:	bb 08       	sbc	r11, r11
    1e7c:	68 01       	movw	r12, r16
    1e7e:	ca 18       	sub	r12, r10
    1e80:	db 08       	sbc	r13, r11
    1e82:	a0 0e       	add	r10, r16
    1e84:	b1 1e       	adc	r11, r17
    1e86:	ac 14       	cp	r10, r12
    1e88:	bd 04       	cpc	r11, r13
    1e8a:	9c f4       	brge	.+38     	; 0x1eb2 <glcd_fill_circle+0xf0>
		for (i=y0-x; i<=y0+x; i++) {
    1e8c:	ae 2c       	mov	r10, r14
    1e8e:	0e 2c       	mov	r0, r14
    1e90:	00 0c       	add	r0, r0
    1e92:	bb 08       	sbc	r11, r11
    1e94:	68 01       	movw	r12, r16
    1e96:	ca 18       	sub	r12, r10
    1e98:	db 08       	sbc	r13, r11
    1e9a:	a0 0e       	add	r10, r16
    1e9c:	b1 1e       	adc	r11, r17
			glcd_set_pixel(x0+y, i, color);
    1e9e:	5c 2e       	mov	r5, r28
    1ea0:	5f 0c       	add	r5, r15
			glcd_set_pixel(x0-y, i, color);
    1ea2:	4f 2c       	mov	r4, r15
    1ea4:	4c 1a       	sub	r4, r28
		for (i=y0-x; i<=y0+x; i++) {
    1ea6:	ac 14       	cp	r10, r12
    1ea8:	bd 04       	cpc	r11, r13
    1eaa:	8c f4       	brge	.+34     	; 0x1ece <glcd_fill_circle+0x10c>
    1eac:	63 94       	inc	r6
    1eae:	7a 94       	dec	r7
    1eb0:	ba cf       	rjmp	.-140    	; 0x1e26 <glcd_fill_circle+0x64>
			glcd_set_pixel(x0+x, i, color);
    1eb2:	48 2d       	mov	r20, r8
    1eb4:	6c 2d       	mov	r22, r12
    1eb6:	86 2d       	mov	r24, r6
    1eb8:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
			glcd_set_pixel(x0-x, i, color);
    1ebc:	48 2d       	mov	r20, r8
    1ebe:	6c 2d       	mov	r22, r12
    1ec0:	87 2d       	mov	r24, r7
    1ec2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		for (i=y0-y; i<=y0+y; i++) {
    1ec6:	8f ef       	ldi	r24, 0xFF	; 255
    1ec8:	c8 1a       	sub	r12, r24
    1eca:	d8 0a       	sbc	r13, r24
    1ecc:	dc cf       	rjmp	.-72     	; 0x1e86 <glcd_fill_circle+0xc4>
			glcd_set_pixel(x0+y, i, color);
    1ece:	48 2d       	mov	r20, r8
    1ed0:	6c 2d       	mov	r22, r12
    1ed2:	85 2d       	mov	r24, r5
    1ed4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
			glcd_set_pixel(x0-y, i, color);
    1ed8:	48 2d       	mov	r20, r8
    1eda:	6c 2d       	mov	r22, r12
    1edc:	84 2d       	mov	r24, r4
    1ede:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		for (i=y0-x; i<=y0+x; i++) {
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	c8 1a       	sub	r12, r24
    1ee6:	d8 0a       	sbc	r13, r24
    1ee8:	de cf       	rjmp	.-68     	; 0x1ea6 <glcd_fill_circle+0xe4>

00001eea <glcd_invert_area>:

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    1eea:	cf 92       	push	r12
    1eec:	df 92       	push	r13
    1eee:	ef 92       	push	r14
    1ef0:	ff 92       	push	r15
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	16 2f       	mov	r17, r22
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    1efa:	c8 2f       	mov	r28, r24
    1efc:	84 0f       	add	r24, r20
    1efe:	99 27       	eor	r25, r25
    1f00:	99 1f       	adc	r25, r25
    1f02:	7c 01       	movw	r14, r24
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    1f04:	86 2f       	mov	r24, r22
    1f06:	82 0f       	add	r24, r18
    1f08:	99 27       	eor	r25, r25
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	6c 01       	movw	r12, r24
	for (xx = x; xx < (x+w); xx++) {
    1f0e:	ce 15       	cp	r28, r14
    1f10:	1f 04       	cpc	r1, r15
    1f12:	94 f0       	brlt	.+36     	; 0x1f38 <glcd_invert_area+0x4e>
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
		}
	}
}
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	08 95       	ret
			glcd_invert_pixel(xx,yy);
    1f24:	6d 2f       	mov	r22, r29
    1f26:	8c 2f       	mov	r24, r28
    1f28:	0e 94 97 0c 	call	0x192e	; 0x192e <glcd_invert_pixel>
		for (yy = y; yy < (y+h); yy++) {
    1f2c:	df 5f       	subi	r29, 0xFF	; 255
    1f2e:	dc 15       	cp	r29, r12
    1f30:	1d 04       	cpc	r1, r13
    1f32:	c4 f3       	brlt	.-16     	; 0x1f24 <glcd_invert_area+0x3a>
	for (xx = x; xx < (x+w); xx++) {
    1f34:	cf 5f       	subi	r28, 0xFF	; 255
    1f36:	eb cf       	rjmp	.-42     	; 0x1f0e <glcd_invert_area+0x24>
		for (yy = y; yy < (y+h); yy++) {
    1f38:	d1 2f       	mov	r29, r17
    1f3a:	f9 cf       	rjmp	.-14     	; 0x1f2e <glcd_invert_area+0x44>

00001f3c <glcd_draw_bitmap>:
	glcd_select_screen(original_buffer, glcd_bbox_selected);	
#endif
	
	/* Copy bitmap data to the screen buffer */
#if defined(GLCD_DEVICE_AVR8)
	memcpy_P(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
    1f3c:	48 ef       	ldi	r20, 0xF8	; 248
    1f3e:	51 e0       	ldi	r21, 0x01	; 1
    1f40:	bc 01       	movw	r22, r24
    1f42:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <glcd_buffer_selected>
    1f46:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <glcd_buffer_selected+0x1>
    1f4a:	0e 94 44 17 	call	0x2e88	; 0x2e88 <memcpy_P>
#else
	memcpy(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
#endif

	glcd_bbox_refresh(); 
    1f4e:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <glcd_bbox_refresh>

00001f52 <glcd_test_circles>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 
	};
#endif /* GLCD_UNIT_TEST_BITMAP_ENABLE */

void glcd_test_circles(void)
{
    1f52:	6f 92       	push	r6
    1f54:	7f 92       	push	r7
    1f56:	8f 92       	push	r8
    1f58:	9f 92       	push	r9
    1f5a:	af 92       	push	r10
    1f5c:	bf 92       	push	r11
    1f5e:	cf 92       	push	r12
    1f60:	df 92       	push	r13
    1f62:	ef 92       	push	r14
    1f64:	ff 92       	push	r15
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
		uint8_t i;
		
		glcd_clear();

		// generate random(ish) position on display
		x = rand() % GLCD_LCD_WIDTH;
    1f6e:	04 e5       	ldi	r16, 0x54	; 84
    1f70:	10 e0       	ldi	r17, 0x00	; 0
		y = rand() % GLCD_LCD_HEIGHT;
    1f72:	80 e3       	ldi	r24, 0x30	; 48
    1f74:	e8 2e       	mov	r14, r24
    1f76:	f1 2c       	mov	r15, r1
		radius = rand() % 50;
    1f78:	92 e3       	ldi	r25, 0x32	; 50
    1f7a:	c9 2e       	mov	r12, r25
    1f7c:	d1 2c       	mov	r13, r1
    1f7e:	20 e4       	ldi	r18, 0x40	; 64
    1f80:	a2 2e       	mov	r10, r18
    1f82:	2f e1       	ldi	r18, 0x1F	; 31
    1f84:	b2 2e       	mov	r11, r18
    1f86:	30 ea       	ldi	r19, 0xA0	; 160
    1f88:	83 2e       	mov	r8, r19
    1f8a:	3f e0       	ldi	r19, 0x0F	; 15
    1f8c:	93 2e       	mov	r9, r19
		glcd_clear();
    1f8e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <glcd_clear>
		x = rand() % GLCD_LCD_WIDTH;
    1f92:	0e 94 34 17 	call	0x2e68	; 0x2e68 <rand>
    1f96:	b8 01       	movw	r22, r16
    1f98:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
    1f9c:	78 2e       	mov	r7, r24
		y = rand() % GLCD_LCD_HEIGHT;
    1f9e:	0e 94 34 17 	call	0x2e68	; 0x2e68 <rand>
    1fa2:	b7 01       	movw	r22, r14
    1fa4:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
    1fa8:	68 2e       	mov	r6, r24
		radius = rand() % 50;
    1faa:	0e 94 34 17 	call	0x2e68	; 0x2e68 <rand>
    1fae:	b6 01       	movw	r22, r12
    1fb0:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
    1fb4:	d8 2f       	mov	r29, r24

		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
    1fb6:	c0 e0       	ldi	r28, 0x00	; 0
			glcd_fill_circle(x,y,i,BLACK);
    1fb8:	21 e0       	ldi	r18, 0x01	; 1
    1fba:	4c 2f       	mov	r20, r28
    1fbc:	66 2d       	mov	r22, r6
    1fbe:	87 2d       	mov	r24, r7
    1fc0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <glcd_fill_circle>
			glcd_write();
    1fc4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    1fc8:	c5 01       	movw	r24, r10
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <glcd_test_circles+0x78>
		for (i=0; i<=radius; i++) {
    1fce:	cf 5f       	subi	r28, 0xFF	; 255
    1fd0:	dc 17       	cp	r29, r28
    1fd2:	90 f7       	brcc	.-28     	; 0x1fb8 <glcd_test_circles+0x66>
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
    1fd4:	c0 e0       	ldi	r28, 0x00	; 0
			glcd_fill_circle(x,y,i,WHITE);
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	4c 2f       	mov	r20, r28
    1fda:	66 2d       	mov	r22, r6
    1fdc:	87 2d       	mov	r24, r7
    1fde:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <glcd_fill_circle>
			glcd_write();
    1fe2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    1fe6:	c4 01       	movw	r24, r8
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <glcd_test_circles+0x96>
		for (i=0; i<=radius; i++) {
    1fec:	cf 5f       	subi	r28, 0xFF	; 255
    1fee:	dc 17       	cp	r29, r28
    1ff0:	90 f7       	brcc	.-28     	; 0x1fd6 <glcd_test_circles+0x84>
			delay_ms(1);
		}
		DEMO_RETURN();
    1ff2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    1ff6:	88 23       	and	r24, r24
    1ff8:	51 f2       	breq	.-108    	; 0x1f8e <glcd_test_circles+0x3c>
    1ffa:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <unit_test_return>
	}
}
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	df 90       	pop	r13
    200c:	cf 90       	pop	r12
    200e:	bf 90       	pop	r11
    2010:	af 90       	pop	r10
    2012:	9f 90       	pop	r9
    2014:	8f 90       	pop	r8
    2016:	7f 90       	pop	r7
    2018:	6f 90       	pop	r6
    201a:	08 95       	ret

0000201c <glcd_test_counter_and_graph>:

void glcd_test_counter_and_graph(void)
{
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	28 97       	sbiw	r28, 0x08	; 8
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
	uint8_t count = 0;
	char string[8] = "";
    203c:	1a 82       	std	Y+2, r1	; 0x02
    203e:	19 82       	std	Y+1, r1	; 0x01
    2040:	fe 01       	movw	r30, r28
    2042:	33 96       	adiw	r30, 0x03	; 3
    2044:	86 e0       	ldi	r24, 0x06	; 6
    2046:	df 01       	movw	r26, r30
    2048:	1d 92       	st	X+, r1
    204a:	8a 95       	dec	r24
    204c:	e9 f7       	brne	.-6      	; 0x2048 <glcd_test_counter_and_graph+0x2c>
	uint8_t count = 0;
    204e:	10 e0       	ldi	r17, 0x00	; 0
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    2050:	85 e0       	ldi	r24, 0x05	; 5
    2052:	c8 2e       	mov	r12, r24
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	d8 2e       	mov	r13, r24
    2058:	ce 01       	movw	r24, r28
    205a:	01 96       	adiw	r24, 0x01	; 1
    205c:	7c 01       	movw	r14, r24
		glcd_clear_buffer();
    205e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <glcd_clear_buffer>
		glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    2062:	09 e3       	ldi	r16, 0x39	; 57
    2064:	2e e2       	ldi	r18, 0x2E	; 46
    2066:	45 e1       	ldi	r20, 0x15	; 21
    2068:	6f e0       	ldi	r22, 0x0F	; 15
    206a:	88 ea       	ldi	r24, 0xA8	; 168
    206c:	99 e0       	ldi	r25, 0x09	; 9
    206e:	0e 94 42 0a 	call	0x1484	; 0x1484 <glcd_set_font>
		sprintf(string,"%d",count);
    2072:	1f 92       	push	r1
    2074:	1f 93       	push	r17
    2076:	df 92       	push	r13
    2078:	cf 92       	push	r12
    207a:	ff 92       	push	r15
    207c:	ef 92       	push	r14
    207e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <sprintf>
		glcd_draw_string_xy(0,0,string);
    2082:	a7 01       	movw	r20, r14
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	0e 94 12 0c 	call	0x1824	; 0x1824 <glcd_draw_string_xy>
		glcd_bar_graph_horizontal(10,38,30,6,count*4);
    208c:	01 2f       	mov	r16, r17
    208e:	00 0f       	add	r16, r16
    2090:	00 0f       	add	r16, r16
    2092:	26 e0       	ldi	r18, 0x06	; 6
    2094:	4e e1       	ldi	r20, 0x1E	; 30
    2096:	66 e2       	ldi	r22, 0x26	; 38
    2098:	8a e0       	ldi	r24, 0x0A	; 10
    209a:	0e 94 de 08 	call	0x11bc	; 0x11bc <glcd_bar_graph_horizontal>
		glcd_bar_graph_vertical(70,0,8,30,count*2);
    209e:	01 2f       	mov	r16, r17
    20a0:	00 0f       	add	r16, r16
    20a2:	2e e1       	ldi	r18, 0x1E	; 30
    20a4:	48 e0       	ldi	r20, 0x08	; 8
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	86 e4       	ldi	r24, 0x46	; 70
    20aa:	0e 94 1a 09 	call	0x1234	; 0x1234 <glcd_bar_graph_vertical>

		glcd_write();
    20ae:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
		count += 1;
    20b2:	1f 5f       	subi	r17, 0xFF	; 255

		DEMO_RETURN();
    20b4:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	88 23       	and	r24, r24
    20c6:	59 f2       	breq	.-106    	; 0x205e <glcd_test_counter_and_graph+0x42>
    20c8:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <unit_test_return>
	}

}
    20cc:	28 96       	adiw	r28, 0x08	; 8
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	df 90       	pop	r13
    20e6:	cf 90       	pop	r12
    20e8:	08 95       	ret

000020ea <glcd_test_glcdutils>:

/* Test glcd-utils font table type, increments and display a 16-bit number over and over */
#include "fonts/Earthbound_12x19_48to57.h"
void glcd_test_glcdutils(void)
{
    20ea:	8f 92       	push	r8
    20ec:	9f 92       	push	r9
    20ee:	af 92       	push	r10
    20f0:	bf 92       	push	r11
    20f2:	cf 92       	push	r12
    20f4:	df 92       	push	r13
    20f6:	ef 92       	push	r14
    20f8:	0f 93       	push	r16
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	28 97       	sbiw	r28, 0x08	; 8
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
	uint16_t count = 0;
	char string[8] = "";
    210e:	1a 82       	std	Y+2, r1	; 0x02
    2110:	19 82       	std	Y+1, r1	; 0x01
    2112:	fe 01       	movw	r30, r28
    2114:	33 96       	adiw	r30, 0x03	; 3
    2116:	86 e0       	ldi	r24, 0x06	; 6
    2118:	df 01       	movw	r26, r30
    211a:	1d 92       	st	X+, r1
    211c:	8a 95       	dec	r24
    211e:	e9 f7       	brne	.-6      	; 0x211a <glcd_test_glcdutils+0x30>
	uint16_t count = 0;
    2120:	d1 2c       	mov	r13, r1
    2122:	c1 2c       	mov	r12, r1
		glcd_clear_buffer();

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);

		sprintf(string,"%d",count);
    2124:	95 e0       	ldi	r25, 0x05	; 5
    2126:	89 2e       	mov	r8, r25
    2128:	91 e0       	ldi	r25, 0x01	; 1
    212a:	99 2e       	mov	r9, r25
    212c:	ce 01       	movw	r24, r28
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	5c 01       	movw	r10, r24
		glcd_clear_buffer();
    2132:	0e 94 ee 07 	call	0xfdc	; 0xfdc <glcd_clear_buffer>
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	e8 2e       	mov	r14, r24
    213a:	09 e3       	ldi	r16, 0x39	; 57
    213c:	20 e3       	ldi	r18, 0x30	; 48
    213e:	43 e1       	ldi	r20, 0x13	; 19
    2140:	6c e0       	ldi	r22, 0x0C	; 12
    2142:	80 e4       	ldi	r24, 0x40	; 64
    2144:	94 e0       	ldi	r25, 0x04	; 4
    2146:	0e 94 4f 0a 	call	0x149e	; 0x149e <glcd_font>
		sprintf(string,"%d",count);
    214a:	df 92       	push	r13
    214c:	cf 92       	push	r12
    214e:	9f 92       	push	r9
    2150:	8f 92       	push	r8
    2152:	bf 92       	push	r11
    2154:	af 92       	push	r10
    2156:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <sprintf>
		glcd_draw_string_xy(0,0,string);
    215a:	a5 01       	movw	r20, r10
    215c:	60 e0       	ldi	r22, 0x00	; 0
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	0e 94 12 0c 	call	0x1824	; 0x1824 <glcd_draw_string_xy>
		glcd_write();
    2164:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
		
		count += 1;
    2168:	9f ef       	ldi	r25, 0xFF	; 255
    216a:	c9 1a       	sub	r12, r25
    216c:	d9 0a       	sbc	r13, r25

		DEMO_RETURN();
    216e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	88 23       	and	r24, r24
    2180:	c1 f2       	breq	.-80     	; 0x2132 <glcd_test_glcdutils+0x48>
    2182:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <unit_test_return>
	}
}
    2186:	28 96       	adiw	r28, 0x08	; 8
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	0f 91       	pop	r16
    2198:	ef 90       	pop	r14
    219a:	df 90       	pop	r13
    219c:	cf 90       	pop	r12
    219e:	bf 90       	pop	r11
    21a0:	af 90       	pop	r10
    21a2:	9f 90       	pop	r9
    21a4:	8f 90       	pop	r8
    21a6:	08 95       	ret

000021a8 <glcd_test_text_up_down>:

void glcd_test_text_up_down(void)
{
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29

	uint8_t y;
	uint8_t max_y;
	
	//glcd_set_font(Liberation_Sans11x14_Numbers,11,14,46,57);
	glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    21b0:	09 e3       	ldi	r16, 0x39	; 57
    21b2:	2e e2       	ldi	r18, 0x2E	; 46
    21b4:	45 e1       	ldi	r20, 0x15	; 21
    21b6:	6f e0       	ldi	r22, 0x0F	; 15
    21b8:	88 ea       	ldi	r24, 0xA8	; 168
    21ba:	99 e0       	ldi	r25, 0x09	; 9
    21bc:	0e 94 42 0a 	call	0x1484	; 0x1484 <glcd_set_font>
	//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
	//glcd_set_font(Liberation_Sans17x17_Alpha,17,17,46,90);

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string
    21c0:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <font_current+0x3>
    21c4:	ce e2       	ldi	r28, 0x2E	; 46
    21c6:	c8 1b       	sub	r28, r24
    21c8:	00 e9       	ldi	r16, 0x90	; 144
    21ca:	11 e0       	ldi	r17, 0x01	; 1

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
    21cc:	d0 e0       	ldi	r29, 0x00	; 0
    21ce:	dc 13       	cpse	r29, r28
    21d0:	1a c0       	rjmp	.+52     	; 0x2206 <glcd_test_text_up_down+0x5e>
    21d2:	dc 2f       	mov	r29, r28
			glcd_write();
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
    21d4:	dd 23       	and	r29, r29
    21d6:	d1 f3       	breq	.-12     	; 0x21cc <glcd_test_text_up_down+0x24>
			DEMO_RETURN();
    21d8:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    21dc:	81 11       	cpse	r24, r1
    21de:	17 c0       	rjmp	.+46     	; 0x220e <glcd_test_text_up_down+0x66>
			glcd_clear_buffer();
    21e0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"456");
    21e4:	4c e0       	ldi	r20, 0x0C	; 12
    21e6:	51 e0       	ldi	r21, 0x01	; 1
    21e8:	6d 2f       	mov	r22, r29
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	0e 94 12 0c 	call	0x1824	; 0x1824 <glcd_draw_string_xy>
			glcd_write();
    21f0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    21f4:	80 e2       	ldi	r24, 0x20	; 32
    21f6:	93 e0       	ldi	r25, 0x03	; 3
    21f8:	f8 01       	movw	r30, r16
    21fa:	31 97       	sbiw	r30, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <glcd_test_text_up_down+0x52>
			__ticks --;
    21fe:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
    2200:	d9 f7       	brne	.-10     	; 0x21f8 <glcd_test_text_up_down+0x50>
		for (y=(max_y); y>0; y--) {
    2202:	d1 50       	subi	r29, 0x01	; 1
    2204:	e7 cf       	rjmp	.-50     	; 0x21d4 <glcd_test_text_up_down+0x2c>
			DEMO_RETURN();
    2206:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    220a:	88 23       	and	r24, r24
    220c:	39 f0       	breq	.+14     	; 0x221c <glcd_test_text_up_down+0x74>
			DEMO_RETURN();
    220e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <unit_test_return>
			delay_ms(80);
		}
		
	}

}
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	08 95       	ret
			glcd_clear_buffer();
    221c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"123");
    2220:	48 e0       	ldi	r20, 0x08	; 8
    2222:	51 e0       	ldi	r21, 0x01	; 1
    2224:	6d 2f       	mov	r22, r29
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	0e 94 12 0c 	call	0x1824	; 0x1824 <glcd_draw_string_xy>
			glcd_write();
    222c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    2230:	80 e2       	ldi	r24, 0x20	; 32
    2232:	93 e0       	ldi	r25, 0x03	; 3
    2234:	f8 01       	movw	r30, r16
    2236:	31 97       	sbiw	r30, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <glcd_test_text_up_down+0x8e>
			__ticks --;
    223a:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
    223c:	d9 f7       	brne	.-10     	; 0x2234 <glcd_test_text_up_down+0x8c>
		for (y=0; y<max_y; y++) {
    223e:	df 5f       	subi	r29, 0xFF	; 255
    2240:	c6 cf       	rjmp	.-116    	; 0x21ce <glcd_test_text_up_down+0x26>

00002242 <glcd_test_tiny_text>:

void glcd_test_tiny_text(void)
{
    2242:	cf 92       	push	r12
    2244:	df 92       	push	r13
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	2f 97       	sbiw	r28, 0x0f	; 15
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    2262:	0f e7       	ldi	r16, 0x7F	; 127
    2264:	20 e2       	ldi	r18, 0x20	; 32
    2266:	47 e0       	ldi	r20, 0x07	; 7
    2268:	65 e0       	ldi	r22, 0x05	; 5
    226a:	80 ed       	ldi	r24, 0xD0	; 208
    226c:	9b e0       	ldi	r25, 0x0B	; 11
    226e:	0e 94 a5 12 	call	0x254a	; 0x254a <glcd_tiny_set_font>
	uint8_t c = 32;
    2272:	10 e2       	ldi	r17, 0x20	; 32
    2274:	7e 01       	movw	r14, r28
    2276:	8f e0       	ldi	r24, 0x0F	; 15
    2278:	e8 0e       	add	r14, r24
    227a:	f1 1c       	adc	r15, r1
    227c:	80 e9       	ldi	r24, 0x90	; 144
    227e:	c8 2e       	mov	r12, r24
    2280:	dd 24       	eor	r13, r13
    2282:	d3 94       	inc	r13
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    2284:	fe 01       	movw	r30, r28
    2286:	31 96       	adiw	r30, 0x01	; 1
    2288:	cf 01       	movw	r24, r30
			string[i] = c;
    228a:	11 93       	st	Z+, r17
			c++;
    228c:	1f 5f       	subi	r17, 0xFF	; 255
			if (c > 127) {
    228e:	17 fd       	sbrc	r17, 7
				c = 32;
    2290:	10 e2       	ldi	r17, 0x20	; 32
		for (i=0; i<len; i++) {
    2292:	ee 16       	cp	r14, r30
    2294:	ff 06       	cpc	r15, r31
    2296:	c9 f7       	brne	.-14     	; 0x228a <glcd_test_tiny_text+0x48>
			}
		}

		// write null terminator
		string[len] = '\0';
    2298:	1f 86       	std	Y+15, r1	; 0x0f

		GLCD_WRITE(string);
    229a:	0e 94 88 13 	call	0x2710	; 0x2710 <glcd_tiny_draw_string_ammend>
		
		DEMO_RETURN();
    229e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    22a2:	88 23       	and	r24, r24
    22a4:	89 f0       	breq	.+34     	; 0x22c8 <glcd_test_tiny_text+0x86>
    22a6:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <unit_test_return>
		
		delay_ms(1000);
	}

}
    22aa:	2f 96       	adiw	r28, 0x0f	; 15
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	df 90       	pop	r13
    22c4:	cf 90       	pop	r12
    22c6:	08 95       	ret
    22c8:	80 e1       	ldi	r24, 0x10	; 16
    22ca:	97 e2       	ldi	r25, 0x27	; 39
    22cc:	f6 01       	movw	r30, r12
    22ce:	31 97       	sbiw	r30, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <glcd_test_tiny_text+0x8c>
			__ticks --;
    22d2:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
    22d4:	d9 f7       	brne	.-10     	; 0x22cc <glcd_test_tiny_text+0x8a>
    22d6:	d6 cf       	rjmp	.-84     	; 0x2284 <glcd_test_tiny_text+0x42>

000022d8 <glcd_test_hello_world>:

void glcd_test_hello_world(void)
{
    22d8:	0f 93       	push	r16
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    22da:	0f e7       	ldi	r16, 0x7F	; 127
    22dc:	20 e2       	ldi	r18, 0x20	; 32
    22de:	47 e0       	ldi	r20, 0x07	; 7
    22e0:	65 e0       	ldi	r22, 0x05	; 5
    22e2:	80 ed       	ldi	r24, 0xD0	; 208
    22e4:	9b e0       	ldi	r25, 0x0B	; 11
    22e6:	0e 94 a5 12 	call	0x254a	; 0x254a <glcd_tiny_set_font>
	glcd_clear_buffer();
    22ea:	0e 94 ee 07 	call	0xfdc	; 0xfdc <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"Hello World!");
    22ee:	40 e1       	ldi	r20, 0x10	; 16
    22f0:	51 e0       	ldi	r21, 0x01	; 1
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	0e 94 16 13 	call	0x262c	; 0x262c <glcd_tiny_draw_string>
	glcd_write();
    22fa:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
	while(1) {
		DEMO_RETURN();
    22fe:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    2302:	88 23       	and	r24, r24
    2304:	e1 f3       	breq	.-8      	; 0x22fe <glcd_test_hello_world+0x26>
    2306:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <unit_test_return>
	}
}
    230a:	0f 91       	pop	r16
    230c:	08 95       	ret

0000230e <glcd_test_rectangles>:

void glcd_test_rectangles(void)
{
    230e:	cf 92       	push	r12
    2310:	ef 92       	push	r14
    2312:	0f 93       	push	r16
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    2318:	0f e7       	ldi	r16, 0x7F	; 127
    231a:	20 e2       	ldi	r18, 0x20	; 32
    231c:	47 e0       	ldi	r20, 0x07	; 7
    231e:	65 e0       	ldi	r22, 0x05	; 5
    2320:	80 ed       	ldi	r24, 0xD0	; 208
    2322:	9b e0       	ldi	r25, 0x0B	; 11
    2324:	0e 94 a5 12 	call	0x254a	; 0x254a <glcd_tiny_set_font>
	glcd_clear_buffer();
    2328:	0e 94 ee 07 	call	0xfdc	; 0xfdc <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"RECTANGLE DEMO");
    232c:	4d e1       	ldi	r20, 0x1D	; 29
    232e:	51 e0       	ldi	r21, 0x01	; 1
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	0e 94 16 13 	call	0x262c	; 0x262c <glcd_tiny_draw_string>
	glcd_write();
    2338:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    233c:	80 ed       	ldi	r24, 0xD0	; 208
    233e:	97 e0       	ldi	r25, 0x07	; 7
    2340:	20 e9       	ldi	r18, 0x90	; 144
    2342:	31 e0       	ldi	r19, 0x01	; 1
    2344:	f9 01       	movw	r30, r18
    2346:	31 97       	sbiw	r30, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <glcd_test_rectangles+0x38>
			__ticks --;
    234a:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
    234c:	d9 f7       	brne	.-10     	; 0x2344 <glcd_test_rectangles+0x36>
    234e:	c0 e9       	ldi	r28, 0x90	; 144
    2350:	d1 e0       	ldi	r29, 0x01	; 1
	delay_ms(200);
	
	while(1) {
		
		glcd_clear();
    2352:	0e 94 da 07 	call	0xfb4	; 0xfb4 <glcd_clear>
		glcd_draw_rect(0,0,100,50,BLACK);
    2356:	01 e0       	ldi	r16, 0x01	; 1
    2358:	22 e3       	ldi	r18, 0x32	; 50
    235a:	44 e6       	ldi	r20, 0x64	; 100
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <glcd_draw_rect>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect");
    2364:	4c e2       	ldi	r20, 0x2C	; 44
    2366:	51 e0       	ldi	r21, 0x01	; 1
    2368:	69 e0       	ldi	r22, 0x09	; 9
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	0e 94 16 13 	call	0x262c	; 0x262c <glcd_tiny_draw_string>
		glcd_write();
    2370:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    2374:	88 e8       	ldi	r24, 0x88	; 136
    2376:	93 e1       	ldi	r25, 0x13	; 19
    2378:	fe 01       	movw	r30, r28
    237a:	31 97       	sbiw	r30, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <glcd_test_rectangles+0x6c>
			__ticks --;
    237e:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
    2380:	d9 f7       	brne	.-10     	; 0x2378 <glcd_test_rectangles+0x6a>
		delay_ms(500);
		DEMO_RETURN();
    2382:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    2386:	88 23       	and	r24, r24
    2388:	41 f0       	breq	.+16     	; 0x239a <glcd_test_rectangles+0x8c>
		DEMO_RETURN();
		
		glcd_draw_rect_shadow(95,5,30,30,BLACK);
		glcd_write();
		delay_ms(500);
		DEMO_RETURN();
    238a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <unit_test_return>
		
	}
	
}
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	0f 91       	pop	r16
    2394:	ef 90       	pop	r14
    2396:	cf 90       	pop	r12
    2398:	08 95       	ret
		glcd_clear();
    239a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
    239e:	4b e3       	ldi	r20, 0x3B	; 59
    23a0:	51 e0       	ldi	r21, 0x01	; 1
    23a2:	69 e0       	ldi	r22, 0x09	; 9
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	0e 94 16 13 	call	0x262c	; 0x262c <glcd_tiny_draw_string>
		glcd_write();
    23aa:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
		glcd_draw_rect_thick(5,5,80,30,3,6,BLACK);
    23ae:	cc 24       	eor	r12, r12
    23b0:	c3 94       	inc	r12
    23b2:	26 e0       	ldi	r18, 0x06	; 6
    23b4:	e2 2e       	mov	r14, r18
    23b6:	03 e0       	ldi	r16, 0x03	; 3
    23b8:	2e e1       	ldi	r18, 0x1E	; 30
    23ba:	40 e5       	ldi	r20, 0x50	; 80
    23bc:	65 e0       	ldi	r22, 0x05	; 5
    23be:	85 e0       	ldi	r24, 0x05	; 5
    23c0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <glcd_draw_rect_thick>
		glcd_write();
    23c4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    23c8:	88 e8       	ldi	r24, 0x88	; 136
    23ca:	93 e1       	ldi	r25, 0x13	; 19
    23cc:	fe 01       	movw	r30, r28
    23ce:	31 97       	sbiw	r30, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <glcd_test_rectangles+0xc0>
			__ticks --;
    23d2:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
    23d4:	d9 f7       	brne	.-10     	; 0x23cc <glcd_test_rectangles+0xbe>
		DEMO_RETURN();
    23d6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    23da:	81 11       	cpse	r24, r1
    23dc:	d6 cf       	rjmp	.-84     	; 0x238a <glcd_test_rectangles+0x7c>
		glcd_draw_rect_thick(0,0,20,20,2,2,BLACK);
    23de:	cc 24       	eor	r12, r12
    23e0:	c3 94       	inc	r12
    23e2:	92 e0       	ldi	r25, 0x02	; 2
    23e4:	e9 2e       	mov	r14, r25
    23e6:	02 e0       	ldi	r16, 0x02	; 2
    23e8:	24 e1       	ldi	r18, 0x14	; 20
    23ea:	44 e1       	ldi	r20, 0x14	; 20
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <glcd_draw_rect_thick>
		glcd_write();
    23f4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    23f8:	88 e8       	ldi	r24, 0x88	; 136
    23fa:	93 e1       	ldi	r25, 0x13	; 19
    23fc:	fe 01       	movw	r30, r28
    23fe:	31 97       	sbiw	r30, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <glcd_test_rectangles+0xf0>
			__ticks --;
    2402:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
    2404:	d9 f7       	brne	.-10     	; 0x23fc <glcd_test_rectangles+0xee>
		DEMO_RETURN();
    2406:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    240a:	81 11       	cpse	r24, r1
    240c:	be cf       	rjmp	.-132    	; 0x238a <glcd_test_rectangles+0x7c>
		glcd_draw_rect_thick(100,10,20,20,5,5,BLACK);
    240e:	cc 24       	eor	r12, r12
    2410:	c3 94       	inc	r12
    2412:	85 e0       	ldi	r24, 0x05	; 5
    2414:	e8 2e       	mov	r14, r24
    2416:	05 e0       	ldi	r16, 0x05	; 5
    2418:	24 e1       	ldi	r18, 0x14	; 20
    241a:	44 e1       	ldi	r20, 0x14	; 20
    241c:	6a e0       	ldi	r22, 0x0A	; 10
    241e:	84 e6       	ldi	r24, 0x64	; 100
    2420:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <glcd_draw_rect_thick>
		glcd_write();
    2424:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    2428:	88 e8       	ldi	r24, 0x88	; 136
    242a:	93 e1       	ldi	r25, 0x13	; 19
    242c:	fe 01       	movw	r30, r28
    242e:	31 97       	sbiw	r30, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <glcd_test_rectangles+0x120>
			__ticks --;
    2432:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
    2434:	d9 f7       	brne	.-10     	; 0x242c <glcd_test_rectangles+0x11e>
		DEMO_RETURN();
    2436:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    243a:	81 11       	cpse	r24, r1
    243c:	a6 cf       	rjmp	.-180    	; 0x238a <glcd_test_rectangles+0x7c>
		glcd_clear();
    243e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
    2442:	40 e5       	ldi	r20, 0x50	; 80
    2444:	51 e0       	ldi	r21, 0x01	; 1
    2446:	69 e0       	ldi	r22, 0x09	; 9
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	0e 94 16 13 	call	0x262c	; 0x262c <glcd_tiny_draw_string>
		glcd_draw_rect_shadow(0,0,45,30,BLACK);
    244e:	01 e0       	ldi	r16, 0x01	; 1
    2450:	2e e1       	ldi	r18, 0x1E	; 30
    2452:	4d e2       	ldi	r20, 0x2D	; 45
    2454:	60 e0       	ldi	r22, 0x00	; 0
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <glcd_draw_rect_shadow>
		glcd_write();
    245c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    2460:	88 e8       	ldi	r24, 0x88	; 136
    2462:	93 e1       	ldi	r25, 0x13	; 19
    2464:	fe 01       	movw	r30, r28
    2466:	31 97       	sbiw	r30, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <glcd_test_rectangles+0x158>
			__ticks --;
    246a:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
    246c:	d9 f7       	brne	.-10     	; 0x2464 <glcd_test_rectangles+0x156>
		DEMO_RETURN();
    246e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    2472:	81 11       	cpse	r24, r1
    2474:	8a cf       	rjmp	.-236    	; 0x238a <glcd_test_rectangles+0x7c>
		glcd_draw_rect_shadow(95,5,30,30,BLACK);
    2476:	01 e0       	ldi	r16, 0x01	; 1
    2478:	2e e1       	ldi	r18, 0x1E	; 30
    247a:	4e e1       	ldi	r20, 0x1E	; 30
    247c:	65 e0       	ldi	r22, 0x05	; 5
    247e:	8f e5       	ldi	r24, 0x5F	; 95
    2480:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <glcd_draw_rect_shadow>
		glcd_write();
    2484:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    2488:	88 e8       	ldi	r24, 0x88	; 136
    248a:	93 e1       	ldi	r25, 0x13	; 19
    248c:	fe 01       	movw	r30, r28
    248e:	31 97       	sbiw	r30, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <glcd_test_rectangles+0x180>
			__ticks --;
    2492:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
    2494:	d9 f7       	brne	.-10     	; 0x248c <glcd_test_rectangles+0x17e>
		DEMO_RETURN();
    2496:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    249a:	88 23       	and	r24, r24
    249c:	09 f4       	brne	.+2      	; 0x24a0 <glcd_test_rectangles+0x192>
    249e:	59 cf       	rjmp	.-334    	; 0x2352 <glcd_test_rectangles+0x44>
    24a0:	74 cf       	rjmp	.-280    	; 0x238a <glcd_test_rectangles+0x7c>

000024a2 <glcd_test_scrolling_graph>:

void glcd_test_scrolling_graph(void)
{
    24a2:	0f 93       	push	r16
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
	glcd_clear();
    24a8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <glcd_clear>
	glcd_write();
    24ac:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
{
    24b0:	c0 e0       	ldi	r28, 0x00	; 0
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,n);
    24b2:	0c 2f       	mov	r16, r28
    24b4:	22 e3       	ldi	r18, 0x32	; 50
    24b6:	42 e3       	ldi	r20, 0x32	; 50
    24b8:	60 e0       	ldi	r22, 0x00	; 0
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	0e 94 56 09 	call	0x12ac	; 0x12ac <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    24c0:	2e e1       	ldi	r18, 0x1E	; 30
    24c2:	42 e3       	ldi	r20, 0x32	; 50
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	8c e3       	ldi	r24, 0x3C	; 60
    24c8:	0e 94 56 09 	call	0x12ac	; 0x12ac <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    24cc:	24 e1       	ldi	r18, 0x14	; 20
    24ce:	4c e3       	ldi	r20, 0x3C	; 60
    24d0:	63 e2       	ldi	r22, 0x23	; 35
    24d2:	8c e3       	ldi	r24, 0x3C	; 60
    24d4:	0e 94 56 09 	call	0x12ac	; 0x12ac <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    24d8:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    24dc:	88 23       	and	r24, r24
    24de:	31 f0       	breq	.+12     	; 0x24ec <glcd_test_scrolling_graph+0x4a>
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
    24e0:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <unit_test_return>
		}
	}	
}
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	0f 91       	pop	r16
    24ea:	08 95       	ret
			DEMO_RETURN();
    24ec:	cc 5e       	subi	r28, 0xEC	; 236
		for (n=0; n<=255; n += 20) {
    24ee:	c4 30       	cpi	r28, 0x04	; 4
    24f0:	01 f7       	brne	.-64     	; 0x24b2 <glcd_test_scrolling_graph+0x10>
    24f2:	cf ef       	ldi	r28, 0xFF	; 255
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
    24f4:	0c 2f       	mov	r16, r28
    24f6:	22 e3       	ldi	r18, 0x32	; 50
    24f8:	42 e3       	ldi	r20, 0x32	; 50
    24fa:	60 e0       	ldi	r22, 0x00	; 0
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	0e 94 56 09 	call	0x12ac	; 0x12ac <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    2502:	dc 2f       	mov	r29, r28
    2504:	d0 95       	com	r29
    2506:	0d 2f       	mov	r16, r29
    2508:	2e e1       	ldi	r18, 0x1E	; 30
    250a:	42 e3       	ldi	r20, 0x32	; 50
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	8c e3       	ldi	r24, 0x3C	; 60
    2510:	0e 94 56 09 	call	0x12ac	; 0x12ac <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    2514:	24 e1       	ldi	r18, 0x14	; 20
    2516:	4c e3       	ldi	r20, 0x3C	; 60
    2518:	63 e2       	ldi	r22, 0x23	; 35
    251a:	8c e3       	ldi	r24, 0x3C	; 60
    251c:	0e 94 56 09 	call	0x12ac	; 0x12ac <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    2520:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    2524:	81 11       	cpse	r24, r1
    2526:	dc cf       	rjmp	.-72     	; 0x24e0 <glcd_test_scrolling_graph+0x3e>
    2528:	c4 51       	subi	r28, 0x14	; 20
		for (n=0; n<=255; n += 20) {
    252a:	cb 3f       	cpi	r28, 0xFB	; 251
    252c:	19 f7       	brne	.-58     	; 0x24f4 <glcd_test_scrolling_graph+0x52>
    252e:	c0 cf       	rjmp	.-128    	; 0x24b0 <glcd_test_scrolling_graph+0xe>

00002530 <glcd_test_bitmap_128x64>:

#if defined (GLCD_UNIT_TEST_BITMAP_ENABLE)
void glcd_test_bitmap_128x64(void)
{
	glcd_draw_bitmap(bmp_oslogo);
    2530:	88 ea       	ldi	r24, 0xA8	; 168
    2532:	95 e0       	ldi	r25, 0x05	; 5
    2534:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <glcd_draw_bitmap>
	glcd_write();	
    2538:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
	while (1) {
		DEMO_RETURN();
    253c:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <unit_test_return>
    2540:	88 23       	and	r24, r24
    2542:	e1 f3       	breq	.-8      	; 0x253c <glcd_test_bitmap_128x64+0xc>
    2544:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <unit_test_return>
	}
}
    2548:	08 95       	ret

0000254a <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    254a:	0f 93       	push	r16
	font_current.font_table = font_table;
    254c:	e3 e9       	ldi	r30, 0x93	; 147
    254e:	f3 e0       	ldi	r31, 0x03	; 3
    2550:	91 83       	std	Z+1, r25	; 0x01
    2552:	80 83       	st	Z, r24
	font_current.width = width;
    2554:	62 83       	std	Z+2, r22	; 0x02
	font_current.height = height;
    2556:	43 83       	std	Z+3, r20	; 0x03
	font_current.start_char = start_char;
    2558:	24 83       	std	Z+4, r18	; 0x04
	font_current.end_char = end_char;
    255a:	05 83       	std	Z+5, r16	; 0x05
	font_current.table_type = STANG;
    255c:	16 82       	std	Z+6, r1	; 0x06
}
    255e:	0f 91       	pop	r16
    2560:	08 95       	ret

00002562 <glcd_tiny_draw_char>:

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
    2562:	1f 93       	push	r17
    2564:	cf 93       	push	r28
    2566:	df 93       	push	r29
    2568:	d8 2f       	mov	r29, r24
    256a:	16 2f       	mov	r17, r22
    256c:	c4 2f       	mov	r28, r20
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
    256e:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <font_current+0x3>
    2572:	28 30       	cpi	r18, 0x08	; 8
    2574:	b0 f5       	brcc	.+108    	; 0x25e2 <glcd_tiny_draw_char+0x80>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
    2576:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <font_current+0x4>
    257a:	48 17       	cp	r20, r24
    257c:	20 f0       	brcs	.+8      	; 0x2586 <glcd_tiny_draw_char+0x24>
    257e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <font_current+0x5>
    2582:	84 17       	cp	r24, r20
    2584:	08 f4       	brcc	.+2      	; 0x2588 <glcd_tiny_draw_char+0x26>
		c = '.';
    2586:	ce e2       	ldi	r28, 0x2E	; 46
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
    2588:	62 2f       	mov	r22, r18
    258a:	70 e0       	ldi	r23, 0x00	; 0
    258c:	6f 5f       	subi	r22, 0xFF	; 255
    258e:	7f 4f       	sbci	r23, 0xFF	; 255
    2590:	80 e3       	ldi	r24, 0x30	; 48
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
    2598:	16 17       	cp	r17, r22
    259a:	17 06       	cpc	r1, r23
    259c:	14 f5       	brge	.+68     	; 0x25e2 <glcd_tiny_draw_char+0x80>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
    259e:	40 91 95 03 	lds	r20, 0x0395	; 0x800395 <font_current+0x2>
    25a2:	6d 2f       	mov	r22, r29
    25a4:	64 0f       	add	r22, r20
    25a6:	77 27       	eor	r23, r23
    25a8:	77 1f       	adc	r23, r23
    25aa:	64 35       	cpi	r22, 0x54	; 84
    25ac:	71 05       	cpc	r23, r1
    25ae:	cc f4       	brge	.+50     	; 0x25e2 <glcd_tiny_draw_char+0x80>
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	82 0f       	add	r24, r18
    25b4:	28 2f       	mov	r18, r24
    25b6:	18 9f       	mul	r17, r24
    25b8:	20 0d       	add	r18, r0
    25ba:	11 24       	eor	r1, r1
    25bc:	4d 0f       	add	r20, r29
    25be:	62 2f       	mov	r22, r18
    25c0:	68 1b       	sub	r22, r24
    25c2:	8d 2f       	mov	r24, r29
    25c4:	0e 94 a1 07 	call	0xf42	; 0xf42 <glcd_update_bbox>
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)		
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    25c8:	84 e5       	ldi	r24, 0x54	; 84
    25ca:	18 9f       	mul	r17, r24
    25cc:	b0 01       	movw	r22, r0
    25ce:	11 24       	eor	r1, r1
	for ( i = 0; i < font_current.width; i++ ) {
    25d0:	80 e0       	ldi	r24, 0x00	; 0
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    25d2:	4c 2f       	mov	r20, r28
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	a8 2f       	mov	r26, r24
    25d8:	ad 0f       	add	r26, r29
	for ( i = 0; i < font_current.width; i++ ) {
    25da:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <font_current+0x2>
    25de:	89 17       	cp	r24, r25
    25e0:	20 f0       	brcs	.+8      	; 0x25ea <glcd_tiny_draw_char+0x88>
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		x++;
	}
}
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	1f 91       	pop	r17
    25e8:	08 95       	ret
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    25ea:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <font_current+0x4>
    25ee:	fa 01       	movw	r30, r20
    25f0:	e2 1b       	sub	r30, r18
    25f2:	f1 09       	sbc	r31, r1
    25f4:	9f 01       	movw	r18, r30
    25f6:	92 9f       	mul	r25, r18
    25f8:	f0 01       	movw	r30, r0
    25fa:	93 9f       	mul	r25, r19
    25fc:	f0 0d       	add	r31, r0
    25fe:	11 24       	eor	r1, r1
    2600:	9f 01       	movw	r18, r30
    2602:	28 0f       	add	r18, r24
    2604:	31 1d       	adc	r19, r1
    2606:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <font_current>
    260a:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <font_current+0x1>
    260e:	e2 0f       	add	r30, r18
    2610:	f3 1f       	adc	r31, r19
    2612:	e4 91       	lpm	r30, Z
    2614:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <glcd_buffer_selected>
    2618:	30 91 90 03 	lds	r19, 0x0390	; 0x800390 <glcd_buffer_selected+0x1>
    261c:	26 0f       	add	r18, r22
    261e:	37 1f       	adc	r19, r23
    2620:	a2 0f       	add	r26, r18
    2622:	b3 2f       	mov	r27, r19
    2624:	b1 1d       	adc	r27, r1
    2626:	ec 93       	st	X, r30
	for ( i = 0; i < font_current.width; i++ ) {
    2628:	8f 5f       	subi	r24, 0xFF	; 255
    262a:	d5 cf       	rjmp	.-86     	; 0x25d6 <glcd_tiny_draw_char+0x74>

0000262c <glcd_tiny_draw_string>:

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	c8 2f       	mov	r28, r24
    263a:	d6 2f       	mov	r29, r22
	if (font_current.height >= 8) {
    263c:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <font_current+0x3>
    2640:	88 30       	cpi	r24, 0x08	; 8
    2642:	30 f5       	brcc	.+76     	; 0x2690 <glcd_tiny_draw_string+0x64>
    2644:	8a 01       	movw	r16, r20
		x += (font_current.width + 1);
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
			x = 0; /* Ran out of this line */
			line++;
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    2646:	80 e3       	ldi	r24, 0x30	; 48
    2648:	e8 2e       	mov	r14, r24
    264a:	f1 2c       	mov	r15, r1
	while (*str) {
    264c:	f8 01       	movw	r30, r16
    264e:	41 91       	ld	r20, Z+
    2650:	8f 01       	movw	r16, r30
    2652:	44 23       	and	r20, r20
    2654:	e9 f0       	breq	.+58     	; 0x2690 <glcd_tiny_draw_string+0x64>
		glcd_tiny_draw_char(x, line, *str++);
    2656:	6d 2f       	mov	r22, r29
    2658:	8c 2f       	mov	r24, r28
    265a:	0e 94 b1 12 	call	0x2562	; 0x2562 <glcd_tiny_draw_char>
		x += (font_current.width + 1);
    265e:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <font_current+0x2>
    2662:	91 e0       	ldi	r25, 0x01	; 1
    2664:	98 0f       	add	r25, r24
    2666:	c9 0f       	add	r28, r25
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    2668:	2c 2f       	mov	r18, r28
    266a:	28 0f       	add	r18, r24
    266c:	33 27       	eor	r19, r19
    266e:	33 1f       	adc	r19, r19
    2670:	24 35       	cpi	r18, 0x54	; 84
    2672:	31 05       	cpc	r19, r1
    2674:	14 f0       	brlt	.+4      	; 0x267a <glcd_tiny_draw_string+0x4e>
			line++;
    2676:	df 5f       	subi	r29, 0xFF	; 255
			x = 0; /* Ran out of this line */
    2678:	c0 e0       	ldi	r28, 0x00	; 0
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    267a:	60 91 96 03 	lds	r22, 0x0396	; 0x800396 <font_current+0x3>
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	6f 5f       	subi	r22, 0xFF	; 255
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	c7 01       	movw	r24, r14
    2686:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
    268a:	d6 17       	cp	r29, r22
    268c:	17 06       	cpc	r1, r23
    268e:	f4 f2       	brlt	.-68     	; 0x264c <glcd_tiny_draw_string+0x20>
			return; /* Ran out of space :( */
	}
}
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	ff 90       	pop	r15
    269a:	ef 90       	pop	r14
    269c:	08 95       	ret

0000269e <glcd_tiny_draw_string_P>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, PGM_P str)
#else
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, const char *str)
#endif
{
    269e:	ef 92       	push	r14
    26a0:	ff 92       	push	r15
    26a2:	0f 93       	push	r16
    26a4:	1f 93       	push	r17
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	18 2f       	mov	r17, r24
    26ac:	06 2f       	mov	r16, r22
	if (font_current.height >= 8) {
    26ae:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <font_current+0x3>
    26b2:	88 30       	cpi	r24, 0x08	; 8
    26b4:	30 f5       	brcc	.+76     	; 0x2702 <glcd_tiny_draw_string_P+0x64>
    26b6:	ea 01       	movw	r28, r20
		x += (font_current.width + 1);
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
			x = 0; /* Ran out of this line */
			line++;
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    26b8:	80 e3       	ldi	r24, 0x30	; 48
    26ba:	e8 2e       	mov	r14, r24
    26bc:	f1 2c       	mov	r15, r1
		char c = pgm_read_byte(str++);
    26be:	fe 01       	movw	r30, r28
    26c0:	44 91       	lpm	r20, Z
		if (!c)
    26c2:	44 23       	and	r20, r20
    26c4:	f1 f0       	breq	.+60     	; 0x2702 <glcd_tiny_draw_string_P+0x64>
		glcd_tiny_draw_char(x, line, c);
    26c6:	60 2f       	mov	r22, r16
    26c8:	81 2f       	mov	r24, r17
    26ca:	0e 94 b1 12 	call	0x2562	; 0x2562 <glcd_tiny_draw_char>
		x += (font_current.width + 1);
    26ce:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <font_current+0x2>
    26d2:	91 e0       	ldi	r25, 0x01	; 1
    26d4:	98 0f       	add	r25, r24
    26d6:	19 0f       	add	r17, r25
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    26d8:	21 2f       	mov	r18, r17
    26da:	28 0f       	add	r18, r24
    26dc:	33 27       	eor	r19, r19
    26de:	33 1f       	adc	r19, r19
    26e0:	24 35       	cpi	r18, 0x54	; 84
    26e2:	31 05       	cpc	r19, r1
    26e4:	14 f0       	brlt	.+4      	; 0x26ea <glcd_tiny_draw_string_P+0x4c>
			line++;
    26e6:	0f 5f       	subi	r16, 0xFF	; 255
			x = 0; /* Ran out of this line */
    26e8:	10 e0       	ldi	r17, 0x00	; 0
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    26ea:	21 96       	adiw	r28, 0x01	; 1
    26ec:	60 91 96 03 	lds	r22, 0x0396	; 0x800396 <font_current+0x3>
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	6f 5f       	subi	r22, 0xFF	; 255
    26f4:	7f 4f       	sbci	r23, 0xFF	; 255
    26f6:	c7 01       	movw	r24, r14
    26f8:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
    26fc:	06 17       	cp	r16, r22
    26fe:	17 06       	cpc	r1, r23
    2700:	f4 f2       	brlt	.-68     	; 0x26be <glcd_tiny_draw_string_P+0x20>
			return; /* Ran out of space :( */
	}	
}
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	ff 90       	pop	r15
    270c:	ef 90       	pop	r14
    270e:	08 95       	ret

00002710 <glcd_tiny_draw_string_ammend>:

void glcd_tiny_draw_string_ammend(char *str) {
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	ec 01       	movw	r28, r24
	glcd_scroll_line();
    2716:	0e 94 0a 08 	call	0x1014	; 0x1014 <glcd_scroll_line>
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
    271a:	ae 01       	movw	r20, r28
    271c:	65 e0       	ldi	r22, 0x05	; 5
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	0e 94 16 13 	call	0x262c	; 0x262c <glcd_tiny_draw_string>
	glcd_write();
}
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
	glcd_write();
    2728:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <glcd_write>

0000272c <glcd_tiny_draw_string_ammend_P>:

void glcd_tiny_draw_string_ammend_P(const char *str) {
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	ec 01       	movw	r28, r24
	glcd_scroll_line();
    2732:	0e 94 0a 08 	call	0x1014	; 0x1014 <glcd_scroll_line>
	glcd_tiny_draw_string_P(0, (GLCD_LCD_HEIGHT/8-1), str);
    2736:	ae 01       	movw	r20, r28
    2738:	65 e0       	ldi	r22, 0x05	; 5
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	0e 94 4f 13 	call	0x269e	; 0x269e <glcd_tiny_draw_string_P>
	glcd_write();
}
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
	glcd_write();
    2744:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <glcd_write>

00002748 <glcd_tiny_invert_line>:

void glcd_tiny_invert_line(uint8_t line)
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
    2748:	68 2f       	mov	r22, r24
    274a:	66 0f       	add	r22, r22
    274c:	66 0f       	add	r22, r22
    274e:	66 0f       	add	r22, r22
    2750:	28 e0       	ldi	r18, 0x08	; 8
    2752:	43 e5       	ldi	r20, 0x53	; 83
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <glcd_invert_area>

0000275a <glcd_tiny_draw_char_xy>:
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    275a:	bf 92       	push	r11
    275c:	cf 92       	push	r12
    275e:	df 92       	push	r13
    2760:	ef 92       	push	r14
    2762:	ff 92       	push	r15
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	d8 2e       	mov	r13, r24
    276e:	c6 2e       	mov	r12, r22
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
    2770:	2f e2       	ldi	r18, 0x2F	; 47
    2772:	26 17       	cp	r18, r22
    2774:	08 f4       	brcc	.+2      	; 0x2778 <glcd_tiny_draw_char_xy+0x1e>
    2776:	60 c0       	rjmp	.+192    	; 0x2838 <glcd_tiny_draw_char_xy+0xde>
    2778:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <font_current+0x2>
    277c:	8d 0d       	add	r24, r13
    277e:	99 27       	eor	r25, r25
    2780:	99 1f       	adc	r25, r25
    2782:	84 35       	cpi	r24, 0x54	; 84
    2784:	91 05       	cpc	r25, r1
    2786:	0c f0       	brlt	.+2      	; 0x278a <glcd_tiny_draw_char_xy+0x30>
    2788:	57 c0       	rjmp	.+174    	; 0x2838 <glcd_tiny_draw_char_xy+0xde>
    278a:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <font_current+0x3>
    278e:	88 30       	cpi	r24, 0x08	; 8
    2790:	08 f0       	brcs	.+2      	; 0x2794 <glcd_tiny_draw_char_xy+0x3a>
    2792:	52 c0       	rjmp	.+164    	; 0x2838 <glcd_tiny_draw_char_xy+0xde>
    2794:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <font_current+0x6>
    2798:	81 11       	cpse	r24, r1
    279a:	4e c0       	rjmp	.+156    	; 0x2838 <glcd_tiny_draw_char_xy+0xde>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
    279c:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <font_current+0x4>
    27a0:	48 17       	cp	r20, r24
    27a2:	20 f0       	brcs	.+8      	; 0x27ac <glcd_tiny_draw_char_xy+0x52>
    27a4:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <font_current+0x5>
    27a8:	84 17       	cp	r24, r20
    27aa:	08 f4       	brcc	.+2      	; 0x27ae <glcd_tiny_draw_char_xy+0x54>
		c = '.';
    27ac:	4e e2       	ldi	r20, 0x2E	; 46
	}
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
    27ae:	f1 2c       	mov	r15, r1
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    27b0:	c4 2f       	mov	r28, r20
    27b2:	d0 e0       	ldi	r29, 0x00	; 0
    27b4:	bf 2c       	mov	r11, r15
    27b6:	bd 0c       	add	r11, r13
	for ( i = 0; i < font_current.width; i++ ) {
    27b8:	40 91 95 03 	lds	r20, 0x0395	; 0x800395 <font_current+0x2>
    27bc:	f4 16       	cp	r15, r20
    27be:	88 f0       	brcs	.+34     	; 0x27e2 <glcd_tiny_draw_char_xy+0x88>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
		}
		xvar++;
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
    27c0:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <font_current+0x3>
    27c4:	2c 0d       	add	r18, r12
    27c6:	4d 0d       	add	r20, r13
    27c8:	6c 2d       	mov	r22, r12
    27ca:	8d 2d       	mov	r24, r13
	
}
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	ff 90       	pop	r15
    27d6:	ef 90       	pop	r14
    27d8:	df 90       	pop	r13
    27da:	cf 90       	pop	r12
    27dc:	bf 90       	pop	r11
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
    27de:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <glcd_update_bbox>
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    27e2:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <font_current+0x4>
    27e6:	9e 01       	movw	r18, r28
    27e8:	28 1b       	sub	r18, r24
    27ea:	31 09       	sbc	r19, r1
    27ec:	42 9f       	mul	r20, r18
    27ee:	80 01       	movw	r16, r0
    27f0:	43 9f       	mul	r20, r19
    27f2:	10 0d       	add	r17, r0
    27f4:	11 24       	eor	r1, r1
    27f6:	0f 0d       	add	r16, r15
    27f8:	11 1d       	adc	r17, r1
    27fa:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <font_current>
    27fe:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <font_current+0x1>
    2802:	e0 0f       	add	r30, r16
    2804:	f1 1f       	adc	r31, r17
    2806:	e4 91       	lpm	r30, Z
		for (yvar = 0; yvar < font_current.height; yvar++) {
    2808:	e1 2c       	mov	r14, r1
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
    280a:	0e 2f       	mov	r16, r30
    280c:	10 e0       	ldi	r17, 0x00	; 0
		for (yvar = 0; yvar < font_current.height; yvar++) {
    280e:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <font_current+0x3>
    2812:	e8 16       	cp	r14, r24
    2814:	10 f0       	brcs	.+4      	; 0x281a <glcd_tiny_draw_char_xy+0xc0>
	for ( i = 0; i < font_current.width; i++ ) {
    2816:	f3 94       	inc	r15
    2818:	cd cf       	rjmp	.-102    	; 0x27b4 <glcd_tiny_draw_char_xy+0x5a>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
    281a:	a8 01       	movw	r20, r16
    281c:	0e 2c       	mov	r0, r14
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <glcd_tiny_draw_char_xy+0xca>
    2820:	55 95       	asr	r21
    2822:	47 95       	ror	r20
    2824:	0a 94       	dec	r0
    2826:	e2 f7       	brpl	.-8      	; 0x2820 <glcd_tiny_draw_char_xy+0xc6>
    2828:	41 70       	andi	r20, 0x01	; 1
    282a:	6e 2d       	mov	r22, r14
    282c:	6c 0d       	add	r22, r12
    282e:	8b 2d       	mov	r24, r11
    2830:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <glcd_set_pixel>
		for (yvar = 0; yvar < font_current.height; yvar++) {
    2834:	e3 94       	inc	r14
    2836:	eb cf       	rjmp	.-42     	; 0x280e <glcd_tiny_draw_char_xy+0xb4>
}
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	ff 90       	pop	r15
    2842:	ef 90       	pop	r14
    2844:	df 90       	pop	r13
    2846:	cf 90       	pop	r12
    2848:	bf 90       	pop	r11
    284a:	08 95       	ret

0000284c <main>:
int main(void)
{	
	
	
	/* Backlight pin PL3, set as output, set high for 100% output */
	DDRB |= (1<<PB2);
    284c:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<PB2);
    284e:	2a 9a       	sbi	0x05, 2	; 5
	
	DDRC |=(1<<PC3); 	//Ausgang LED
    2850:	3b 9a       	sbi	0x07, 3	; 7
	PORTC |= (1<<PC3);	//Led ein
    2852:	43 9a       	sbi	0x08, 3	; 8
		
	DDRD &= ~((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//Taster 1-3
    2854:	8a b1       	in	r24, 0x0a	; 10
    2856:	8b 79       	andi	r24, 0x9B	; 155
    2858:	8a b9       	out	0x0a, r24	; 10
	PORTD |= ((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//PUllups für Taster einschalten
    285a:	8b b1       	in	r24, 0x0b	; 11
    285c:	84 66       	ori	r24, 0x64	; 100
    285e:	8b b9       	out	0x0b, r24	; 11
	
	//Timer 1 Configuration
	OCR1A = 0x009C;	//OCR1A = 0x3D08;==1sec
    2860:	8c e9       	ldi	r24, 0x9C	; 156
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2868:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
    TCCR1B |= (1 << WGM12);
    286c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2870:	88 60       	ori	r24, 0x08	; 8
    2872:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    // Mode 4, CTC on OCR1A

    TIMSK1 |= (1 << OCIE1A);
    2876:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    287a:	82 60       	ori	r24, 0x02	; 2
    287c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    //Set interrupt on compare match

    TCCR1B |= (1 << CS12) | (1 << CS10);
    2880:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2884:	85 60       	ori	r24, 0x05	; 5
    2886:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    // set prescaler to 1024 and start the timer

    sei();
    288a:	78 94       	sei
	glcd_init();
    288c:	0e 94 33 08 	call	0x1066	; 0x1066 <glcd_init>
    // enable interrupts
 
	
	setup();
	
	glcd_clear();
    2890:	0e 94 da 07 	call	0xfb4	; 0xfb4 <glcd_clear>
	glcd_write();
    2894:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
	
	balk_lenght=16;//lenght of balken
    2898:	80 e1       	ldi	r24, 0x10	; 16
    289a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <balk_lenght>
	ball_pos_y = 20;//mittelpunkt ball startposition
    289e:	84 e1       	ldi	r24, 0x14	; 20
    28a0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <ball_pos_y>
	balken_pos_x = 8;//linke seite balken startposition
    28a4:	c8 e0       	ldi	r28, 0x08	; 8
    28a6:	c0 93 7b 01 	sts	0x017B, r28	; 0x80017b <balken_pos_x>
	ball_vert_richt = DOWN; //0=down 1=up
    28aa:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <ball_vert_richt>
	ball_horiz_richt = LEFT; 
    28ae:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <ball_horiz_richt>
	balk_horiz_richt=0;//0=left to right, 1=right to left
    28b2:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <balk_horiz_richt>
	ball_speed_y=3;
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <ball_speed_y>
	ball_speed_x=0;
    28bc:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <ball_speed_x>
	ball_speed_y_counter=0;
    28c0:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <ball_speed_y_counter>
	
	balk_vert_pos=46; //Startposition bottom of screen
    28c4:	8e e2       	ldi	r24, 0x2E	; 46
    28c6:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <balk_vert_pos>
	balk_end_left=balken_pos_x;
    28ca:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <balken_pos_x>
    28ce:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <balk_end_left>
	balk_end_right=balken_pos_x+balk_lenght;
    28d2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <balken_pos_x>
    28d6:	80 5f       	subi	r24, 0xF0	; 240
    28d8:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <balk_end_right>
	balk_lenght=16;//lenght of balken
	ball_pos_x=17;
    28dc:	81 e1       	ldi	r24, 0x11	; 17
    28de:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <ball_pos_x>
	ball_radius=4;
    28e2:	84 e0       	ldi	r24, 0x04	; 4
    28e4:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ball_radius>
	ball_refresh=EIN;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <ball_refresh>
	balk_refresh=EIN;
    28ee:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <balk_refresh>
	// Display
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    28f2:	0f e7       	ldi	r16, 0x7F	; 127
    28f4:	20 e2       	ldi	r18, 0x20	; 32
    28f6:	47 e0       	ldi	r20, 0x07	; 7
    28f8:	65 e0       	ldi	r22, 0x05	; 5
    28fa:	80 e6       	ldi	r24, 0x60	; 96
    28fc:	92 e0       	ldi	r25, 0x02	; 2
    28fe:	0e 94 a5 12 	call	0x254a	; 0x254a <glcd_tiny_set_font>
	glcd_clear_buffer();
    2902:	0e 94 ee 07 	call	0xfdc	; 0xfdc <glcd_clear_buffer>

	state=8;
    2906:	c0 93 86 01 	sts	0x0186, r28	; 0x800186 <state>
		
		
		
		if(T_RED)//move right
		{
			entprell=RELOAD_ENTPRELL;
    290a:	d2 e0       	ldi	r29, 0x02	; 2
			if((balken_pos_x+balk_lenght)!=84)balken_pos_x++;
			balk_horiz_richt=0;
			balk_refresh=EIN;
    290c:	c1 e0       	ldi	r28, 0x01	; 1
			{
				ball_speed_x=6;
				ball_horiz_richt=LEFT;
			}else	if((ball_pos_x-ball_radius)>balk_end_left+10)
					{
						ball_speed_x=6;
    290e:	16 e0       	ldi	r17, 0x06	; 6
		block1(ball_pos_x, ball_pos_y);
    2910:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <ball_pos_y>
    2914:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ball_pos_x>
    2918:	0e 94 69 07 	call	0xed2	; 0xed2 <block1>
		if(T_RED)//move right
    291c:	89 b1       	in	r24, 0x09	; 9
    291e:	80 72       	andi	r24, 0x20	; 32
    2920:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <entprell>
    2924:	89 2b       	or	r24, r25
    2926:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <balk_lenght>
    292a:	81 11       	cpse	r24, r1
    292c:	14 c0       	rjmp	.+40     	; 0x2956 <main+0x10a>
			entprell=RELOAD_ENTPRELL;
    292e:	d0 93 8d 01 	sts	0x018D, r29	; 0x80018d <entprell>
			if((balken_pos_x+balk_lenght)!=84)balken_pos_x++;
    2932:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <balken_pos_x>
    2936:	43 2f       	mov	r20, r19
    2938:	48 0f       	add	r20, r24
    293a:	55 27       	eor	r21, r21
    293c:	55 1f       	adc	r21, r21
    293e:	44 35       	cpi	r20, 0x54	; 84
    2940:	51 05       	cpc	r21, r1
    2942:	29 f0       	breq	.+10     	; 0x294e <main+0x102>
    2944:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <balken_pos_x>
    2948:	8f 5f       	subi	r24, 0xFF	; 255
    294a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <balken_pos_x>
			balk_horiz_richt=0;
    294e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <balk_horiz_richt>
			balk_refresh=EIN;
    2952:	c0 93 7d 01 	sts	0x017D, r28	; 0x80017d <balk_refresh>
		if(T_BLUE)//move left
    2956:	89 b1       	in	r24, 0x09	; 9
    2958:	80 74       	andi	r24, 0x40	; 64
    295a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <entprell>
    295e:	89 2b       	or	r24, r25
    2960:	79 f4       	brne	.+30     	; 0x2980 <main+0x134>
			entprell=RELOAD_ENTPRELL;
    2962:	d0 93 8d 01 	sts	0x018D, r29	; 0x80018d <entprell>
			if(balken_pos_x!=0)balken_pos_x--;
    2966:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <balken_pos_x>
    296a:	88 23       	and	r24, r24
    296c:	29 f0       	breq	.+10     	; 0x2978 <main+0x12c>
    296e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <balken_pos_x>
    2972:	81 50       	subi	r24, 0x01	; 1
    2974:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <balken_pos_x>
			balk_horiz_richt=1;
    2978:	c0 93 84 01 	sts	0x0184, r28	; 0x800184 <balk_horiz_richt>
			balk_refresh=EIN;
    297c:	c0 93 7d 01 	sts	0x017D, r28	; 0x80017d <balk_refresh>
		balk_end_left=balken_pos_x;
    2980:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <balken_pos_x>
    2984:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <balk_end_left>
		balk_end_right=balken_pos_x+balk_lenght;
    2988:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <balken_pos_x>
    298c:	93 0f       	add	r25, r19
    298e:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <balk_end_right>
		if(ball_pos_y==4)ball_vert_richt=DOWN;//reached top screen border
    2992:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ball_pos_y>
    2996:	84 30       	cpi	r24, 0x04	; 4
    2998:	11 f4       	brne	.+4      	; 0x299e <main+0x152>
    299a:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <ball_vert_richt>
		if((ball_pos_y==42)&&((ball_pos_x+ball_radius)>balk_end_left)&&((ball_pos_x-ball_radius)<balk_end_right))
    299e:	30 91 82 01 	lds	r19, 0x0182	; 0x800182 <ball_pos_y>
    29a2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ball_pos_x>
    29a6:	40 91 88 01 	lds	r20, 0x0188	; 0x800188 <ball_radius>
    29aa:	68 2f       	mov	r22, r24
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	a4 2f       	mov	r26, r20
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	fd 01       	movw	r30, r26
    29b4:	e6 0f       	add	r30, r22
    29b6:	f7 1f       	adc	r31, r23
    29b8:	3a 32       	cpi	r19, 0x2A	; 42
    29ba:	b1 f4       	brne	.+44     	; 0x29e8 <main+0x19c>
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	2e 17       	cp	r18, r30
    29c0:	3f 07       	cpc	r19, r31
    29c2:	94 f4       	brge	.+36     	; 0x29e8 <main+0x19c>
    29c4:	6a 1b       	sub	r22, r26
    29c6:	7b 0b       	sbc	r23, r27
    29c8:	96 17       	cp	r25, r22
    29ca:	17 06       	cpc	r1, r23
    29cc:	69 f0       	breq	.+26     	; 0x29e8 <main+0x19c>
    29ce:	64 f0       	brlt	.+24     	; 0x29e8 <main+0x19c>
			ball_vert_richt=UP;
    29d0:	c0 93 87 01 	sts	0x0187, r28	; 0x800187 <ball_vert_richt>
			if((ball_pos_x+ball_radius)<(balk_end_left+5))
    29d4:	d9 01       	movw	r26, r18
    29d6:	14 96       	adiw	r26, 0x04	; 4
    29d8:	ae 17       	cp	r26, r30
    29da:	bf 07       	cpc	r27, r31
    29dc:	0c f4       	brge	.+2      	; 0x29e0 <main+0x194>
    29de:	61 c0       	rjmp	.+194    	; 0x2aa2 <main+0x256>
				ball_speed_x=6;
    29e0:	10 93 8b 01 	sts	0x018B, r17	; 0x80018b <ball_speed_x>
				ball_horiz_richt=LEFT;
    29e4:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <ball_horiz_richt>
					}else ball_speed_x=0;
			
			
		}
		
		if(ball_pos_x-ball_radius==0)ball_horiz_richt=RIGHT;
    29e8:	84 13       	cpse	r24, r20
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <main+0x1a4>
    29ec:	c0 93 91 01 	sts	0x0191, r28	; 0x800191 <ball_horiz_richt>
		if(ball_pos_x+ball_radius==84)ball_horiz_richt=LEFT;
    29f0:	e4 35       	cpi	r30, 0x54	; 84
    29f2:	f1 05       	cpc	r31, r1
    29f4:	11 f4       	brne	.+4      	; 0x29fa <main+0x1ae>
    29f6:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <ball_horiz_richt>
		sprintf(buffer, "end_right%.d", balk_end_right);
		glcd_draw_string_xy(20, 20, buffer);
		*/
		
		
		if((ball_refresh==EIN)||(balk_refresh==EIN))//only draw if anything has changed
    29fa:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <ball_refresh>
    29fe:	91 30       	cpi	r25, 0x01	; 1
    2a00:	29 f0       	breq	.+10     	; 0x2a0c <main+0x1c0>
    2a02:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <balk_refresh>
    2a06:	91 30       	cpi	r25, 0x01	; 1
    2a08:	09 f0       	breq	.+2      	; 0x2a0c <main+0x1c0>
    2a0a:	82 cf       	rjmp	.-252    	; 0x2910 <main+0xc4>
		{
			if(ball_refresh==EIN)//only draw ball when position changed
    2a0c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <ball_refresh>
    2a10:	91 30       	cpi	r25, 0x01	; 1
    2a12:	f1 f4       	brne	.+60     	; 0x2a50 <main+0x204>
			{
				ball_refresh=AUS;
    2a14:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <ball_refresh>
				//delete old ball draw new one
				if(ball_vert_richt==DOWN)
    2a18:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <ball_vert_richt>
				{
					glcd_draw_circle(ball_pos_x, ball_pos_y-1, ball_radius, WHITE);
    2a1c:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <ball_pos_y>
				if(ball_vert_richt==DOWN)
    2a20:	91 11       	cpse	r25, r1
    2a22:	4c c0       	rjmp	.+152    	; 0x2abc <main+0x270>
					glcd_draw_circle(ball_pos_x, ball_pos_y-1, ball_radius, WHITE);
    2a24:	61 50       	subi	r22, 0x01	; 1
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <glcd_draw_circle>
					glcd_draw_circle(ball_pos_x, ball_pos_y, ball_radius, BLACK);
    2a2c:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <ball_pos_y>
    2a30:	21 e0       	ldi	r18, 0x01	; 1
    2a32:	40 91 88 01 	lds	r20, 0x0188	; 0x800188 <ball_radius>
    2a36:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ball_pos_x>
				}else glcd_draw_circle(ball_pos_x, ball_pos_y+1, ball_radius, WHITE);glcd_draw_circle(ball_pos_x, ball_pos_y, ball_radius, BLACK);
    2a3a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <glcd_draw_circle>
    2a3e:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <ball_pos_y>
    2a42:	21 e0       	ldi	r18, 0x01	; 1
    2a44:	40 91 88 01 	lds	r20, 0x0188	; 0x800188 <ball_radius>
    2a48:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ball_pos_x>
    2a4c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <glcd_draw_circle>
			}
			
			if(balk_refresh==EIN)//only draw balk when position changed
    2a50:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <balk_refresh>
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	11 f5       	brne	.+68     	; 0x2a9c <main+0x250>
			{
				balk_refresh=AUS;
    2a58:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <balk_refresh>
				//delete old plank draw new one
				if(balk_horiz_richt==0)
    2a5c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <balk_horiz_richt>
    2a60:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <balk_vert_pos>
    2a64:	81 11       	cpse	r24, r1
    2a66:	2d c0       	rjmp	.+90     	; 0x2ac2 <main+0x276>
				{
					glcd_draw_rect(balken_pos_x-1, balk_vert_pos, 16, 2, WHITE);
    2a68:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <balken_pos_x>
    2a6c:	00 e0       	ldi	r16, 0x00	; 0
    2a6e:	22 e0       	ldi	r18, 0x02	; 2
    2a70:	40 e1       	ldi	r20, 0x10	; 16
    2a72:	81 50       	subi	r24, 0x01	; 1
    2a74:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <glcd_draw_rect>
					glcd_draw_rect(balken_pos_x, balk_vert_pos, 16, 2, BLACK);
    2a78:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <balken_pos_x>
    2a7c:	01 e0       	ldi	r16, 0x01	; 1
    2a7e:	22 e0       	ldi	r18, 0x02	; 2
    2a80:	40 e1       	ldi	r20, 0x10	; 16
    2a82:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <balk_vert_pos>
				}else glcd_draw_rect(balken_pos_x+1, balk_vert_pos, 16, 2, WHITE);glcd_draw_rect(balken_pos_x, balk_vert_pos, 16, 2, BLACK);
    2a86:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <glcd_draw_rect>
    2a8a:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <balken_pos_x>
    2a8e:	01 e0       	ldi	r16, 0x01	; 1
    2a90:	22 e0       	ldi	r18, 0x02	; 2
    2a92:	40 e1       	ldi	r20, 0x10	; 16
    2a94:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <balk_vert_pos>
    2a98:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <glcd_draw_rect>
			}
			glcd_write();
    2a9c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <glcd_write>
    2aa0:	37 cf       	rjmp	.-402    	; 0x2910 <main+0xc4>
			}else	if((ball_pos_x-ball_radius)>balk_end_left+10)
    2aa2:	26 5f       	subi	r18, 0xF6	; 246
    2aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa6:	26 17       	cp	r18, r22
    2aa8:	37 07       	cpc	r19, r23
    2aaa:	2c f4       	brge	.+10     	; 0x2ab6 <main+0x26a>
						ball_speed_x=6;
    2aac:	10 93 8b 01 	sts	0x018B, r17	; 0x80018b <ball_speed_x>
						ball_horiz_richt=RIGHT;
    2ab0:	c0 93 91 01 	sts	0x0191, r28	; 0x800191 <ball_horiz_richt>
    2ab4:	99 cf       	rjmp	.-206    	; 0x29e8 <main+0x19c>
					}else ball_speed_x=0;
    2ab6:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <ball_speed_x>
    2aba:	96 cf       	rjmp	.-212    	; 0x29e8 <main+0x19c>
				}else glcd_draw_circle(ball_pos_x, ball_pos_y+1, ball_radius, WHITE);glcd_draw_circle(ball_pos_x, ball_pos_y, ball_radius, BLACK);
    2abc:	6f 5f       	subi	r22, 0xFF	; 255
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	bc cf       	rjmp	.-136    	; 0x2a3a <main+0x1ee>
				}else glcd_draw_rect(balken_pos_x+1, balk_vert_pos, 16, 2, WHITE);glcd_draw_rect(balken_pos_x, balk_vert_pos, 16, 2, BLACK);
    2ac2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <balken_pos_x>
    2ac6:	00 e0       	ldi	r16, 0x00	; 0
    2ac8:	22 e0       	ldi	r18, 0x02	; 2
    2aca:	40 e1       	ldi	r20, 0x10	; 16
    2acc:	8f 5f       	subi	r24, 0xFF	; 255
    2ace:	db cf       	rjmp	.-74     	; 0x2a86 <main+0x23a>

00002ad0 <__cmpsf2>:
    2ad0:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <__fp_cmp>
    2ad4:	08 f4       	brcc	.+2      	; 0x2ad8 <__cmpsf2+0x8>
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	08 95       	ret

00002ada <__fixunssfsi>:
    2ada:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__fp_splitA>
    2ade:	88 f0       	brcs	.+34     	; 0x2b02 <__fixunssfsi+0x28>
    2ae0:	9f 57       	subi	r25, 0x7F	; 127
    2ae2:	98 f0       	brcs	.+38     	; 0x2b0a <__fixunssfsi+0x30>
    2ae4:	b9 2f       	mov	r27, r25
    2ae6:	99 27       	eor	r25, r25
    2ae8:	b7 51       	subi	r27, 0x17	; 23
    2aea:	b0 f0       	brcs	.+44     	; 0x2b18 <__fixunssfsi+0x3e>
    2aec:	e1 f0       	breq	.+56     	; 0x2b26 <__fixunssfsi+0x4c>
    2aee:	66 0f       	add	r22, r22
    2af0:	77 1f       	adc	r23, r23
    2af2:	88 1f       	adc	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	1a f0       	brmi	.+6      	; 0x2afe <__fixunssfsi+0x24>
    2af8:	ba 95       	dec	r27
    2afa:	c9 f7       	brne	.-14     	; 0x2aee <__fixunssfsi+0x14>
    2afc:	14 c0       	rjmp	.+40     	; 0x2b26 <__fixunssfsi+0x4c>
    2afe:	b1 30       	cpi	r27, 0x01	; 1
    2b00:	91 f0       	breq	.+36     	; 0x2b26 <__fixunssfsi+0x4c>
    2b02:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__fp_zero>
    2b06:	b1 e0       	ldi	r27, 0x01	; 1
    2b08:	08 95       	ret
    2b0a:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__fp_zero>
    2b0e:	67 2f       	mov	r22, r23
    2b10:	78 2f       	mov	r23, r24
    2b12:	88 27       	eor	r24, r24
    2b14:	b8 5f       	subi	r27, 0xF8	; 248
    2b16:	39 f0       	breq	.+14     	; 0x2b26 <__fixunssfsi+0x4c>
    2b18:	b9 3f       	cpi	r27, 0xF9	; 249
    2b1a:	cc f3       	brlt	.-14     	; 0x2b0e <__fixunssfsi+0x34>
    2b1c:	86 95       	lsr	r24
    2b1e:	77 95       	ror	r23
    2b20:	67 95       	ror	r22
    2b22:	b3 95       	inc	r27
    2b24:	d9 f7       	brne	.-10     	; 0x2b1c <__fixunssfsi+0x42>
    2b26:	3e f4       	brtc	.+14     	; 0x2b36 <__fixunssfsi+0x5c>
    2b28:	90 95       	com	r25
    2b2a:	80 95       	com	r24
    2b2c:	70 95       	com	r23
    2b2e:	61 95       	neg	r22
    2b30:	7f 4f       	sbci	r23, 0xFF	; 255
    2b32:	8f 4f       	sbci	r24, 0xFF	; 255
    2b34:	9f 4f       	sbci	r25, 0xFF	; 255
    2b36:	08 95       	ret

00002b38 <__floatunsisf>:
    2b38:	e8 94       	clt
    2b3a:	09 c0       	rjmp	.+18     	; 0x2b4e <__floatsisf+0x12>

00002b3c <__floatsisf>:
    2b3c:	97 fb       	bst	r25, 7
    2b3e:	3e f4       	brtc	.+14     	; 0x2b4e <__floatsisf+0x12>
    2b40:	90 95       	com	r25
    2b42:	80 95       	com	r24
    2b44:	70 95       	com	r23
    2b46:	61 95       	neg	r22
    2b48:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4e:	99 23       	and	r25, r25
    2b50:	a9 f0       	breq	.+42     	; 0x2b7c <__floatsisf+0x40>
    2b52:	f9 2f       	mov	r31, r25
    2b54:	96 e9       	ldi	r25, 0x96	; 150
    2b56:	bb 27       	eor	r27, r27
    2b58:	93 95       	inc	r25
    2b5a:	f6 95       	lsr	r31
    2b5c:	87 95       	ror	r24
    2b5e:	77 95       	ror	r23
    2b60:	67 95       	ror	r22
    2b62:	b7 95       	ror	r27
    2b64:	f1 11       	cpse	r31, r1
    2b66:	f8 cf       	rjmp	.-16     	; 0x2b58 <__floatsisf+0x1c>
    2b68:	fa f4       	brpl	.+62     	; 0x2ba8 <__floatsisf+0x6c>
    2b6a:	bb 0f       	add	r27, r27
    2b6c:	11 f4       	brne	.+4      	; 0x2b72 <__floatsisf+0x36>
    2b6e:	60 ff       	sbrs	r22, 0
    2b70:	1b c0       	rjmp	.+54     	; 0x2ba8 <__floatsisf+0x6c>
    2b72:	6f 5f       	subi	r22, 0xFF	; 255
    2b74:	7f 4f       	sbci	r23, 0xFF	; 255
    2b76:	8f 4f       	sbci	r24, 0xFF	; 255
    2b78:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7a:	16 c0       	rjmp	.+44     	; 0x2ba8 <__floatsisf+0x6c>
    2b7c:	88 23       	and	r24, r24
    2b7e:	11 f0       	breq	.+4      	; 0x2b84 <__floatsisf+0x48>
    2b80:	96 e9       	ldi	r25, 0x96	; 150
    2b82:	11 c0       	rjmp	.+34     	; 0x2ba6 <__floatsisf+0x6a>
    2b84:	77 23       	and	r23, r23
    2b86:	21 f0       	breq	.+8      	; 0x2b90 <__floatsisf+0x54>
    2b88:	9e e8       	ldi	r25, 0x8E	; 142
    2b8a:	87 2f       	mov	r24, r23
    2b8c:	76 2f       	mov	r23, r22
    2b8e:	05 c0       	rjmp	.+10     	; 0x2b9a <__floatsisf+0x5e>
    2b90:	66 23       	and	r22, r22
    2b92:	71 f0       	breq	.+28     	; 0x2bb0 <__floatsisf+0x74>
    2b94:	96 e8       	ldi	r25, 0x86	; 134
    2b96:	86 2f       	mov	r24, r22
    2b98:	70 e0       	ldi	r23, 0x00	; 0
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	2a f0       	brmi	.+10     	; 0x2ba8 <__floatsisf+0x6c>
    2b9e:	9a 95       	dec	r25
    2ba0:	66 0f       	add	r22, r22
    2ba2:	77 1f       	adc	r23, r23
    2ba4:	88 1f       	adc	r24, r24
    2ba6:	da f7       	brpl	.-10     	; 0x2b9e <__floatsisf+0x62>
    2ba8:	88 0f       	add	r24, r24
    2baa:	96 95       	lsr	r25
    2bac:	87 95       	ror	r24
    2bae:	97 f9       	bld	r25, 7
    2bb0:	08 95       	ret

00002bb2 <__fp_cmp>:
    2bb2:	99 0f       	add	r25, r25
    2bb4:	00 08       	sbc	r0, r0
    2bb6:	55 0f       	add	r21, r21
    2bb8:	aa 0b       	sbc	r26, r26
    2bba:	e0 e8       	ldi	r30, 0x80	; 128
    2bbc:	fe ef       	ldi	r31, 0xFE	; 254
    2bbe:	16 16       	cp	r1, r22
    2bc0:	17 06       	cpc	r1, r23
    2bc2:	e8 07       	cpc	r30, r24
    2bc4:	f9 07       	cpc	r31, r25
    2bc6:	c0 f0       	brcs	.+48     	; 0x2bf8 <__fp_cmp+0x46>
    2bc8:	12 16       	cp	r1, r18
    2bca:	13 06       	cpc	r1, r19
    2bcc:	e4 07       	cpc	r30, r20
    2bce:	f5 07       	cpc	r31, r21
    2bd0:	98 f0       	brcs	.+38     	; 0x2bf8 <__fp_cmp+0x46>
    2bd2:	62 1b       	sub	r22, r18
    2bd4:	73 0b       	sbc	r23, r19
    2bd6:	84 0b       	sbc	r24, r20
    2bd8:	95 0b       	sbc	r25, r21
    2bda:	39 f4       	brne	.+14     	; 0x2bea <__fp_cmp+0x38>
    2bdc:	0a 26       	eor	r0, r26
    2bde:	61 f0       	breq	.+24     	; 0x2bf8 <__fp_cmp+0x46>
    2be0:	23 2b       	or	r18, r19
    2be2:	24 2b       	or	r18, r20
    2be4:	25 2b       	or	r18, r21
    2be6:	21 f4       	brne	.+8      	; 0x2bf0 <__fp_cmp+0x3e>
    2be8:	08 95       	ret
    2bea:	0a 26       	eor	r0, r26
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <__fp_cmp+0x3e>
    2bee:	a1 40       	sbci	r26, 0x01	; 1
    2bf0:	a6 95       	lsr	r26
    2bf2:	8f ef       	ldi	r24, 0xFF	; 255
    2bf4:	81 1d       	adc	r24, r1
    2bf6:	81 1d       	adc	r24, r1
    2bf8:	08 95       	ret

00002bfa <__fp_split3>:
    2bfa:	57 fd       	sbrc	r21, 7
    2bfc:	90 58       	subi	r25, 0x80	; 128
    2bfe:	44 0f       	add	r20, r20
    2c00:	55 1f       	adc	r21, r21
    2c02:	59 f0       	breq	.+22     	; 0x2c1a <__fp_splitA+0x10>
    2c04:	5f 3f       	cpi	r21, 0xFF	; 255
    2c06:	71 f0       	breq	.+28     	; 0x2c24 <__fp_splitA+0x1a>
    2c08:	47 95       	ror	r20

00002c0a <__fp_splitA>:
    2c0a:	88 0f       	add	r24, r24
    2c0c:	97 fb       	bst	r25, 7
    2c0e:	99 1f       	adc	r25, r25
    2c10:	61 f0       	breq	.+24     	; 0x2c2a <__fp_splitA+0x20>
    2c12:	9f 3f       	cpi	r25, 0xFF	; 255
    2c14:	79 f0       	breq	.+30     	; 0x2c34 <__fp_splitA+0x2a>
    2c16:	87 95       	ror	r24
    2c18:	08 95       	ret
    2c1a:	12 16       	cp	r1, r18
    2c1c:	13 06       	cpc	r1, r19
    2c1e:	14 06       	cpc	r1, r20
    2c20:	55 1f       	adc	r21, r21
    2c22:	f2 cf       	rjmp	.-28     	; 0x2c08 <__fp_split3+0xe>
    2c24:	46 95       	lsr	r20
    2c26:	f1 df       	rcall	.-30     	; 0x2c0a <__fp_splitA>
    2c28:	08 c0       	rjmp	.+16     	; 0x2c3a <__fp_splitA+0x30>
    2c2a:	16 16       	cp	r1, r22
    2c2c:	17 06       	cpc	r1, r23
    2c2e:	18 06       	cpc	r1, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	f1 cf       	rjmp	.-30     	; 0x2c16 <__fp_splitA+0xc>
    2c34:	86 95       	lsr	r24
    2c36:	71 05       	cpc	r23, r1
    2c38:	61 05       	cpc	r22, r1
    2c3a:	08 94       	sec
    2c3c:	08 95       	ret

00002c3e <__fp_zero>:
    2c3e:	e8 94       	clt

00002c40 <__fp_szero>:
    2c40:	bb 27       	eor	r27, r27
    2c42:	66 27       	eor	r22, r22
    2c44:	77 27       	eor	r23, r23
    2c46:	cb 01       	movw	r24, r22
    2c48:	97 f9       	bld	r25, 7
    2c4a:	08 95       	ret

00002c4c <__gesf2>:
    2c4c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <__fp_cmp>
    2c50:	08 f4       	brcc	.+2      	; 0x2c54 <__gesf2+0x8>
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	08 95       	ret

00002c56 <__mulsf3>:
    2c56:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__mulsf3x>
    2c5a:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__fp_round>
    2c5e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__fp_pscA>
    2c62:	38 f0       	brcs	.+14     	; 0x2c72 <__mulsf3+0x1c>
    2c64:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <__fp_pscB>
    2c68:	20 f0       	brcs	.+8      	; 0x2c72 <__mulsf3+0x1c>
    2c6a:	95 23       	and	r25, r21
    2c6c:	11 f0       	breq	.+4      	; 0x2c72 <__mulsf3+0x1c>
    2c6e:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__fp_inf>
    2c72:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__fp_nan>
    2c76:	11 24       	eor	r1, r1
    2c78:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__fp_szero>

00002c7c <__mulsf3x>:
    2c7c:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__fp_split3>
    2c80:	70 f3       	brcs	.-36     	; 0x2c5e <__mulsf3+0x8>

00002c82 <__mulsf3_pse>:
    2c82:	95 9f       	mul	r25, r21
    2c84:	c1 f3       	breq	.-16     	; 0x2c76 <__mulsf3+0x20>
    2c86:	95 0f       	add	r25, r21
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	55 1f       	adc	r21, r21
    2c8c:	62 9f       	mul	r22, r18
    2c8e:	f0 01       	movw	r30, r0
    2c90:	72 9f       	mul	r23, r18
    2c92:	bb 27       	eor	r27, r27
    2c94:	f0 0d       	add	r31, r0
    2c96:	b1 1d       	adc	r27, r1
    2c98:	63 9f       	mul	r22, r19
    2c9a:	aa 27       	eor	r26, r26
    2c9c:	f0 0d       	add	r31, r0
    2c9e:	b1 1d       	adc	r27, r1
    2ca0:	aa 1f       	adc	r26, r26
    2ca2:	64 9f       	mul	r22, r20
    2ca4:	66 27       	eor	r22, r22
    2ca6:	b0 0d       	add	r27, r0
    2ca8:	a1 1d       	adc	r26, r1
    2caa:	66 1f       	adc	r22, r22
    2cac:	82 9f       	mul	r24, r18
    2cae:	22 27       	eor	r18, r18
    2cb0:	b0 0d       	add	r27, r0
    2cb2:	a1 1d       	adc	r26, r1
    2cb4:	62 1f       	adc	r22, r18
    2cb6:	73 9f       	mul	r23, r19
    2cb8:	b0 0d       	add	r27, r0
    2cba:	a1 1d       	adc	r26, r1
    2cbc:	62 1f       	adc	r22, r18
    2cbe:	83 9f       	mul	r24, r19
    2cc0:	a0 0d       	add	r26, r0
    2cc2:	61 1d       	adc	r22, r1
    2cc4:	22 1f       	adc	r18, r18
    2cc6:	74 9f       	mul	r23, r20
    2cc8:	33 27       	eor	r19, r19
    2cca:	a0 0d       	add	r26, r0
    2ccc:	61 1d       	adc	r22, r1
    2cce:	23 1f       	adc	r18, r19
    2cd0:	84 9f       	mul	r24, r20
    2cd2:	60 0d       	add	r22, r0
    2cd4:	21 1d       	adc	r18, r1
    2cd6:	82 2f       	mov	r24, r18
    2cd8:	76 2f       	mov	r23, r22
    2cda:	6a 2f       	mov	r22, r26
    2cdc:	11 24       	eor	r1, r1
    2cde:	9f 57       	subi	r25, 0x7F	; 127
    2ce0:	50 40       	sbci	r21, 0x00	; 0
    2ce2:	9a f0       	brmi	.+38     	; 0x2d0a <__mulsf3_pse+0x88>
    2ce4:	f1 f0       	breq	.+60     	; 0x2d22 <__mulsf3_pse+0xa0>
    2ce6:	88 23       	and	r24, r24
    2ce8:	4a f0       	brmi	.+18     	; 0x2cfc <__mulsf3_pse+0x7a>
    2cea:	ee 0f       	add	r30, r30
    2cec:	ff 1f       	adc	r31, r31
    2cee:	bb 1f       	adc	r27, r27
    2cf0:	66 1f       	adc	r22, r22
    2cf2:	77 1f       	adc	r23, r23
    2cf4:	88 1f       	adc	r24, r24
    2cf6:	91 50       	subi	r25, 0x01	; 1
    2cf8:	50 40       	sbci	r21, 0x00	; 0
    2cfa:	a9 f7       	brne	.-22     	; 0x2ce6 <__mulsf3_pse+0x64>
    2cfc:	9e 3f       	cpi	r25, 0xFE	; 254
    2cfe:	51 05       	cpc	r21, r1
    2d00:	80 f0       	brcs	.+32     	; 0x2d22 <__mulsf3_pse+0xa0>
    2d02:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__fp_inf>
    2d06:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__fp_szero>
    2d0a:	5f 3f       	cpi	r21, 0xFF	; 255
    2d0c:	e4 f3       	brlt	.-8      	; 0x2d06 <__mulsf3_pse+0x84>
    2d0e:	98 3e       	cpi	r25, 0xE8	; 232
    2d10:	d4 f3       	brlt	.-12     	; 0x2d06 <__mulsf3_pse+0x84>
    2d12:	86 95       	lsr	r24
    2d14:	77 95       	ror	r23
    2d16:	67 95       	ror	r22
    2d18:	b7 95       	ror	r27
    2d1a:	f7 95       	ror	r31
    2d1c:	e7 95       	ror	r30
    2d1e:	9f 5f       	subi	r25, 0xFF	; 255
    2d20:	c1 f7       	brne	.-16     	; 0x2d12 <__mulsf3_pse+0x90>
    2d22:	fe 2b       	or	r31, r30
    2d24:	88 0f       	add	r24, r24
    2d26:	91 1d       	adc	r25, r1
    2d28:	96 95       	lsr	r25
    2d2a:	87 95       	ror	r24
    2d2c:	97 f9       	bld	r25, 7
    2d2e:	08 95       	ret

00002d30 <__fp_inf>:
    2d30:	97 f9       	bld	r25, 7
    2d32:	9f 67       	ori	r25, 0x7F	; 127
    2d34:	80 e8       	ldi	r24, 0x80	; 128
    2d36:	70 e0       	ldi	r23, 0x00	; 0
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	08 95       	ret

00002d3c <__fp_nan>:
    2d3c:	9f ef       	ldi	r25, 0xFF	; 255
    2d3e:	80 ec       	ldi	r24, 0xC0	; 192
    2d40:	08 95       	ret

00002d42 <__fp_pscA>:
    2d42:	00 24       	eor	r0, r0
    2d44:	0a 94       	dec	r0
    2d46:	16 16       	cp	r1, r22
    2d48:	17 06       	cpc	r1, r23
    2d4a:	18 06       	cpc	r1, r24
    2d4c:	09 06       	cpc	r0, r25
    2d4e:	08 95       	ret

00002d50 <__fp_pscB>:
    2d50:	00 24       	eor	r0, r0
    2d52:	0a 94       	dec	r0
    2d54:	12 16       	cp	r1, r18
    2d56:	13 06       	cpc	r1, r19
    2d58:	14 06       	cpc	r1, r20
    2d5a:	05 06       	cpc	r0, r21
    2d5c:	08 95       	ret

00002d5e <__fp_round>:
    2d5e:	09 2e       	mov	r0, r25
    2d60:	03 94       	inc	r0
    2d62:	00 0c       	add	r0, r0
    2d64:	11 f4       	brne	.+4      	; 0x2d6a <__fp_round+0xc>
    2d66:	88 23       	and	r24, r24
    2d68:	52 f0       	brmi	.+20     	; 0x2d7e <__fp_round+0x20>
    2d6a:	bb 0f       	add	r27, r27
    2d6c:	40 f4       	brcc	.+16     	; 0x2d7e <__fp_round+0x20>
    2d6e:	bf 2b       	or	r27, r31
    2d70:	11 f4       	brne	.+4      	; 0x2d76 <__fp_round+0x18>
    2d72:	60 ff       	sbrs	r22, 0
    2d74:	04 c0       	rjmp	.+8      	; 0x2d7e <__fp_round+0x20>
    2d76:	6f 5f       	subi	r22, 0xFF	; 255
    2d78:	7f 4f       	sbci	r23, 0xFF	; 255
    2d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7e:	08 95       	ret

00002d80 <__divmodhi4>:
    2d80:	97 fb       	bst	r25, 7
    2d82:	07 2e       	mov	r0, r23
    2d84:	16 f4       	brtc	.+4      	; 0x2d8a <__divmodhi4+0xa>
    2d86:	00 94       	com	r0
    2d88:	07 d0       	rcall	.+14     	; 0x2d98 <__divmodhi4_neg1>
    2d8a:	77 fd       	sbrc	r23, 7
    2d8c:	09 d0       	rcall	.+18     	; 0x2da0 <__divmodhi4_neg2>
    2d8e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__udivmodhi4>
    2d92:	07 fc       	sbrc	r0, 7
    2d94:	05 d0       	rcall	.+10     	; 0x2da0 <__divmodhi4_neg2>
    2d96:	3e f4       	brtc	.+14     	; 0x2da6 <__divmodhi4_exit>

00002d98 <__divmodhi4_neg1>:
    2d98:	90 95       	com	r25
    2d9a:	81 95       	neg	r24
    2d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9e:	08 95       	ret

00002da0 <__divmodhi4_neg2>:
    2da0:	70 95       	com	r23
    2da2:	61 95       	neg	r22
    2da4:	7f 4f       	sbci	r23, 0xFF	; 255

00002da6 <__divmodhi4_exit>:
    2da6:	08 95       	ret

00002da8 <__udivmodhi4>:
    2da8:	aa 1b       	sub	r26, r26
    2daa:	bb 1b       	sub	r27, r27
    2dac:	51 e1       	ldi	r21, 0x11	; 17
    2dae:	07 c0       	rjmp	.+14     	; 0x2dbe <__udivmodhi4_ep>

00002db0 <__udivmodhi4_loop>:
    2db0:	aa 1f       	adc	r26, r26
    2db2:	bb 1f       	adc	r27, r27
    2db4:	a6 17       	cp	r26, r22
    2db6:	b7 07       	cpc	r27, r23
    2db8:	10 f0       	brcs	.+4      	; 0x2dbe <__udivmodhi4_ep>
    2dba:	a6 1b       	sub	r26, r22
    2dbc:	b7 0b       	sbc	r27, r23

00002dbe <__udivmodhi4_ep>:
    2dbe:	88 1f       	adc	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	5a 95       	dec	r21
    2dc4:	a9 f7       	brne	.-22     	; 0x2db0 <__udivmodhi4_loop>
    2dc6:	80 95       	com	r24
    2dc8:	90 95       	com	r25
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	08 95       	ret

00002dd0 <do_rand>:
    2dd0:	8f 92       	push	r8
    2dd2:	9f 92       	push	r9
    2dd4:	af 92       	push	r10
    2dd6:	bf 92       	push	r11
    2dd8:	cf 92       	push	r12
    2dda:	df 92       	push	r13
    2ddc:	ef 92       	push	r14
    2dde:	ff 92       	push	r15
    2de0:	cf 93       	push	r28
    2de2:	df 93       	push	r29
    2de4:	ec 01       	movw	r28, r24
    2de6:	68 81       	ld	r22, Y
    2de8:	79 81       	ldd	r23, Y+1	; 0x01
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	9b 81       	ldd	r25, Y+3	; 0x03
    2dee:	61 15       	cp	r22, r1
    2df0:	71 05       	cpc	r23, r1
    2df2:	81 05       	cpc	r24, r1
    2df4:	91 05       	cpc	r25, r1
    2df6:	21 f4       	brne	.+8      	; 0x2e00 <do_rand+0x30>
    2df8:	64 e2       	ldi	r22, 0x24	; 36
    2dfa:	79 ed       	ldi	r23, 0xD9	; 217
    2dfc:	8b e5       	ldi	r24, 0x5B	; 91
    2dfe:	97 e0       	ldi	r25, 0x07	; 7
    2e00:	2d e1       	ldi	r18, 0x1D	; 29
    2e02:	33 ef       	ldi	r19, 0xF3	; 243
    2e04:	41 e0       	ldi	r20, 0x01	; 1
    2e06:	50 e0       	ldi	r21, 0x00	; 0
    2e08:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__divmodsi4>
    2e0c:	49 01       	movw	r8, r18
    2e0e:	5a 01       	movw	r10, r20
    2e10:	9b 01       	movw	r18, r22
    2e12:	ac 01       	movw	r20, r24
    2e14:	a7 ea       	ldi	r26, 0xA7	; 167
    2e16:	b1 e4       	ldi	r27, 0x41	; 65
    2e18:	0e 94 05 1a 	call	0x340a	; 0x340a <__muluhisi3>
    2e1c:	6b 01       	movw	r12, r22
    2e1e:	7c 01       	movw	r14, r24
    2e20:	ac ee       	ldi	r26, 0xEC	; 236
    2e22:	b4 ef       	ldi	r27, 0xF4	; 244
    2e24:	a5 01       	movw	r20, r10
    2e26:	94 01       	movw	r18, r8
    2e28:	0e 94 13 1a 	call	0x3426	; 0x3426 <__mulohisi3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	8c 0d       	add	r24, r12
    2e32:	9d 1d       	adc	r25, r13
    2e34:	ae 1d       	adc	r26, r14
    2e36:	bf 1d       	adc	r27, r15
    2e38:	b7 ff       	sbrs	r27, 7
    2e3a:	03 c0       	rjmp	.+6      	; 0x2e42 <do_rand+0x72>
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	a1 09       	sbc	r26, r1
    2e40:	b0 48       	sbci	r27, 0x80	; 128
    2e42:	88 83       	st	Y, r24
    2e44:	99 83       	std	Y+1, r25	; 0x01
    2e46:	aa 83       	std	Y+2, r26	; 0x02
    2e48:	bb 83       	std	Y+3, r27	; 0x03
    2e4a:	9f 77       	andi	r25, 0x7F	; 127
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	ff 90       	pop	r15
    2e52:	ef 90       	pop	r14
    2e54:	df 90       	pop	r13
    2e56:	cf 90       	pop	r12
    2e58:	bf 90       	pop	r11
    2e5a:	af 90       	pop	r10
    2e5c:	9f 90       	pop	r9
    2e5e:	8f 90       	pop	r8
    2e60:	08 95       	ret

00002e62 <rand_r>:
    2e62:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <do_rand>
    2e66:	08 95       	ret

00002e68 <rand>:
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	91 e0       	ldi	r25, 0x01	; 1
    2e6c:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <do_rand>
    2e70:	08 95       	ret

00002e72 <srand>:
    2e72:	a0 e0       	ldi	r26, 0x00	; 0
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <next>
    2e7a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <next+0x1>
    2e7e:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <next+0x2>
    2e82:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <next+0x3>
    2e86:	08 95       	ret

00002e88 <memcpy_P>:
    2e88:	fb 01       	movw	r30, r22
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	02 c0       	rjmp	.+4      	; 0x2e92 <memcpy_P+0xa>
    2e8e:	05 90       	lpm	r0, Z+
    2e90:	0d 92       	st	X+, r0
    2e92:	41 50       	subi	r20, 0x01	; 1
    2e94:	50 40       	sbci	r21, 0x00	; 0
    2e96:	d8 f7       	brcc	.-10     	; 0x2e8e <memcpy_P+0x6>
    2e98:	08 95       	ret

00002e9a <sprintf>:
    2e9a:	ae e0       	ldi	r26, 0x0E	; 14
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e3 e5       	ldi	r30, 0x53	; 83
    2ea0:	f7 e1       	ldi	r31, 0x17	; 23
    2ea2:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__prologue_saves__+0x1c>
    2ea6:	0d 89       	ldd	r16, Y+21	; 0x15
    2ea8:	1e 89       	ldd	r17, Y+22	; 0x16
    2eaa:	86 e0       	ldi	r24, 0x06	; 6
    2eac:	8c 83       	std	Y+4, r24	; 0x04
    2eae:	1a 83       	std	Y+2, r17	; 0x02
    2eb0:	09 83       	std	Y+1, r16	; 0x01
    2eb2:	8f ef       	ldi	r24, 0xFF	; 255
    2eb4:	9f e7       	ldi	r25, 0x7F	; 127
    2eb6:	9e 83       	std	Y+6, r25	; 0x06
    2eb8:	8d 83       	std	Y+5, r24	; 0x05
    2eba:	ae 01       	movw	r20, r28
    2ebc:	47 5e       	subi	r20, 0xE7	; 231
    2ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec0:	6f 89       	ldd	r22, Y+23	; 0x17
    2ec2:	78 8d       	ldd	r23, Y+24	; 0x18
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	01 96       	adiw	r24, 0x01	; 1
    2ec8:	0e 94 6f 17 	call	0x2ede	; 0x2ede <vfprintf>
    2ecc:	ef 81       	ldd	r30, Y+7	; 0x07
    2ece:	f8 85       	ldd	r31, Y+8	; 0x08
    2ed0:	e0 0f       	add	r30, r16
    2ed2:	f1 1f       	adc	r31, r17
    2ed4:	10 82       	st	Z, r1
    2ed6:	2e 96       	adiw	r28, 0x0e	; 14
    2ed8:	e4 e0       	ldi	r30, 0x04	; 4
    2eda:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__epilogue_restores__+0x1c>

00002ede <vfprintf>:
    2ede:	ac e0       	ldi	r26, 0x0C	; 12
    2ee0:	b0 e0       	ldi	r27, 0x00	; 0
    2ee2:	e5 e7       	ldi	r30, 0x75	; 117
    2ee4:	f7 e1       	ldi	r31, 0x17	; 23
    2ee6:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__prologue_saves__>
    2eea:	6c 01       	movw	r12, r24
    2eec:	7b 01       	movw	r14, r22
    2eee:	8a 01       	movw	r16, r20
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	17 82       	std	Z+7, r1	; 0x07
    2ef4:	16 82       	std	Z+6, r1	; 0x06
    2ef6:	83 81       	ldd	r24, Z+3	; 0x03
    2ef8:	81 ff       	sbrs	r24, 1
    2efa:	be c1       	rjmp	.+892    	; 0x3278 <vfprintf+0x39a>
    2efc:	ce 01       	movw	r24, r28
    2efe:	01 96       	adiw	r24, 0x01	; 1
    2f00:	4c 01       	movw	r8, r24
    2f02:	f6 01       	movw	r30, r12
    2f04:	93 81       	ldd	r25, Z+3	; 0x03
    2f06:	f7 01       	movw	r30, r14
    2f08:	93 fd       	sbrc	r25, 3
    2f0a:	85 91       	lpm	r24, Z+
    2f0c:	93 ff       	sbrs	r25, 3
    2f0e:	81 91       	ld	r24, Z+
    2f10:	7f 01       	movw	r14, r30
    2f12:	88 23       	and	r24, r24
    2f14:	09 f4       	brne	.+2      	; 0x2f18 <vfprintf+0x3a>
    2f16:	ac c1       	rjmp	.+856    	; 0x3270 <vfprintf+0x392>
    2f18:	85 32       	cpi	r24, 0x25	; 37
    2f1a:	39 f4       	brne	.+14     	; 0x2f2a <vfprintf+0x4c>
    2f1c:	93 fd       	sbrc	r25, 3
    2f1e:	85 91       	lpm	r24, Z+
    2f20:	93 ff       	sbrs	r25, 3
    2f22:	81 91       	ld	r24, Z+
    2f24:	7f 01       	movw	r14, r30
    2f26:	85 32       	cpi	r24, 0x25	; 37
    2f28:	29 f4       	brne	.+10     	; 0x2f34 <vfprintf+0x56>
    2f2a:	b6 01       	movw	r22, r12
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    2f32:	e7 cf       	rjmp	.-50     	; 0x2f02 <vfprintf+0x24>
    2f34:	51 2c       	mov	r5, r1
    2f36:	31 2c       	mov	r3, r1
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	20 32       	cpi	r18, 0x20	; 32
    2f3c:	a0 f4       	brcc	.+40     	; 0x2f66 <vfprintf+0x88>
    2f3e:	8b 32       	cpi	r24, 0x2B	; 43
    2f40:	69 f0       	breq	.+26     	; 0x2f5c <vfprintf+0x7e>
    2f42:	30 f4       	brcc	.+12     	; 0x2f50 <vfprintf+0x72>
    2f44:	80 32       	cpi	r24, 0x20	; 32
    2f46:	59 f0       	breq	.+22     	; 0x2f5e <vfprintf+0x80>
    2f48:	83 32       	cpi	r24, 0x23	; 35
    2f4a:	69 f4       	brne	.+26     	; 0x2f66 <vfprintf+0x88>
    2f4c:	20 61       	ori	r18, 0x10	; 16
    2f4e:	2c c0       	rjmp	.+88     	; 0x2fa8 <vfprintf+0xca>
    2f50:	8d 32       	cpi	r24, 0x2D	; 45
    2f52:	39 f0       	breq	.+14     	; 0x2f62 <vfprintf+0x84>
    2f54:	80 33       	cpi	r24, 0x30	; 48
    2f56:	39 f4       	brne	.+14     	; 0x2f66 <vfprintf+0x88>
    2f58:	21 60       	ori	r18, 0x01	; 1
    2f5a:	26 c0       	rjmp	.+76     	; 0x2fa8 <vfprintf+0xca>
    2f5c:	22 60       	ori	r18, 0x02	; 2
    2f5e:	24 60       	ori	r18, 0x04	; 4
    2f60:	23 c0       	rjmp	.+70     	; 0x2fa8 <vfprintf+0xca>
    2f62:	28 60       	ori	r18, 0x08	; 8
    2f64:	21 c0       	rjmp	.+66     	; 0x2fa8 <vfprintf+0xca>
    2f66:	27 fd       	sbrc	r18, 7
    2f68:	27 c0       	rjmp	.+78     	; 0x2fb8 <vfprintf+0xda>
    2f6a:	30 ed       	ldi	r19, 0xD0	; 208
    2f6c:	38 0f       	add	r19, r24
    2f6e:	3a 30       	cpi	r19, 0x0A	; 10
    2f70:	78 f4       	brcc	.+30     	; 0x2f90 <vfprintf+0xb2>
    2f72:	26 ff       	sbrs	r18, 6
    2f74:	06 c0       	rjmp	.+12     	; 0x2f82 <vfprintf+0xa4>
    2f76:	fa e0       	ldi	r31, 0x0A	; 10
    2f78:	5f 9e       	mul	r5, r31
    2f7a:	30 0d       	add	r19, r0
    2f7c:	11 24       	eor	r1, r1
    2f7e:	53 2e       	mov	r5, r19
    2f80:	13 c0       	rjmp	.+38     	; 0x2fa8 <vfprintf+0xca>
    2f82:	8a e0       	ldi	r24, 0x0A	; 10
    2f84:	38 9e       	mul	r3, r24
    2f86:	30 0d       	add	r19, r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	33 2e       	mov	r3, r19
    2f8c:	20 62       	ori	r18, 0x20	; 32
    2f8e:	0c c0       	rjmp	.+24     	; 0x2fa8 <vfprintf+0xca>
    2f90:	8e 32       	cpi	r24, 0x2E	; 46
    2f92:	21 f4       	brne	.+8      	; 0x2f9c <vfprintf+0xbe>
    2f94:	26 fd       	sbrc	r18, 6
    2f96:	6c c1       	rjmp	.+728    	; 0x3270 <vfprintf+0x392>
    2f98:	20 64       	ori	r18, 0x40	; 64
    2f9a:	06 c0       	rjmp	.+12     	; 0x2fa8 <vfprintf+0xca>
    2f9c:	8c 36       	cpi	r24, 0x6C	; 108
    2f9e:	11 f4       	brne	.+4      	; 0x2fa4 <vfprintf+0xc6>
    2fa0:	20 68       	ori	r18, 0x80	; 128
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <vfprintf+0xca>
    2fa4:	88 36       	cpi	r24, 0x68	; 104
    2fa6:	41 f4       	brne	.+16     	; 0x2fb8 <vfprintf+0xda>
    2fa8:	f7 01       	movw	r30, r14
    2faa:	93 fd       	sbrc	r25, 3
    2fac:	85 91       	lpm	r24, Z+
    2fae:	93 ff       	sbrs	r25, 3
    2fb0:	81 91       	ld	r24, Z+
    2fb2:	7f 01       	movw	r14, r30
    2fb4:	81 11       	cpse	r24, r1
    2fb6:	c1 cf       	rjmp	.-126    	; 0x2f3a <vfprintf+0x5c>
    2fb8:	98 2f       	mov	r25, r24
    2fba:	9f 7d       	andi	r25, 0xDF	; 223
    2fbc:	95 54       	subi	r25, 0x45	; 69
    2fbe:	93 30       	cpi	r25, 0x03	; 3
    2fc0:	28 f4       	brcc	.+10     	; 0x2fcc <vfprintf+0xee>
    2fc2:	0c 5f       	subi	r16, 0xFC	; 252
    2fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc6:	9f e3       	ldi	r25, 0x3F	; 63
    2fc8:	99 83       	std	Y+1, r25	; 0x01
    2fca:	0d c0       	rjmp	.+26     	; 0x2fe6 <vfprintf+0x108>
    2fcc:	83 36       	cpi	r24, 0x63	; 99
    2fce:	31 f0       	breq	.+12     	; 0x2fdc <vfprintf+0xfe>
    2fd0:	83 37       	cpi	r24, 0x73	; 115
    2fd2:	71 f0       	breq	.+28     	; 0x2ff0 <vfprintf+0x112>
    2fd4:	83 35       	cpi	r24, 0x53	; 83
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <vfprintf+0xfc>
    2fd8:	5b c0       	rjmp	.+182    	; 0x3090 <vfprintf+0x1b2>
    2fda:	22 c0       	rjmp	.+68     	; 0x3020 <vfprintf+0x142>
    2fdc:	f8 01       	movw	r30, r16
    2fde:	80 81       	ld	r24, Z
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	0e 5f       	subi	r16, 0xFE	; 254
    2fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe6:	44 24       	eor	r4, r4
    2fe8:	43 94       	inc	r4
    2fea:	51 2c       	mov	r5, r1
    2fec:	54 01       	movw	r10, r8
    2fee:	15 c0       	rjmp	.+42     	; 0x301a <vfprintf+0x13c>
    2ff0:	38 01       	movw	r6, r16
    2ff2:	f2 e0       	ldi	r31, 0x02	; 2
    2ff4:	6f 0e       	add	r6, r31
    2ff6:	71 1c       	adc	r7, r1
    2ff8:	f8 01       	movw	r30, r16
    2ffa:	a0 80       	ld	r10, Z
    2ffc:	b1 80       	ldd	r11, Z+1	; 0x01
    2ffe:	26 ff       	sbrs	r18, 6
    3000:	03 c0       	rjmp	.+6      	; 0x3008 <vfprintf+0x12a>
    3002:	65 2d       	mov	r22, r5
    3004:	70 e0       	ldi	r23, 0x00	; 0
    3006:	02 c0       	rjmp	.+4      	; 0x300c <vfprintf+0x12e>
    3008:	6f ef       	ldi	r22, 0xFF	; 255
    300a:	7f ef       	ldi	r23, 0xFF	; 255
    300c:	c5 01       	movw	r24, r10
    300e:	2c 87       	std	Y+12, r18	; 0x0c
    3010:	0e 94 4d 19 	call	0x329a	; 0x329a <strnlen>
    3014:	2c 01       	movw	r4, r24
    3016:	83 01       	movw	r16, r6
    3018:	2c 85       	ldd	r18, Y+12	; 0x0c
    301a:	2f 77       	andi	r18, 0x7F	; 127
    301c:	22 2e       	mov	r2, r18
    301e:	17 c0       	rjmp	.+46     	; 0x304e <vfprintf+0x170>
    3020:	38 01       	movw	r6, r16
    3022:	f2 e0       	ldi	r31, 0x02	; 2
    3024:	6f 0e       	add	r6, r31
    3026:	71 1c       	adc	r7, r1
    3028:	f8 01       	movw	r30, r16
    302a:	a0 80       	ld	r10, Z
    302c:	b1 80       	ldd	r11, Z+1	; 0x01
    302e:	26 ff       	sbrs	r18, 6
    3030:	03 c0       	rjmp	.+6      	; 0x3038 <vfprintf+0x15a>
    3032:	65 2d       	mov	r22, r5
    3034:	70 e0       	ldi	r23, 0x00	; 0
    3036:	02 c0       	rjmp	.+4      	; 0x303c <vfprintf+0x15e>
    3038:	6f ef       	ldi	r22, 0xFF	; 255
    303a:	7f ef       	ldi	r23, 0xFF	; 255
    303c:	c5 01       	movw	r24, r10
    303e:	2c 87       	std	Y+12, r18	; 0x0c
    3040:	0e 94 42 19 	call	0x3284	; 0x3284 <strnlen_P>
    3044:	2c 01       	movw	r4, r24
    3046:	2c 85       	ldd	r18, Y+12	; 0x0c
    3048:	20 68       	ori	r18, 0x80	; 128
    304a:	22 2e       	mov	r2, r18
    304c:	83 01       	movw	r16, r6
    304e:	23 fc       	sbrc	r2, 3
    3050:	1b c0       	rjmp	.+54     	; 0x3088 <vfprintf+0x1aa>
    3052:	83 2d       	mov	r24, r3
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	48 16       	cp	r4, r24
    3058:	59 06       	cpc	r5, r25
    305a:	b0 f4       	brcc	.+44     	; 0x3088 <vfprintf+0x1aa>
    305c:	b6 01       	movw	r22, r12
    305e:	80 e2       	ldi	r24, 0x20	; 32
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    3066:	3a 94       	dec	r3
    3068:	f4 cf       	rjmp	.-24     	; 0x3052 <vfprintf+0x174>
    306a:	f5 01       	movw	r30, r10
    306c:	27 fc       	sbrc	r2, 7
    306e:	85 91       	lpm	r24, Z+
    3070:	27 fe       	sbrs	r2, 7
    3072:	81 91       	ld	r24, Z+
    3074:	5f 01       	movw	r10, r30
    3076:	b6 01       	movw	r22, r12
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    307e:	31 10       	cpse	r3, r1
    3080:	3a 94       	dec	r3
    3082:	f1 e0       	ldi	r31, 0x01	; 1
    3084:	4f 1a       	sub	r4, r31
    3086:	51 08       	sbc	r5, r1
    3088:	41 14       	cp	r4, r1
    308a:	51 04       	cpc	r5, r1
    308c:	71 f7       	brne	.-36     	; 0x306a <vfprintf+0x18c>
    308e:	e6 c0       	rjmp	.+460    	; 0x325c <vfprintf+0x37e>
    3090:	84 36       	cpi	r24, 0x64	; 100
    3092:	11 f0       	breq	.+4      	; 0x3098 <vfprintf+0x1ba>
    3094:	89 36       	cpi	r24, 0x69	; 105
    3096:	39 f5       	brne	.+78     	; 0x30e6 <vfprintf+0x208>
    3098:	f8 01       	movw	r30, r16
    309a:	27 ff       	sbrs	r18, 7
    309c:	07 c0       	rjmp	.+14     	; 0x30ac <vfprintf+0x1ce>
    309e:	60 81       	ld	r22, Z
    30a0:	71 81       	ldd	r23, Z+1	; 0x01
    30a2:	82 81       	ldd	r24, Z+2	; 0x02
    30a4:	93 81       	ldd	r25, Z+3	; 0x03
    30a6:	0c 5f       	subi	r16, 0xFC	; 252
    30a8:	1f 4f       	sbci	r17, 0xFF	; 255
    30aa:	08 c0       	rjmp	.+16     	; 0x30bc <vfprintf+0x1de>
    30ac:	60 81       	ld	r22, Z
    30ae:	71 81       	ldd	r23, Z+1	; 0x01
    30b0:	07 2e       	mov	r0, r23
    30b2:	00 0c       	add	r0, r0
    30b4:	88 0b       	sbc	r24, r24
    30b6:	99 0b       	sbc	r25, r25
    30b8:	0e 5f       	subi	r16, 0xFE	; 254
    30ba:	1f 4f       	sbci	r17, 0xFF	; 255
    30bc:	2f 76       	andi	r18, 0x6F	; 111
    30be:	72 2e       	mov	r7, r18
    30c0:	97 ff       	sbrs	r25, 7
    30c2:	09 c0       	rjmp	.+18     	; 0x30d6 <vfprintf+0x1f8>
    30c4:	90 95       	com	r25
    30c6:	80 95       	com	r24
    30c8:	70 95       	com	r23
    30ca:	61 95       	neg	r22
    30cc:	7f 4f       	sbci	r23, 0xFF	; 255
    30ce:	8f 4f       	sbci	r24, 0xFF	; 255
    30d0:	9f 4f       	sbci	r25, 0xFF	; 255
    30d2:	20 68       	ori	r18, 0x80	; 128
    30d4:	72 2e       	mov	r7, r18
    30d6:	2a e0       	ldi	r18, 0x0A	; 10
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	a4 01       	movw	r20, r8
    30dc:	0e 94 88 19 	call	0x3310	; 0x3310 <__ultoa_invert>
    30e0:	a8 2e       	mov	r10, r24
    30e2:	a8 18       	sub	r10, r8
    30e4:	44 c0       	rjmp	.+136    	; 0x316e <vfprintf+0x290>
    30e6:	85 37       	cpi	r24, 0x75	; 117
    30e8:	29 f4       	brne	.+10     	; 0x30f4 <vfprintf+0x216>
    30ea:	2f 7e       	andi	r18, 0xEF	; 239
    30ec:	b2 2e       	mov	r11, r18
    30ee:	2a e0       	ldi	r18, 0x0A	; 10
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	25 c0       	rjmp	.+74     	; 0x313e <vfprintf+0x260>
    30f4:	f2 2f       	mov	r31, r18
    30f6:	f9 7f       	andi	r31, 0xF9	; 249
    30f8:	bf 2e       	mov	r11, r31
    30fa:	8f 36       	cpi	r24, 0x6F	; 111
    30fc:	c1 f0       	breq	.+48     	; 0x312e <vfprintf+0x250>
    30fe:	18 f4       	brcc	.+6      	; 0x3106 <vfprintf+0x228>
    3100:	88 35       	cpi	r24, 0x58	; 88
    3102:	79 f0       	breq	.+30     	; 0x3122 <vfprintf+0x244>
    3104:	b5 c0       	rjmp	.+362    	; 0x3270 <vfprintf+0x392>
    3106:	80 37       	cpi	r24, 0x70	; 112
    3108:	19 f0       	breq	.+6      	; 0x3110 <vfprintf+0x232>
    310a:	88 37       	cpi	r24, 0x78	; 120
    310c:	21 f0       	breq	.+8      	; 0x3116 <vfprintf+0x238>
    310e:	b0 c0       	rjmp	.+352    	; 0x3270 <vfprintf+0x392>
    3110:	2f 2f       	mov	r18, r31
    3112:	20 61       	ori	r18, 0x10	; 16
    3114:	b2 2e       	mov	r11, r18
    3116:	b4 fe       	sbrs	r11, 4
    3118:	0d c0       	rjmp	.+26     	; 0x3134 <vfprintf+0x256>
    311a:	8b 2d       	mov	r24, r11
    311c:	84 60       	ori	r24, 0x04	; 4
    311e:	b8 2e       	mov	r11, r24
    3120:	09 c0       	rjmp	.+18     	; 0x3134 <vfprintf+0x256>
    3122:	24 ff       	sbrs	r18, 4
    3124:	0a c0       	rjmp	.+20     	; 0x313a <vfprintf+0x25c>
    3126:	9f 2f       	mov	r25, r31
    3128:	96 60       	ori	r25, 0x06	; 6
    312a:	b9 2e       	mov	r11, r25
    312c:	06 c0       	rjmp	.+12     	; 0x313a <vfprintf+0x25c>
    312e:	28 e0       	ldi	r18, 0x08	; 8
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	05 c0       	rjmp	.+10     	; 0x313e <vfprintf+0x260>
    3134:	20 e1       	ldi	r18, 0x10	; 16
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	02 c0       	rjmp	.+4      	; 0x313e <vfprintf+0x260>
    313a:	20 e1       	ldi	r18, 0x10	; 16
    313c:	32 e0       	ldi	r19, 0x02	; 2
    313e:	f8 01       	movw	r30, r16
    3140:	b7 fe       	sbrs	r11, 7
    3142:	07 c0       	rjmp	.+14     	; 0x3152 <vfprintf+0x274>
    3144:	60 81       	ld	r22, Z
    3146:	71 81       	ldd	r23, Z+1	; 0x01
    3148:	82 81       	ldd	r24, Z+2	; 0x02
    314a:	93 81       	ldd	r25, Z+3	; 0x03
    314c:	0c 5f       	subi	r16, 0xFC	; 252
    314e:	1f 4f       	sbci	r17, 0xFF	; 255
    3150:	06 c0       	rjmp	.+12     	; 0x315e <vfprintf+0x280>
    3152:	60 81       	ld	r22, Z
    3154:	71 81       	ldd	r23, Z+1	; 0x01
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 5f       	subi	r16, 0xFE	; 254
    315c:	1f 4f       	sbci	r17, 0xFF	; 255
    315e:	a4 01       	movw	r20, r8
    3160:	0e 94 88 19 	call	0x3310	; 0x3310 <__ultoa_invert>
    3164:	a8 2e       	mov	r10, r24
    3166:	a8 18       	sub	r10, r8
    3168:	fb 2d       	mov	r31, r11
    316a:	ff 77       	andi	r31, 0x7F	; 127
    316c:	7f 2e       	mov	r7, r31
    316e:	76 fe       	sbrs	r7, 6
    3170:	0b c0       	rjmp	.+22     	; 0x3188 <vfprintf+0x2aa>
    3172:	37 2d       	mov	r19, r7
    3174:	3e 7f       	andi	r19, 0xFE	; 254
    3176:	a5 14       	cp	r10, r5
    3178:	50 f4       	brcc	.+20     	; 0x318e <vfprintf+0x2b0>
    317a:	74 fe       	sbrs	r7, 4
    317c:	0a c0       	rjmp	.+20     	; 0x3192 <vfprintf+0x2b4>
    317e:	72 fc       	sbrc	r7, 2
    3180:	08 c0       	rjmp	.+16     	; 0x3192 <vfprintf+0x2b4>
    3182:	37 2d       	mov	r19, r7
    3184:	3e 7e       	andi	r19, 0xEE	; 238
    3186:	05 c0       	rjmp	.+10     	; 0x3192 <vfprintf+0x2b4>
    3188:	ba 2c       	mov	r11, r10
    318a:	37 2d       	mov	r19, r7
    318c:	03 c0       	rjmp	.+6      	; 0x3194 <vfprintf+0x2b6>
    318e:	ba 2c       	mov	r11, r10
    3190:	01 c0       	rjmp	.+2      	; 0x3194 <vfprintf+0x2b6>
    3192:	b5 2c       	mov	r11, r5
    3194:	34 ff       	sbrs	r19, 4
    3196:	0d c0       	rjmp	.+26     	; 0x31b2 <vfprintf+0x2d4>
    3198:	fe 01       	movw	r30, r28
    319a:	ea 0d       	add	r30, r10
    319c:	f1 1d       	adc	r31, r1
    319e:	80 81       	ld	r24, Z
    31a0:	80 33       	cpi	r24, 0x30	; 48
    31a2:	11 f4       	brne	.+4      	; 0x31a8 <vfprintf+0x2ca>
    31a4:	39 7e       	andi	r19, 0xE9	; 233
    31a6:	09 c0       	rjmp	.+18     	; 0x31ba <vfprintf+0x2dc>
    31a8:	32 ff       	sbrs	r19, 2
    31aa:	06 c0       	rjmp	.+12     	; 0x31b8 <vfprintf+0x2da>
    31ac:	b3 94       	inc	r11
    31ae:	b3 94       	inc	r11
    31b0:	04 c0       	rjmp	.+8      	; 0x31ba <vfprintf+0x2dc>
    31b2:	83 2f       	mov	r24, r19
    31b4:	86 78       	andi	r24, 0x86	; 134
    31b6:	09 f0       	breq	.+2      	; 0x31ba <vfprintf+0x2dc>
    31b8:	b3 94       	inc	r11
    31ba:	33 fd       	sbrc	r19, 3
    31bc:	13 c0       	rjmp	.+38     	; 0x31e4 <vfprintf+0x306>
    31be:	30 ff       	sbrs	r19, 0
    31c0:	06 c0       	rjmp	.+12     	; 0x31ce <vfprintf+0x2f0>
    31c2:	b3 14       	cp	r11, r3
    31c4:	98 f4       	brcc	.+38     	; 0x31ec <vfprintf+0x30e>
    31c6:	3a 0c       	add	r3, r10
    31c8:	53 2c       	mov	r5, r3
    31ca:	5b 18       	sub	r5, r11
    31cc:	10 c0       	rjmp	.+32     	; 0x31ee <vfprintf+0x310>
    31ce:	b3 14       	cp	r11, r3
    31d0:	70 f4       	brcc	.+28     	; 0x31ee <vfprintf+0x310>
    31d2:	b6 01       	movw	r22, r12
    31d4:	80 e2       	ldi	r24, 0x20	; 32
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	3c 87       	std	Y+12, r19	; 0x0c
    31da:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    31de:	b3 94       	inc	r11
    31e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    31e2:	f5 cf       	rjmp	.-22     	; 0x31ce <vfprintf+0x2f0>
    31e4:	b3 14       	cp	r11, r3
    31e6:	18 f4       	brcc	.+6      	; 0x31ee <vfprintf+0x310>
    31e8:	3b 18       	sub	r3, r11
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <vfprintf+0x312>
    31ec:	5a 2c       	mov	r5, r10
    31ee:	31 2c       	mov	r3, r1
    31f0:	34 ff       	sbrs	r19, 4
    31f2:	12 c0       	rjmp	.+36     	; 0x3218 <vfprintf+0x33a>
    31f4:	b6 01       	movw	r22, r12
    31f6:	80 e3       	ldi	r24, 0x30	; 48
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	3c 87       	std	Y+12, r19	; 0x0c
    31fc:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    3200:	3c 85       	ldd	r19, Y+12	; 0x0c
    3202:	32 ff       	sbrs	r19, 2
    3204:	17 c0       	rjmp	.+46     	; 0x3234 <vfprintf+0x356>
    3206:	31 fd       	sbrc	r19, 1
    3208:	03 c0       	rjmp	.+6      	; 0x3210 <vfprintf+0x332>
    320a:	88 e7       	ldi	r24, 0x78	; 120
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <vfprintf+0x336>
    3210:	88 e5       	ldi	r24, 0x58	; 88
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	b6 01       	movw	r22, r12
    3216:	0c c0       	rjmp	.+24     	; 0x3230 <vfprintf+0x352>
    3218:	83 2f       	mov	r24, r19
    321a:	86 78       	andi	r24, 0x86	; 134
    321c:	59 f0       	breq	.+22     	; 0x3234 <vfprintf+0x356>
    321e:	31 ff       	sbrs	r19, 1
    3220:	02 c0       	rjmp	.+4      	; 0x3226 <vfprintf+0x348>
    3222:	8b e2       	ldi	r24, 0x2B	; 43
    3224:	01 c0       	rjmp	.+2      	; 0x3228 <vfprintf+0x34a>
    3226:	80 e2       	ldi	r24, 0x20	; 32
    3228:	37 fd       	sbrc	r19, 7
    322a:	8d e2       	ldi	r24, 0x2D	; 45
    322c:	b6 01       	movw	r22, r12
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    3234:	a5 14       	cp	r10, r5
    3236:	38 f4       	brcc	.+14     	; 0x3246 <vfprintf+0x368>
    3238:	b6 01       	movw	r22, r12
    323a:	80 e3       	ldi	r24, 0x30	; 48
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    3242:	5a 94       	dec	r5
    3244:	f7 cf       	rjmp	.-18     	; 0x3234 <vfprintf+0x356>
    3246:	aa 94       	dec	r10
    3248:	f4 01       	movw	r30, r8
    324a:	ea 0d       	add	r30, r10
    324c:	f1 1d       	adc	r31, r1
    324e:	80 81       	ld	r24, Z
    3250:	b6 01       	movw	r22, r12
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    3258:	a1 10       	cpse	r10, r1
    325a:	f5 cf       	rjmp	.-22     	; 0x3246 <vfprintf+0x368>
    325c:	33 20       	and	r3, r3
    325e:	09 f4       	brne	.+2      	; 0x3262 <vfprintf+0x384>
    3260:	50 ce       	rjmp	.-864    	; 0x2f02 <vfprintf+0x24>
    3262:	b6 01       	movw	r22, r12
    3264:	80 e2       	ldi	r24, 0x20	; 32
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	0e 94 58 19 	call	0x32b0	; 0x32b0 <fputc>
    326c:	3a 94       	dec	r3
    326e:	f6 cf       	rjmp	.-20     	; 0x325c <vfprintf+0x37e>
    3270:	f6 01       	movw	r30, r12
    3272:	86 81       	ldd	r24, Z+6	; 0x06
    3274:	97 81       	ldd	r25, Z+7	; 0x07
    3276:	02 c0       	rjmp	.+4      	; 0x327c <vfprintf+0x39e>
    3278:	8f ef       	ldi	r24, 0xFF	; 255
    327a:	9f ef       	ldi	r25, 0xFF	; 255
    327c:	2c 96       	adiw	r28, 0x0c	; 12
    327e:	e2 e1       	ldi	r30, 0x12	; 18
    3280:	0c 94 34 1a 	jmp	0x3468	; 0x3468 <__epilogue_restores__>

00003284 <strnlen_P>:
    3284:	fc 01       	movw	r30, r24
    3286:	05 90       	lpm	r0, Z+
    3288:	61 50       	subi	r22, 0x01	; 1
    328a:	70 40       	sbci	r23, 0x00	; 0
    328c:	01 10       	cpse	r0, r1
    328e:	d8 f7       	brcc	.-10     	; 0x3286 <strnlen_P+0x2>
    3290:	80 95       	com	r24
    3292:	90 95       	com	r25
    3294:	8e 0f       	add	r24, r30
    3296:	9f 1f       	adc	r25, r31
    3298:	08 95       	ret

0000329a <strnlen>:
    329a:	fc 01       	movw	r30, r24
    329c:	61 50       	subi	r22, 0x01	; 1
    329e:	70 40       	sbci	r23, 0x00	; 0
    32a0:	01 90       	ld	r0, Z+
    32a2:	01 10       	cpse	r0, r1
    32a4:	d8 f7       	brcc	.-10     	; 0x329c <strnlen+0x2>
    32a6:	80 95       	com	r24
    32a8:	90 95       	com	r25
    32aa:	8e 0f       	add	r24, r30
    32ac:	9f 1f       	adc	r25, r31
    32ae:	08 95       	ret

000032b0 <fputc>:
    32b0:	0f 93       	push	r16
    32b2:	1f 93       	push	r17
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	18 2f       	mov	r17, r24
    32ba:	09 2f       	mov	r16, r25
    32bc:	eb 01       	movw	r28, r22
    32be:	8b 81       	ldd	r24, Y+3	; 0x03
    32c0:	81 fd       	sbrc	r24, 1
    32c2:	03 c0       	rjmp	.+6      	; 0x32ca <fputc+0x1a>
    32c4:	8f ef       	ldi	r24, 0xFF	; 255
    32c6:	9f ef       	ldi	r25, 0xFF	; 255
    32c8:	1e c0       	rjmp	.+60     	; 0x3306 <fputc+0x56>
    32ca:	82 ff       	sbrs	r24, 2
    32cc:	0f c0       	rjmp	.+30     	; 0x32ec <fputc+0x3c>
    32ce:	2e 81       	ldd	r18, Y+6	; 0x06
    32d0:	3f 81       	ldd	r19, Y+7	; 0x07
    32d2:	8c 81       	ldd	r24, Y+4	; 0x04
    32d4:	9d 81       	ldd	r25, Y+5	; 0x05
    32d6:	28 17       	cp	r18, r24
    32d8:	39 07       	cpc	r19, r25
    32da:	74 f4       	brge	.+28     	; 0x32f8 <fputc+0x48>
    32dc:	e8 81       	ld	r30, Y
    32de:	f9 81       	ldd	r31, Y+1	; 0x01
    32e0:	cf 01       	movw	r24, r30
    32e2:	01 96       	adiw	r24, 0x01	; 1
    32e4:	99 83       	std	Y+1, r25	; 0x01
    32e6:	88 83       	st	Y, r24
    32e8:	10 83       	st	Z, r17
    32ea:	06 c0       	rjmp	.+12     	; 0x32f8 <fputc+0x48>
    32ec:	e8 85       	ldd	r30, Y+8	; 0x08
    32ee:	f9 85       	ldd	r31, Y+9	; 0x09
    32f0:	81 2f       	mov	r24, r17
    32f2:	09 95       	icall
    32f4:	89 2b       	or	r24, r25
    32f6:	31 f7       	brne	.-52     	; 0x32c4 <fputc+0x14>
    32f8:	8e 81       	ldd	r24, Y+6	; 0x06
    32fa:	9f 81       	ldd	r25, Y+7	; 0x07
    32fc:	01 96       	adiw	r24, 0x01	; 1
    32fe:	9f 83       	std	Y+7, r25	; 0x07
    3300:	8e 83       	std	Y+6, r24	; 0x06
    3302:	81 2f       	mov	r24, r17
    3304:	90 2f       	mov	r25, r16
    3306:	df 91       	pop	r29
    3308:	cf 91       	pop	r28
    330a:	1f 91       	pop	r17
    330c:	0f 91       	pop	r16
    330e:	08 95       	ret

00003310 <__ultoa_invert>:
    3310:	fa 01       	movw	r30, r20
    3312:	aa 27       	eor	r26, r26
    3314:	28 30       	cpi	r18, 0x08	; 8
    3316:	51 f1       	breq	.+84     	; 0x336c <__ultoa_invert+0x5c>
    3318:	20 31       	cpi	r18, 0x10	; 16
    331a:	81 f1       	breq	.+96     	; 0x337c <__ultoa_invert+0x6c>
    331c:	e8 94       	clt
    331e:	6f 93       	push	r22
    3320:	6e 7f       	andi	r22, 0xFE	; 254
    3322:	6e 5f       	subi	r22, 0xFE	; 254
    3324:	7f 4f       	sbci	r23, 0xFF	; 255
    3326:	8f 4f       	sbci	r24, 0xFF	; 255
    3328:	9f 4f       	sbci	r25, 0xFF	; 255
    332a:	af 4f       	sbci	r26, 0xFF	; 255
    332c:	b1 e0       	ldi	r27, 0x01	; 1
    332e:	3e d0       	rcall	.+124    	; 0x33ac <__ultoa_invert+0x9c>
    3330:	b4 e0       	ldi	r27, 0x04	; 4
    3332:	3c d0       	rcall	.+120    	; 0x33ac <__ultoa_invert+0x9c>
    3334:	67 0f       	add	r22, r23
    3336:	78 1f       	adc	r23, r24
    3338:	89 1f       	adc	r24, r25
    333a:	9a 1f       	adc	r25, r26
    333c:	a1 1d       	adc	r26, r1
    333e:	68 0f       	add	r22, r24
    3340:	79 1f       	adc	r23, r25
    3342:	8a 1f       	adc	r24, r26
    3344:	91 1d       	adc	r25, r1
    3346:	a1 1d       	adc	r26, r1
    3348:	6a 0f       	add	r22, r26
    334a:	71 1d       	adc	r23, r1
    334c:	81 1d       	adc	r24, r1
    334e:	91 1d       	adc	r25, r1
    3350:	a1 1d       	adc	r26, r1
    3352:	20 d0       	rcall	.+64     	; 0x3394 <__ultoa_invert+0x84>
    3354:	09 f4       	brne	.+2      	; 0x3358 <__ultoa_invert+0x48>
    3356:	68 94       	set
    3358:	3f 91       	pop	r19
    335a:	2a e0       	ldi	r18, 0x0A	; 10
    335c:	26 9f       	mul	r18, r22
    335e:	11 24       	eor	r1, r1
    3360:	30 19       	sub	r19, r0
    3362:	30 5d       	subi	r19, 0xD0	; 208
    3364:	31 93       	st	Z+, r19
    3366:	de f6       	brtc	.-74     	; 0x331e <__ultoa_invert+0xe>
    3368:	cf 01       	movw	r24, r30
    336a:	08 95       	ret
    336c:	46 2f       	mov	r20, r22
    336e:	47 70       	andi	r20, 0x07	; 7
    3370:	40 5d       	subi	r20, 0xD0	; 208
    3372:	41 93       	st	Z+, r20
    3374:	b3 e0       	ldi	r27, 0x03	; 3
    3376:	0f d0       	rcall	.+30     	; 0x3396 <__ultoa_invert+0x86>
    3378:	c9 f7       	brne	.-14     	; 0x336c <__ultoa_invert+0x5c>
    337a:	f6 cf       	rjmp	.-20     	; 0x3368 <__ultoa_invert+0x58>
    337c:	46 2f       	mov	r20, r22
    337e:	4f 70       	andi	r20, 0x0F	; 15
    3380:	40 5d       	subi	r20, 0xD0	; 208
    3382:	4a 33       	cpi	r20, 0x3A	; 58
    3384:	18 f0       	brcs	.+6      	; 0x338c <__ultoa_invert+0x7c>
    3386:	49 5d       	subi	r20, 0xD9	; 217
    3388:	31 fd       	sbrc	r19, 1
    338a:	40 52       	subi	r20, 0x20	; 32
    338c:	41 93       	st	Z+, r20
    338e:	02 d0       	rcall	.+4      	; 0x3394 <__ultoa_invert+0x84>
    3390:	a9 f7       	brne	.-22     	; 0x337c <__ultoa_invert+0x6c>
    3392:	ea cf       	rjmp	.-44     	; 0x3368 <__ultoa_invert+0x58>
    3394:	b4 e0       	ldi	r27, 0x04	; 4
    3396:	a6 95       	lsr	r26
    3398:	97 95       	ror	r25
    339a:	87 95       	ror	r24
    339c:	77 95       	ror	r23
    339e:	67 95       	ror	r22
    33a0:	ba 95       	dec	r27
    33a2:	c9 f7       	brne	.-14     	; 0x3396 <__ultoa_invert+0x86>
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	61 05       	cpc	r22, r1
    33a8:	71 05       	cpc	r23, r1
    33aa:	08 95       	ret
    33ac:	9b 01       	movw	r18, r22
    33ae:	ac 01       	movw	r20, r24
    33b0:	0a 2e       	mov	r0, r26
    33b2:	06 94       	lsr	r0
    33b4:	57 95       	ror	r21
    33b6:	47 95       	ror	r20
    33b8:	37 95       	ror	r19
    33ba:	27 95       	ror	r18
    33bc:	ba 95       	dec	r27
    33be:	c9 f7       	brne	.-14     	; 0x33b2 <__ultoa_invert+0xa2>
    33c0:	62 0f       	add	r22, r18
    33c2:	73 1f       	adc	r23, r19
    33c4:	84 1f       	adc	r24, r20
    33c6:	95 1f       	adc	r25, r21
    33c8:	a0 1d       	adc	r26, r0
    33ca:	08 95       	ret

000033cc <__divmodsi4>:
    33cc:	05 2e       	mov	r0, r21
    33ce:	97 fb       	bst	r25, 7
    33d0:	1e f4       	brtc	.+6      	; 0x33d8 <__divmodsi4+0xc>
    33d2:	00 94       	com	r0
    33d4:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__negsi2>
    33d8:	57 fd       	sbrc	r21, 7
    33da:	07 d0       	rcall	.+14     	; 0x33ea <__divmodsi4_neg2>
    33dc:	0e 94 4f 1a 	call	0x349e	; 0x349e <__udivmodsi4>
    33e0:	07 fc       	sbrc	r0, 7
    33e2:	03 d0       	rcall	.+6      	; 0x33ea <__divmodsi4_neg2>
    33e4:	4e f4       	brtc	.+18     	; 0x33f8 <__divmodsi4_exit>
    33e6:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__negsi2>

000033ea <__divmodsi4_neg2>:
    33ea:	50 95       	com	r21
    33ec:	40 95       	com	r20
    33ee:	30 95       	com	r19
    33f0:	21 95       	neg	r18
    33f2:	3f 4f       	sbci	r19, 0xFF	; 255
    33f4:	4f 4f       	sbci	r20, 0xFF	; 255
    33f6:	5f 4f       	sbci	r21, 0xFF	; 255

000033f8 <__divmodsi4_exit>:
    33f8:	08 95       	ret

000033fa <__negsi2>:
    33fa:	90 95       	com	r25
    33fc:	80 95       	com	r24
    33fe:	70 95       	com	r23
    3400:	61 95       	neg	r22
    3402:	7f 4f       	sbci	r23, 0xFF	; 255
    3404:	8f 4f       	sbci	r24, 0xFF	; 255
    3406:	9f 4f       	sbci	r25, 0xFF	; 255
    3408:	08 95       	ret

0000340a <__muluhisi3>:
    340a:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__umulhisi3>
    340e:	a5 9f       	mul	r26, r21
    3410:	90 0d       	add	r25, r0
    3412:	b4 9f       	mul	r27, r20
    3414:	90 0d       	add	r25, r0
    3416:	a4 9f       	mul	r26, r20
    3418:	80 0d       	add	r24, r0
    341a:	91 1d       	adc	r25, r1
    341c:	11 24       	eor	r1, r1
    341e:	08 95       	ret

00003420 <__mulshisi3>:
    3420:	b7 ff       	sbrs	r27, 7
    3422:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__muluhisi3>

00003426 <__mulohisi3>:
    3426:	0e 94 05 1a 	call	0x340a	; 0x340a <__muluhisi3>
    342a:	82 1b       	sub	r24, r18
    342c:	93 0b       	sbc	r25, r19
    342e:	08 95       	ret

00003430 <__prologue_saves__>:
    3430:	2f 92       	push	r2
    3432:	3f 92       	push	r3
    3434:	4f 92       	push	r4
    3436:	5f 92       	push	r5
    3438:	6f 92       	push	r6
    343a:	7f 92       	push	r7
    343c:	8f 92       	push	r8
    343e:	9f 92       	push	r9
    3440:	af 92       	push	r10
    3442:	bf 92       	push	r11
    3444:	cf 92       	push	r12
    3446:	df 92       	push	r13
    3448:	ef 92       	push	r14
    344a:	ff 92       	push	r15
    344c:	0f 93       	push	r16
    344e:	1f 93       	push	r17
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	ca 1b       	sub	r28, r26
    345a:	db 0b       	sbc	r29, r27
    345c:	0f b6       	in	r0, 0x3f	; 63
    345e:	f8 94       	cli
    3460:	de bf       	out	0x3e, r29	; 62
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	cd bf       	out	0x3d, r28	; 61
    3466:	09 94       	ijmp

00003468 <__epilogue_restores__>:
    3468:	2a 88       	ldd	r2, Y+18	; 0x12
    346a:	39 88       	ldd	r3, Y+17	; 0x11
    346c:	48 88       	ldd	r4, Y+16	; 0x10
    346e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3470:	6e 84       	ldd	r6, Y+14	; 0x0e
    3472:	7d 84       	ldd	r7, Y+13	; 0x0d
    3474:	8c 84       	ldd	r8, Y+12	; 0x0c
    3476:	9b 84       	ldd	r9, Y+11	; 0x0b
    3478:	aa 84       	ldd	r10, Y+10	; 0x0a
    347a:	b9 84       	ldd	r11, Y+9	; 0x09
    347c:	c8 84       	ldd	r12, Y+8	; 0x08
    347e:	df 80       	ldd	r13, Y+7	; 0x07
    3480:	ee 80       	ldd	r14, Y+6	; 0x06
    3482:	fd 80       	ldd	r15, Y+5	; 0x05
    3484:	0c 81       	ldd	r16, Y+4	; 0x04
    3486:	1b 81       	ldd	r17, Y+3	; 0x03
    3488:	aa 81       	ldd	r26, Y+2	; 0x02
    348a:	b9 81       	ldd	r27, Y+1	; 0x01
    348c:	ce 0f       	add	r28, r30
    348e:	d1 1d       	adc	r29, r1
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	ed 01       	movw	r28, r26
    349c:	08 95       	ret

0000349e <__udivmodsi4>:
    349e:	a1 e2       	ldi	r26, 0x21	; 33
    34a0:	1a 2e       	mov	r1, r26
    34a2:	aa 1b       	sub	r26, r26
    34a4:	bb 1b       	sub	r27, r27
    34a6:	fd 01       	movw	r30, r26
    34a8:	0d c0       	rjmp	.+26     	; 0x34c4 <__udivmodsi4_ep>

000034aa <__udivmodsi4_loop>:
    34aa:	aa 1f       	adc	r26, r26
    34ac:	bb 1f       	adc	r27, r27
    34ae:	ee 1f       	adc	r30, r30
    34b0:	ff 1f       	adc	r31, r31
    34b2:	a2 17       	cp	r26, r18
    34b4:	b3 07       	cpc	r27, r19
    34b6:	e4 07       	cpc	r30, r20
    34b8:	f5 07       	cpc	r31, r21
    34ba:	20 f0       	brcs	.+8      	; 0x34c4 <__udivmodsi4_ep>
    34bc:	a2 1b       	sub	r26, r18
    34be:	b3 0b       	sbc	r27, r19
    34c0:	e4 0b       	sbc	r30, r20
    34c2:	f5 0b       	sbc	r31, r21

000034c4 <__udivmodsi4_ep>:
    34c4:	66 1f       	adc	r22, r22
    34c6:	77 1f       	adc	r23, r23
    34c8:	88 1f       	adc	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	1a 94       	dec	r1
    34ce:	69 f7       	brne	.-38     	; 0x34aa <__udivmodsi4_loop>
    34d0:	60 95       	com	r22
    34d2:	70 95       	com	r23
    34d4:	80 95       	com	r24
    34d6:	90 95       	com	r25
    34d8:	9b 01       	movw	r18, r22
    34da:	ac 01       	movw	r20, r24
    34dc:	bd 01       	movw	r22, r26
    34de:	cf 01       	movw	r24, r30
    34e0:	08 95       	ret

000034e2 <__umulhisi3>:
    34e2:	a2 9f       	mul	r26, r18
    34e4:	b0 01       	movw	r22, r0
    34e6:	b3 9f       	mul	r27, r19
    34e8:	c0 01       	movw	r24, r0
    34ea:	a3 9f       	mul	r26, r19
    34ec:	70 0d       	add	r23, r0
    34ee:	81 1d       	adc	r24, r1
    34f0:	11 24       	eor	r1, r1
    34f2:	91 1d       	adc	r25, r1
    34f4:	b2 9f       	mul	r27, r18
    34f6:	70 0d       	add	r23, r0
    34f8:	81 1d       	adc	r24, r1
    34fa:	11 24       	eor	r1, r1
    34fc:	91 1d       	adc	r25, r1
    34fe:	08 95       	ret

00003500 <_exit>:
    3500:	f8 94       	cli

00003502 <__stop_program>:
    3502:	ff cf       	rjmp	.-2      	; 0x3502 <__stop_program>

   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_11
  12               	__vector_11:
  13               	.LFB13:
  14               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        **** 
   3:main.c        **** 	Demo of glcd library with AVR8 microcontroller
   4:main.c        **** 	
   5:main.c        **** 	Tested on a custom made PCB (intended for another project)
   6:main.c        **** 
   7:main.c        **** 	See ../README.md for connection details
   8:main.c        **** 
   9:main.c        **** */
  10:main.c        **** 
  11:main.c        **** #include <avr/io.h>
  12:main.c        **** #include "glcd/glcd.h"
  13:main.c        **** #include <avr/interrupt.h>
  14:main.c        **** #include <stdio.h>
  15:main.c        **** #include <stdlib.h>
  16:main.c        **** #include "glcd/fonts/Liberation_Sans15x21_Numbers.h"
  17:main.c        **** #include "glcd/fonts/font5x7.h"
  18:main.c        **** #include <avr/pgmspace.h>
  19:main.c        **** #include <util/delay.h>
  20:main.c        **** 
  21:main.c        **** 
  22:main.c        **** 
  23:main.c        **** #define F_CPU 16000000UL  // 1 MHz
  24:main.c        **** 
  25:main.c        **** #define T_RED !(PIND & (1<<PD5)) && (entprell == 0)
  26:main.c        **** #define T_BLUE !(PIND & (1<<PD6)) && (entprell == 0)
  27:main.c        **** #define T_GREEN !(PIND & (1<<PD2)) && (entprell == 0)
  28:main.c        **** #define RELOAD_ENTPRELL 2
  29:main.c        **** 
  30:main.c        **** #define LED_EIN PORTC |= (1<<PC3)
  31:main.c        **** #define LED_AUS	PORTC &= ~(1<<PC3);					//LED ausschalten
  32:main.c        **** 
  33:main.c        **** 
  34:main.c        **** #define UP 1
  35:main.c        **** #define DOWN 0
  36:main.c        **** #define LEFT 0
  37:main.c        **** #define RIGHT 1
  38:main.c        **** 
  39:main.c        **** #define EIN 1
  40:main.c        **** #define AUS 0
  41:main.c        **** 
  42:main.c        **** #define BLOCK_BOTTOM (by==(blocky+block_hight+ball_radius))&&((bx>(blockx-ball_radius))&&(bx<blockx
  43:main.c        **** 
  44:main.c        **** //	  L1     M    R1
  45:main.c        **** //	|=====|=====|=====|
  46:main.c        **** //
  47:main.c        **** #define BALK_ZONE_L1 ball_pos_x < (balk_end_left+5)											
  48:main.c        **** #define BALK_ZONE_M (ball_pos_x > (balk_end_left+5))&&(ball_pos_x < (balk_end_left+10))	
  49:main.c        **** #define BALK_ZONE_R1 (ball_pos_x > (balk_end_left+10))&&(ball_pos_x < (balk_end_right))	
  50:main.c        **** #define BALKEN (ball_pos_y==42)&&((balk_end_left < (ball_pos_x+ball_radius)))&&(balk_end_right>(bal
  51:main.c        **** /* Function prototypes */
  52:main.c        **** static void setup(void);
  53:main.c        **** char buffer[20]={};
  54:main.c        **** static void setup(void)
  55:main.c        **** {
  56:main.c        **** 	/* Set up glcd, also sets up SPI and relevent GPIO pins */
  57:main.c        **** 	glcd_init();
  58:main.c        **** }
  59:main.c        **** 
  60:main.c        **** uint8_t ms, ms10,ms100,sec,min,entprell, state;
  61:main.c        **** 
  62:main.c        **** volatile uint8_t ball_pos_y, balken_pos_x, ball_vert_richt, ball_horiz_richt, balk_horiz_richt, bal
  63:main.c        **** volatile uint8_t ball_speed_y, ball_speed_x, ball_speed_y_counter,ball_speed_x_counter;
  64:main.c        **** uint8_t balk_vert_pos, balk_end_left, balk_end_right, balk_lenght, ball_pos_x, ball_radius;
  65:main.c        **** 
  66:main.c        **** ISR (TIMER1_COMPA_vect)
  67:main.c        **** {
  15               		.loc 1 67 1 view -0
  16               		.cfi_startproc
  17 0000 1F92 1FB6 		__gcc_isr 1
  17      1F92 1124 
  17      2F93 
  18 000a 8F93      		push r24
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 24, -2
  22 000c 9F93      		push r25
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 25, -3
  26               	/* prologue: Signal */
  27               	/* frame size = 0 */
  28               	/* stack size = 2...6 */
  29               	.L__stack_usage = 2 + __gcc_isr.n_pushed
  68:main.c        **** 	ms10++;
  30               		.loc 1 68 2 view .LVU1
  31               		.loc 1 68 6 is_stmt 0 view .LVU2
  32 000e 9091 0000 		lds r25,ms10
  33 0012 9F5F      		subi r25,lo8(-(1))
  34 0014 9093 0000 		sts ms10,r25
  69:main.c        **** 	if(entprell != 0)entprell--;
  35               		.loc 1 69 2 is_stmt 1 view .LVU3
  36               		.loc 1 69 14 is_stmt 0 view .LVU4
  37 0018 8091 0000 		lds r24,entprell
  38               		.loc 1 69 4 view .LVU5
  39 001c 8823      		tst r24
  40 001e 01F0      		breq .L2
  41               		.loc 1 69 19 is_stmt 1 discriminator 1 view .LVU6
  42               		.loc 1 69 27 is_stmt 0 discriminator 1 view .LVU7
  43 0020 8150      		subi r24,lo8(-(-1))
  44 0022 8093 0000 		sts entprell,r24
  45               	.L2:
  70:main.c        **** 	
  71:main.c        **** 	//y-movement ball
  72:main.c        **** 	ball_speed_y_counter++;
  46               		.loc 1 72 2 is_stmt 1 view .LVU8
  47               		.loc 1 72 22 is_stmt 0 view .LVU9
  48 0026 8091 0000 		lds r24,ball_speed_y_counter
  49 002a 8F5F      		subi r24,lo8(-(1))
  50 002c 8093 0000 		sts ball_speed_y_counter,r24
  73:main.c        **** 	if(ball_speed_y_counter>=ball_speed_y)
  51               		.loc 1 73 2 is_stmt 1 view .LVU10
  52               		.loc 1 73 25 is_stmt 0 view .LVU11
  53 0030 2091 0000 		lds r18,ball_speed_y_counter
  54 0034 8091 0000 		lds r24,ball_speed_y
  55               		.loc 1 73 4 view .LVU12
  56 0038 2817      		cp r18,r24
  57 003a 00F0      		brlo .L3
  74:main.c        **** 	{
  75:main.c        **** 		ball_refresh=EIN;
  58               		.loc 1 75 3 is_stmt 1 view .LVU13
  59               		.loc 1 75 15 is_stmt 0 view .LVU14
  60 003c 81E0      		ldi r24,lo8(1)
  61 003e 8093 0000 		sts ball_refresh,r24
  76:main.c        **** 		ball_speed_y_counter=0;
  62               		.loc 1 76 3 is_stmt 1 view .LVU15
  63               		.loc 1 76 23 is_stmt 0 view .LVU16
  64 0042 1092 0000 		sts ball_speed_y_counter,__zero_reg__
  77:main.c        **** 		if(ball_vert_richt==DOWN)
  65               		.loc 1 77 3 is_stmt 1 view .LVU17
  66               		.loc 1 77 21 is_stmt 0 view .LVU18
  67 0046 8091 0000 		lds r24,ball_vert_richt
  68               		.loc 1 77 5 view .LVU19
  69 004a 8111      		cpse r24,__zero_reg__
  70 004c 00C0      		rjmp .L4
  78:main.c        **** 		{
  79:main.c        **** 			ball_pos_y++;
  71               		.loc 1 79 4 is_stmt 1 view .LVU20
  72               		.loc 1 79 14 is_stmt 0 view .LVU21
  73 004e 8091 0000 		lds r24,ball_pos_y
  74 0052 8F5F      		subi r24,lo8(-(1))
  75               	.L16:
  80:main.c        **** 		}else ball_pos_y--;
  76               		.loc 1 80 19 view .LVU22
  77 0054 8093 0000 		sts ball_pos_y,r24
  78               	.L3:
  81:main.c        **** 	}
  82:main.c        **** 	//x-movement ball
  83:main.c        **** 	ball_speed_x_counter++;
  79               		.loc 1 83 2 is_stmt 1 view .LVU23
  80               		.loc 1 83 22 is_stmt 0 view .LVU24
  81 0058 8091 0000 		lds r24,ball_speed_x_counter
  82 005c 8F5F      		subi r24,lo8(-(1))
  83 005e 8093 0000 		sts ball_speed_x_counter,r24
  84:main.c        **** 	if((ball_speed_x_counter>=ball_speed_x) && (ball_speed_x!=0))
  84               		.loc 1 84 2 is_stmt 1 view .LVU25
  85               		.loc 1 84 26 is_stmt 0 view .LVU26
  86 0062 2091 0000 		lds r18,ball_speed_x_counter
  87 0066 8091 0000 		lds r24,ball_speed_x
  88               		.loc 1 84 4 view .LVU27
  89 006a 2817      		cp r18,r24
  90 006c 00F0      		brlo .L5
  91               		.loc 1 84 58 discriminator 1 view .LVU28
  92 006e 8091 0000 		lds r24,ball_speed_x
  93               		.loc 1 84 42 discriminator 1 view .LVU29
  94 0072 8823      		tst r24
  95 0074 01F0      		breq .L5
  85:main.c        **** 	{
  86:main.c        **** 		ball_speed_x_counter=0;
  96               		.loc 1 86 3 is_stmt 1 view .LVU30
  97               		.loc 1 86 23 is_stmt 0 view .LVU31
  98 0076 1092 0000 		sts ball_speed_x_counter,__zero_reg__
  87:main.c        **** 		//ball_refresh=EIN;
  88:main.c        **** 		if(ball_horiz_richt==RIGHT)
  99               		.loc 1 88 3 is_stmt 1 view .LVU32
 100               		.loc 1 88 22 is_stmt 0 view .LVU33
 101 007a 2091 0000 		lds r18,ball_horiz_richt
 102 007e 8091 0000 		lds r24,ball_pos_x
 103               		.loc 1 88 5 view .LVU34
 104 0082 2130      		cpi r18,lo8(1)
 105 0084 01F4      		brne .L6
  89:main.c        **** 		{
  90:main.c        **** 			ball_pos_x++;
 106               		.loc 1 90 4 is_stmt 1 view .LVU35
 107               		.loc 1 90 14 is_stmt 0 view .LVU36
 108 0086 8F5F      		subi r24,lo8(-(1))
 109               	.L17:
  91:main.c        **** 		}else ball_pos_x--;
 110               		.loc 1 91 19 view .LVU37
 111 0088 8093 0000 		sts ball_pos_x,r24
 112               	.L5:
  92:main.c        **** 	}
  93:main.c        **** 		
  94:main.c        **** 	if(ms10==10)	//10ms
 113               		.loc 1 94 2 is_stmt 1 view .LVU38
 114               		.loc 1 94 4 is_stmt 0 view .LVU39
 115 008c 9A30      		cpi r25,lo8(10)
 116 008e 01F4      		brne .L7
 117 0090 8091 0000 		lds r24,ms100
  95:main.c        **** 	{
  96:main.c        **** 		ms10=0;
 118               		.loc 1 96 3 is_stmt 1 view .LVU40
 119               		.loc 1 96 7 is_stmt 0 view .LVU41
 120 0094 1092 0000 		sts ms10,__zero_reg__
  97:main.c        **** 		ms100++;
 121               		.loc 1 97 3 is_stmt 1 view .LVU42
 122               		.loc 1 97 8 is_stmt 0 view .LVU43
 123 0098 8F5F      		subi r24,lo8(-(1))
 124 009a 8093 0000 		sts ms100,r24
 125               	.L7:
  98:main.c        **** 	
  99:main.c        **** 		
 100:main.c        **** 	}
 101:main.c        ****     if(ms100==10)	//100ms
 126               		.loc 1 101 5 is_stmt 1 view .LVU44
 127               		.loc 1 101 7 is_stmt 0 view .LVU45
 128 009e 8091 0000 		lds r24,ms100
 129 00a2 8A30      		cpi r24,lo8(10)
 130 00a4 01F4      		brne .L8
 131 00a6 8091 0000 		lds r24,sec
 102:main.c        **** 	{
 103:main.c        **** 		ms100=0;
 132               		.loc 1 103 3 is_stmt 1 view .LVU46
 133               		.loc 1 103 8 is_stmt 0 view .LVU47
 134 00aa 1092 0000 		sts ms100,__zero_reg__
 104:main.c        **** 		sec++;
 135               		.loc 1 104 3 is_stmt 1 view .LVU48
 136               		.loc 1 104 6 is_stmt 0 view .LVU49
 137 00ae 8F5F      		subi r24,lo8(-(1))
 138 00b0 8093 0000 		sts sec,r24
 139               	.L8:
 105:main.c        **** 	}
 106:main.c        **** 	if(sec==60)	//Minute
 140               		.loc 1 106 2 is_stmt 1 view .LVU50
 141               		.loc 1 106 4 is_stmt 0 view .LVU51
 142 00b4 8091 0000 		lds r24,sec
 143 00b8 8C33      		cpi r24,lo8(60)
 144 00ba 01F4      		brne .L1
 107:main.c        **** 	{
 108:main.c        **** 		sec=0;
 145               		.loc 1 108 3 is_stmt 1 view .LVU52
 146               		.loc 1 108 6 is_stmt 0 view .LVU53
 147 00bc 1092 0000 		sts sec,__zero_reg__
 109:main.c        **** 		min++;
 148               		.loc 1 109 3 is_stmt 1 view .LVU54
 149               		.loc 1 109 6 is_stmt 0 view .LVU55
 150 00c0 8091 0000 		lds r24,min
 151 00c4 8F5F      		subi r24,lo8(-(1))
 152 00c6 8093 0000 		sts min,r24
 153               	.L1:
 154               	/* epilogue start */
 110:main.c        **** 	}
 111:main.c        **** }
 155               		.loc 1 111 1 view .LVU56
 156 00ca 9F91      		pop r25
 157 00cc 8F91      		pop r24
 158 00ce 2F91 1F90 		__gcc_isr 2
 158      1FBE 1F90 
 159 00d6 1895      		reti
 160               	.L4:
  80:main.c        **** 	}
 161               		.loc 1 80 9 is_stmt 1 view .LVU57
  80:main.c        **** 	}
 162               		.loc 1 80 19 is_stmt 0 view .LVU58
 163 00d8 8091 0000 		lds r24,ball_pos_y
 164 00dc 8150      		subi r24,lo8(-(-1))
 165 00de 00C0      		rjmp .L16
 166               	.L6:
  91:main.c        **** 	}
 167               		.loc 1 91 9 is_stmt 1 view .LVU59
  91:main.c        **** 	}
 168               		.loc 1 91 19 is_stmt 0 view .LVU60
 169 00e0 8150      		subi r24,lo8(-(-1))
 170 00e2 00C0      		rjmp .L17
 171               		__gcc_isr 0,r18
 172               		.cfi_endproc
 173               	.LFE13:
 175               	.global	block1
 177               	block1:
 178               	.LVL0:
 179               	.LFB14:
 112:main.c        **** const unsigned char batman[] PROGMEM= 
 113:main.c        **** { 
 114:main.c        **** 	//Batman
 115:main.c        **** 	/*0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 116:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 117:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 118:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 119:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 120:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 121:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 122:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 123:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 124:main.c        **** 	0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 
 125:main.c        **** 	0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 
 126:main.c        **** 	0xff, 0xe7, 0x83, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
 127:main.c        **** 	0x00, 0x80, 0xc0, 0xfe, 0xfc, 0xf8, 0xf8, 0xfc, 0xfe, 0xc0, 
 128:main.c        **** 	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x83, 
 129:main.c        **** 	0xe7, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 
 130:main.c        **** 	0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 
 131:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 
 132:main.c        **** 	0x70, 0x78, 0x3c, 0x3e, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 
 133:main.c        **** 	0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
 134:main.c        **** 	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
 135:main.c        **** 	0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
 136:main.c        **** 	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 
 137:main.c        **** 	0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
 138:main.c        **** 	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 
 139:main.c        **** 	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x3c, 0x78, 0x70, 
 140:main.c        **** 	0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 141:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0f, 
 142:main.c        **** 	0x3f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 
 143:main.c        **** 	0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 
 144:main.c        **** 	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
 145:main.c        **** 	0xff, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 
 146:main.c        **** 	0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x3f, 0x0f, 0x03, 
 147:main.c        **** 	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 148:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 149:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 150:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 151:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 152:main.c        **** 	0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x3f, 0xff, 0xff, 0x3f, 
 153:main.c        **** 	0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 154:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 155:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 156:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 157:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 158:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 159:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 160:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 161:main.c        **** 	0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 162:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 163:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 164:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 165:main.c        **** 	0x00, 0x00, 0x00, 0x00*/
 166:main.c        **** 	//Woodstock
 167:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 168:main.c        **** 	0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0c, 
 169:main.c        **** 	0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0x20, 0x00, 0x00, 0x00, 
 170:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 171:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 172:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 173:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 174:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 175:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 176:main.c        **** 	0x00, 0x00, 0x80, 0x80, 0x03, 0x07, 0x0c, 0x98, 0x70, 0x00, 
 177:main.c        **** 	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8f, 0x9d, 
 178:main.c        **** 	0x18, 0x10, 0x30, 0x20, 0x20, 0x20, 0x20, 0x60, 0x60, 0x40, 
 179:main.c        **** 	0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 180:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 181:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 182:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 183:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 184:main.c        **** 	0x00, 0x00, 0x00, 0x18, 0x1e, 0x11, 0x01, 0x01, 0x01, 0x81, 
 185:main.c        **** 	0xc1, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 186:main.c        **** 	0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 
 187:main.c        **** 	0xc0, 0xc0, 0xc0, 0xe0, 0x70, 0x3f, 0x1f, 0x00, 0x00, 0x00, 
 188:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 189:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 190:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 191:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 192:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 193:main.c        **** 	0x00, 0x06, 0x07, 0x01, 0x01, 0x00, 0x08, 0x08, 0x0c, 0x0c, 
 194:main.c        **** 	0x0c, 0x0c, 0x0c, 0x0c, 0x1c, 0xf8, 0xf0, 0x00, 0x00, 0x1e, 
 195:main.c        **** 	0xff, 0xdf, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 
 196:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 197:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 198:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 199:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 200:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 201:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0x30, 0x18, 0x00, 
 202:main.c        **** 	0x08, 0x08, 0x10, 0x20, 0x20, 0xa0, 0xe0, 0xf0, 0x7e, 0xe3, 
 203:main.c        **** 	0xe0, 0xf8, 0xc0, 0x44, 0x18, 0xa1, 0xff, 0x1e, 0x00, 0x00, 
 204:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 205:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 206:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 207:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 208:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 209:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
 210:main.c        **** 	0x0e, 0x0c, 0x0c, 0x0c, 0x06, 0x06, 0x03, 0x13, 0x3b, 0x39, 
 211:main.c        **** 	0x29, 0x68, 0x68, 0x6f, 0x6d, 0x60, 0x67, 0x67, 0x67, 0x67, 
 212:main.c        **** 	0x67, 0x65, 0x35, 0x39, 0x39, 0x13, 0x06, 0x00, 0x00, 0x00, 
 213:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 214:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 215:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 216:main.c        **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 217:main.c        **** 	0x00, 0x00, 0x00, 0x00
 218:main.c        **** 	
 219:main.c        **** 	};
 220:main.c        **** 	
 221:main.c        **** 	
 222:main.c        **** void block1(uint8_t bx, uint8_t by)
 223:main.c        **** {
 180               		.loc 1 223 1 is_stmt 1 view -0
 181               		.cfi_startproc
 182               		.loc 1 223 1 is_stmt 0 view .LVU62
 183 00e4 0F93      		push r16
 184               	.LCFI2:
 185               		.cfi_def_cfa_offset 3
 186               		.cfi_offset 16, -2
 187 00e6 CF93      		push r28
 188               	.LCFI3:
 189               		.cfi_def_cfa_offset 4
 190               		.cfi_offset 28, -3
 191 00e8 DF93      		push r29
 192               	.LCFI4:
 193               		.cfi_def_cfa_offset 5
 194               		.cfi_offset 29, -4
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 3 */
 198               	.L__stack_usage = 3
 199 00ea C82F      		mov r28,r24
 200 00ec D62F      		mov r29,r22
 224:main.c        **** 	static uint8_t aktiv=1;
 201               		.loc 1 224 2 is_stmt 1 view .LVU63
 225:main.c        **** 	const uint8_t blockx=10;
 202               		.loc 1 225 2 view .LVU64
 203               	.LVL1:
 226:main.c        **** 	const uint8_t blocky=0;
 204               		.loc 1 226 2 view .LVU65
 227:main.c        **** 	const uint8_t block_lenght=20;
 205               		.loc 1 227 2 view .LVU66
 228:main.c        **** 	const uint8_t block_hight=5;
 206               		.loc 1 228 2 view .LVU67
 229:main.c        **** 	
 230:main.c        **** 	if(aktiv==1)//noch nie getroffen
 207               		.loc 1 230 2 view .LVU68
 208               		.loc 1 230 4 is_stmt 0 view .LVU69
 209 00ee 8091 0000 		lds r24,aktiv.2464
 210               	.LVL2:
 211               		.loc 1 230 4 view .LVU70
 212 00f2 8130      		cpi r24,lo8(1)
 213 00f4 01F4      		brne .L18
 231:main.c        **** 	{
 232:main.c        **** 		glcd_draw_rect(blockx, blocky, block_lenght, block_hight, BLACK);
 214               		.loc 1 232 3 is_stmt 1 view .LVU71
 215 00f6 01E0      		ldi r16,lo8(1)
 216 00f8 25E0      		ldi r18,lo8(5)
 217 00fa 44E1      		ldi r20,lo8(20)
 218 00fc 60E0      		ldi r22,0
 219               	.LVL3:
 220               		.loc 1 232 3 is_stmt 0 view .LVU72
 221 00fe 8AE0      		ldi r24,lo8(10)
 222 0100 0E94 0000 		call glcd_draw_rect
 223               	.LVL4:
 233:main.c        **** 		if(ball_vert_richt==UP)//block hit from the bottom?
 224               		.loc 1 233 3 is_stmt 1 view .LVU73
 225               		.loc 1 233 21 is_stmt 0 view .LVU74
 226 0104 8091 0000 		lds r24,ball_vert_richt
 227               		.loc 1 233 5 view .LVU75
 228 0108 8130      		cpi r24,lo8(1)
 229 010a 01F4      		brne .L18
 234:main.c        **** 		{
 235:main.c        **** 			if(BLOCK_BOTTOM)
 230               		.loc 1 235 4 is_stmt 1 view .LVU76
 231               		.loc 1 235 7 is_stmt 0 view .LVU77
 232 010c 2091 0000 		lds r18,ball_radius
 233 0110 30E0      		ldi r19,0
 234 0112 C901      		movw r24,r18
 235 0114 0596      		adiw r24,5
 236               		.loc 1 235 6 view .LVU78
 237 0116 D817      		cp r29,r24
 238 0118 1906      		cpc __zero_reg__,r25
 239 011a 01F4      		brne .L18
 240               		.loc 1 235 7 discriminator 1 view .LVU79
 241 011c D0E0      		ldi r29,0
 242               	.LVL5:
 243               		.loc 1 235 7 discriminator 1 view .LVU80
 244 011e 4AE0      		ldi r20,lo8(10)
 245 0120 50E0      		ldi r21,0
 246 0122 421B      		sub r20,r18
 247 0124 530B      		sbc r21,r19
 248 0126 4C17      		cp r20,r28
 249 0128 5D07      		cpc r21,r29
 250 012a 04F4      		brge .L18
 251               		.loc 1 235 7 discriminator 2 view .LVU81
 252 012c 235E      		subi r18,-29
 253 012e 3F4F      		sbci r19,-1
 254 0130 2C17      		cp r18,r28
 255 0132 3D07      		cpc r19,r29
 256 0134 04F0      		brlt .L18
 257               	.LVL6:
 258               	.LBB6:
 259               	.LBB7:
 236:main.c        **** 			{
 237:main.c        **** 				ball_vert_richt=DOWN;
 260               		.loc 1 237 5 is_stmt 1 view .LVU82
 261               		.loc 1 237 20 is_stmt 0 view .LVU83
 262 0136 1092 0000 		sts ball_vert_richt,__zero_reg__
 238:main.c        **** 				aktiv=0;//block verbraucht weil getroffen
 263               		.loc 1 238 5 is_stmt 1 view .LVU84
 264               		.loc 1 238 10 is_stmt 0 view .LVU85
 265 013a 1092 0000 		sts aktiv.2464,__zero_reg__
 239:main.c        **** 				glcd_draw_rect(blockx, blocky, block_lenght, block_hight, WHITE);
 266               		.loc 1 239 5 is_stmt 1 view .LVU86
 267 013e 00E0      		ldi r16,0
 268 0140 25E0      		ldi r18,lo8(5)
 269 0142 44E1      		ldi r20,lo8(20)
 270 0144 60E0      		ldi r22,0
 271 0146 8AE0      		ldi r24,lo8(10)
 272 0148 0E94 0000 		call glcd_draw_rect
 273               	.LVL7:
 240:main.c        **** 			}
 241:main.c        **** 		}else 	if(1)
 242:main.c        **** 				{
 243:main.c        **** 					
 244:main.c        **** 				}
 274               		.loc 1 244 5 view .LVU87
 275               	.LBE7:
 276               	.LBE6:
 277               		.loc 1 244 5 view .LVU88
 278               	.L18:
 279               	/* epilogue start */
 245:main.c        **** 		
 246:main.c        **** 		
 247:main.c        **** 	}
 248:main.c        **** 	
 249:main.c        **** 	
 250:main.c        **** 	
 251:main.c        **** }
 280               		.loc 1 251 1 is_stmt 0 view .LVU89
 281 014c DF91      		pop r29
 282 014e CF91      		pop r28
 283               	.LVL8:
 284               		.loc 1 251 1 view .LVU90
 285 0150 0F91      		pop r16
 286 0152 0895      		ret
 287               		.cfi_endproc
 288               	.LFE14:
 290               		.section	.text.startup,"ax",@progbits
 291               	.global	main
 293               	main:
 294               	.LFB15:
 252:main.c        **** 	
 253:main.c        **** int main(void)
 254:main.c        **** {	
 295               		.loc 1 254 1 is_stmt 1 view -0
 296               		.cfi_startproc
 297               	/* prologue: function */
 298               	/* frame size = 0 */
 299               	/* stack size = 0 */
 300               	.L__stack_usage = 0
 255:main.c        **** 	
 256:main.c        **** 	
 257:main.c        **** 	/* Backlight pin PL3, set as output, set high for 100% output */
 258:main.c        **** 	DDRB |= (1<<PB2);
 301               		.loc 1 258 2 view .LVU92
 302               		.loc 1 258 7 is_stmt 0 view .LVU93
 303 0000 229A      		sbi 0x4,2
 259:main.c        **** 	PORTB |= (1<<PB2);
 304               		.loc 1 259 2 is_stmt 1 view .LVU94
 305               		.loc 1 259 8 is_stmt 0 view .LVU95
 306 0002 2A9A      		sbi 0x5,2
 260:main.c        **** 	
 261:main.c        **** 	DDRC |=(1<<PC3); 	//Ausgang LED
 307               		.loc 1 261 2 is_stmt 1 view .LVU96
 308               		.loc 1 261 7 is_stmt 0 view .LVU97
 309 0004 3B9A      		sbi 0x7,3
 262:main.c        **** 	PORTC |= (1<<PC3);	//Led ein
 310               		.loc 1 262 2 is_stmt 1 view .LVU98
 311               		.loc 1 262 8 is_stmt 0 view .LVU99
 312 0006 439A      		sbi 0x8,3
 263:main.c        **** 		
 264:main.c        **** 	DDRD &= ~((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//Taster 1-3
 313               		.loc 1 264 2 is_stmt 1 view .LVU100
 314               		.loc 1 264 7 is_stmt 0 view .LVU101
 315 0008 8AB1      		in r24,0xa
 316 000a 8B79      		andi r24,lo8(-101)
 317 000c 8AB9      		out 0xa,r24
 265:main.c        **** 	PORTD |= ((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//PUllups für Taster einschalten
 318               		.loc 1 265 2 is_stmt 1 view .LVU102
 319               		.loc 1 265 8 is_stmt 0 view .LVU103
 320 000e 8BB1      		in r24,0xb
 321 0010 8466      		ori r24,lo8(100)
 322 0012 8BB9      		out 0xb,r24
 266:main.c        **** 	
 267:main.c        **** 	//Timer 1 Configuration
 268:main.c        **** 	OCR1A = 0x009C;	//OCR1A = 0x3D08;==1sec
 323               		.loc 1 268 2 is_stmt 1 view .LVU104
 324               		.loc 1 268 8 is_stmt 0 view .LVU105
 325 0014 8CE9      		ldi r24,lo8(-100)
 326 0016 90E0      		ldi r25,0
 327 0018 9093 8900 		sts 136+1,r25
 328 001c 8093 8800 		sts 136,r24
 269:main.c        **** 	
 270:main.c        ****     TCCR1B |= (1 << WGM12);
 329               		.loc 1 270 5 is_stmt 1 view .LVU106
 330               		.loc 1 270 12 is_stmt 0 view .LVU107
 331 0020 8091 8100 		lds r24,129
 332 0024 8860      		ori r24,lo8(8)
 333 0026 8093 8100 		sts 129,r24
 271:main.c        ****     // Mode 4, CTC on OCR1A
 272:main.c        **** 
 273:main.c        ****     TIMSK1 |= (1 << OCIE1A);
 334               		.loc 1 273 5 is_stmt 1 view .LVU108
 335               		.loc 1 273 12 is_stmt 0 view .LVU109
 336 002a 8091 6F00 		lds r24,111
 337 002e 8260      		ori r24,lo8(2)
 338 0030 8093 6F00 		sts 111,r24
 274:main.c        ****     //Set interrupt on compare match
 275:main.c        **** 
 276:main.c        ****     TCCR1B |= (1 << CS12) | (1 << CS10);
 339               		.loc 1 276 5 is_stmt 1 view .LVU110
 340               		.loc 1 276 12 is_stmt 0 view .LVU111
 341 0034 8091 8100 		lds r24,129
 342 0038 8560      		ori r24,lo8(5)
 343 003a 8093 8100 		sts 129,r24
 277:main.c        ****     // set prescaler to 1024 and start the timer
 278:main.c        **** 
 279:main.c        ****     sei();
 344               		.loc 1 279 5 is_stmt 1 view .LVU112
 345               	/* #APP */
 346               	 ;  279 "main.c" 1
 347 003e 7894      		sei
 348               	 ;  0 "" 2
 280:main.c        ****     // enable interrupts
 281:main.c        ****  
 282:main.c        **** 	
 283:main.c        **** 	setup();
 349               		.loc 1 283 2 view .LVU113
 350               	/* #NOAPP */
 351               	.LBB8:
 352               	.LBI8:
  54:main.c        **** {
 353               		.loc 1 54 13 view .LVU114
 354               	.LBB9:
  57:main.c        **** }
 355               		.loc 1 57 2 view .LVU115
 356 0040 0E94 0000 		call glcd_init
 357               	.LVL9:
 358               	.LBE9:
 359               	.LBE8:
 284:main.c        **** 	
 285:main.c        **** 	glcd_clear();
 360               		.loc 1 285 2 view .LVU116
 361 0044 0E94 0000 		call glcd_clear
 362               	.LVL10:
 286:main.c        **** 	glcd_write();
 363               		.loc 1 286 2 view .LVU117
 364 0048 0E94 0000 		call glcd_write
 365               	.LVL11:
 287:main.c        **** 	
 288:main.c        **** 	balk_lenght=16;//lenght of balken
 366               		.loc 1 288 2 view .LVU118
 367               		.loc 1 288 13 is_stmt 0 view .LVU119
 368 004c 80E1      		ldi r24,lo8(16)
 369 004e 8093 0000 		sts balk_lenght,r24
 289:main.c        **** 	ball_pos_y = 20;//mittelpunkt ball startposition
 370               		.loc 1 289 2 is_stmt 1 view .LVU120
 371               		.loc 1 289 13 is_stmt 0 view .LVU121
 372 0052 84E1      		ldi r24,lo8(20)
 373 0054 8093 0000 		sts ball_pos_y,r24
 290:main.c        **** 	balken_pos_x = 8;//linke seite balken startposition
 374               		.loc 1 290 2 is_stmt 1 view .LVU122
 375               		.loc 1 290 15 is_stmt 0 view .LVU123
 376 0058 C8E0      		ldi r28,lo8(8)
 377 005a C093 0000 		sts balken_pos_x,r28
 291:main.c        **** 	ball_vert_richt = DOWN; //0=down 1=up
 378               		.loc 1 291 2 is_stmt 1 view .LVU124
 379               		.loc 1 291 18 is_stmt 0 view .LVU125
 380 005e 1092 0000 		sts ball_vert_richt,__zero_reg__
 292:main.c        **** 	ball_horiz_richt = LEFT; 
 381               		.loc 1 292 2 is_stmt 1 view .LVU126
 382               		.loc 1 292 19 is_stmt 0 view .LVU127
 383 0062 1092 0000 		sts ball_horiz_richt,__zero_reg__
 293:main.c        **** 	balk_horiz_richt=0;//0=left to right, 1=right to left
 384               		.loc 1 293 2 is_stmt 1 view .LVU128
 385               		.loc 1 293 18 is_stmt 0 view .LVU129
 386 0066 1092 0000 		sts balk_horiz_richt,__zero_reg__
 294:main.c        **** 	ball_speed_y=3;
 387               		.loc 1 294 2 is_stmt 1 view .LVU130
 388               		.loc 1 294 14 is_stmt 0 view .LVU131
 389 006a 83E0      		ldi r24,lo8(3)
 390 006c 8093 0000 		sts ball_speed_y,r24
 295:main.c        **** 	ball_speed_x=0;
 391               		.loc 1 295 2 is_stmt 1 view .LVU132
 392               		.loc 1 295 14 is_stmt 0 view .LVU133
 393 0070 1092 0000 		sts ball_speed_x,__zero_reg__
 296:main.c        **** 	ball_speed_y_counter=0;
 394               		.loc 1 296 2 is_stmt 1 view .LVU134
 395               		.loc 1 296 22 is_stmt 0 view .LVU135
 396 0074 1092 0000 		sts ball_speed_y_counter,__zero_reg__
 297:main.c        **** 	
 298:main.c        **** 	balk_vert_pos=46; //Startposition bottom of screen
 397               		.loc 1 298 2 is_stmt 1 view .LVU136
 398               		.loc 1 298 15 is_stmt 0 view .LVU137
 399 0078 8EE2      		ldi r24,lo8(46)
 400 007a 8093 0000 		sts balk_vert_pos,r24
 299:main.c        **** 	balk_end_left=balken_pos_x;
 401               		.loc 1 299 2 is_stmt 1 view .LVU138
 402               		.loc 1 299 15 is_stmt 0 view .LVU139
 403 007e 8091 0000 		lds r24,balken_pos_x
 404 0082 8093 0000 		sts balk_end_left,r24
 300:main.c        **** 	balk_end_right=balken_pos_x+balk_lenght;
 405               		.loc 1 300 2 is_stmt 1 view .LVU140
 406               		.loc 1 300 29 is_stmt 0 view .LVU141
 407 0086 8091 0000 		lds r24,balken_pos_x
 408 008a 805F      		subi r24,lo8(-(16))
 409               		.loc 1 300 16 view .LVU142
 410 008c 8093 0000 		sts balk_end_right,r24
 301:main.c        **** 	balk_lenght=16;//lenght of balken
 411               		.loc 1 301 2 is_stmt 1 view .LVU143
 302:main.c        **** 	ball_pos_x=17;
 412               		.loc 1 302 2 view .LVU144
 413               		.loc 1 302 12 is_stmt 0 view .LVU145
 414 0090 81E1      		ldi r24,lo8(17)
 415 0092 8093 0000 		sts ball_pos_x,r24
 303:main.c        **** 	ball_radius=4;
 416               		.loc 1 303 2 is_stmt 1 view .LVU146
 417               		.loc 1 303 13 is_stmt 0 view .LVU147
 418 0096 84E0      		ldi r24,lo8(4)
 419 0098 8093 0000 		sts ball_radius,r24
 304:main.c        **** 	ball_refresh=EIN;
 420               		.loc 1 304 2 is_stmt 1 view .LVU148
 421               		.loc 1 304 14 is_stmt 0 view .LVU149
 422 009c 81E0      		ldi r24,lo8(1)
 423 009e 8093 0000 		sts ball_refresh,r24
 305:main.c        **** 	balk_refresh=EIN;
 424               		.loc 1 305 2 is_stmt 1 view .LVU150
 425               		.loc 1 305 14 is_stmt 0 view .LVU151
 426 00a2 8093 0000 		sts balk_refresh,r24
 306:main.c        **** 	// Display
 307:main.c        **** 	glcd_tiny_set_font(Font5x7,5,7,32,127);
 427               		.loc 1 307 2 is_stmt 1 view .LVU152
 428 00a6 0FE7      		ldi r16,lo8(127)
 429 00a8 20E2      		ldi r18,lo8(32)
 430 00aa 47E0      		ldi r20,lo8(7)
 431 00ac 65E0      		ldi r22,lo8(5)
 432 00ae 80E0      		ldi r24,lo8(Font5x7)
 433 00b0 90E0      		ldi r25,hi8(Font5x7)
 434 00b2 0E94 0000 		call glcd_tiny_set_font
 435               	.LVL12:
 308:main.c        **** 	glcd_clear_buffer();
 436               		.loc 1 308 2 view .LVU153
 437 00b6 0E94 0000 		call glcd_clear_buffer
 438               	.LVL13:
 309:main.c        **** 
 310:main.c        **** 	state=8;
 439               		.loc 1 310 2 view .LVU154
 440               		.loc 1 310 7 is_stmt 0 view .LVU155
 441 00ba C093 0000 		sts state,r28
 311:main.c        **** 	while(1) 
 312:main.c        **** 	{
 313:main.c        **** 		
 314:main.c        **** 		block1(ball_pos_x, ball_pos_y);
 315:main.c        **** 		
 316:main.c        **** 		
 317:main.c        **** 		
 318:main.c        **** 		if(T_RED)//move right
 319:main.c        **** 		{
 320:main.c        **** 			entprell=RELOAD_ENTPRELL;
 442               		.loc 1 320 12 view .LVU156
 443 00be D2E0      		ldi r29,lo8(2)
 321:main.c        **** 			if((balken_pos_x+balk_lenght)!=84)balken_pos_x++;
 322:main.c        **** 			balk_horiz_richt=0;
 323:main.c        **** 			balk_refresh=EIN;
 444               		.loc 1 323 16 view .LVU157
 445 00c0 C1E0      		ldi r28,lo8(1)
 324:main.c        **** 		}
 325:main.c        **** 		if(T_BLUE)//move left
 326:main.c        **** 		{
 327:main.c        **** 			entprell=RELOAD_ENTPRELL;
 328:main.c        **** 			if(balken_pos_x!=0)balken_pos_x--;
 329:main.c        **** 			balk_horiz_richt=1;
 330:main.c        **** 			balk_refresh=EIN;
 331:main.c        **** 		}
 332:main.c        **** 		//Balken Endpunkte neu berechnen
 333:main.c        **** 		balk_end_left=balken_pos_x;
 334:main.c        **** 		balk_end_right=balken_pos_x+balk_lenght;
 335:main.c        **** 		
 336:main.c        **** 		
 337:main.c        **** 		if(ball_pos_y==4)ball_vert_richt=DOWN;//reached top screen border
 338:main.c        **** 		
 339:main.c        **** 		if((ball_pos_y==42)&&((ball_pos_x+ball_radius)>balk_end_left)&&((ball_pos_x-ball_radius)<balk_end
 340:main.c        **** 		{
 341:main.c        **** 			ball_vert_richt=UP;
 342:main.c        **** 			if((ball_pos_x+ball_radius)<(balk_end_left+5))
 343:main.c        **** 			{
 344:main.c        **** 				ball_speed_x=6;
 345:main.c        **** 				ball_horiz_richt=LEFT;
 346:main.c        **** 			}else	if((ball_pos_x-ball_radius)>balk_end_left+10)
 347:main.c        **** 					{
 348:main.c        **** 						ball_speed_x=6;
 446               		.loc 1 348 19 view .LVU158
 447 00c2 16E0      		ldi r17,lo8(6)
 448               	.L23:
 311:main.c        **** 	{
 449               		.loc 1 311 2 is_stmt 1 view .LVU159
 314:main.c        **** 		
 450               		.loc 1 314 3 view .LVU160
 451 00c4 6091 0000 		lds r22,ball_pos_y
 452 00c8 8091 0000 		lds r24,ball_pos_x
 453 00cc 0E94 0000 		call block1
 454               	.LVL14:
 318:main.c        **** 		{
 455               		.loc 1 318 3 view .LVU161
 318:main.c        **** 		{
 456               		.loc 1 318 6 is_stmt 0 view .LVU162
 457 00d0 89B1      		in r24,0x9
 458 00d2 8072      		andi r24,lo8(32)
 459 00d4 9091 0000 		lds r25,entprell
 460 00d8 892B      		or r24,r25
 461 00da 3091 0000 		lds r19,balk_lenght
 462 00de 8111      		cpse r24,__zero_reg__
 463 00e0 00C0      		rjmp .L24
 320:main.c        **** 			if((balken_pos_x+balk_lenght)!=84)balken_pos_x++;
 464               		.loc 1 320 4 is_stmt 1 view .LVU163
 320:main.c        **** 			if((balken_pos_x+balk_lenght)!=84)balken_pos_x++;
 465               		.loc 1 320 12 is_stmt 0 view .LVU164
 466 00e2 D093 0000 		sts entprell,r29
 321:main.c        **** 			balk_horiz_richt=0;
 467               		.loc 1 321 4 is_stmt 1 view .LVU165
 321:main.c        **** 			balk_horiz_richt=0;
 468               		.loc 1 321 20 is_stmt 0 view .LVU166
 469 00e6 8091 0000 		lds r24,balken_pos_x
 470 00ea 432F      		mov r20,r19
 471 00ec 480F      		add r20,r24
 472 00ee 5527      		clr r21
 473 00f0 551F      		rol r21
 321:main.c        **** 			balk_horiz_richt=0;
 474               		.loc 1 321 6 view .LVU167
 475 00f2 4435      		cpi r20,84
 476 00f4 5105      		cpc r21,__zero_reg__
 477 00f6 01F0      		breq .L25
 321:main.c        **** 			balk_horiz_richt=0;
 478               		.loc 1 321 38 is_stmt 1 discriminator 1 view .LVU168
 321:main.c        **** 			balk_horiz_richt=0;
 479               		.loc 1 321 50 is_stmt 0 discriminator 1 view .LVU169
 480 00f8 8091 0000 		lds r24,balken_pos_x
 481 00fc 8F5F      		subi r24,lo8(-(1))
 482 00fe 8093 0000 		sts balken_pos_x,r24
 483               	.L25:
 322:main.c        **** 			balk_refresh=EIN;
 484               		.loc 1 322 4 is_stmt 1 view .LVU170
 322:main.c        **** 			balk_refresh=EIN;
 485               		.loc 1 322 20 is_stmt 0 view .LVU171
 486 0102 1092 0000 		sts balk_horiz_richt,__zero_reg__
 323:main.c        **** 		}
 487               		.loc 1 323 4 is_stmt 1 view .LVU172
 323:main.c        **** 		}
 488               		.loc 1 323 16 is_stmt 0 view .LVU173
 489 0106 C093 0000 		sts balk_refresh,r28
 490               	.L24:
 325:main.c        **** 		{
 491               		.loc 1 325 3 is_stmt 1 view .LVU174
 325:main.c        **** 		{
 492               		.loc 1 325 6 is_stmt 0 view .LVU175
 493 010a 89B1      		in r24,0x9
 494 010c 8074      		andi r24,lo8(64)
 495 010e 9091 0000 		lds r25,entprell
 496 0112 892B      		or r24,r25
 497 0114 01F4      		brne .L26
 327:main.c        **** 			if(balken_pos_x!=0)balken_pos_x--;
 498               		.loc 1 327 4 is_stmt 1 view .LVU176
 327:main.c        **** 			if(balken_pos_x!=0)balken_pos_x--;
 499               		.loc 1 327 12 is_stmt 0 view .LVU177
 500 0116 D093 0000 		sts entprell,r29
 328:main.c        **** 			balk_horiz_richt=1;
 501               		.loc 1 328 4 is_stmt 1 view .LVU178
 328:main.c        **** 			balk_horiz_richt=1;
 502               		.loc 1 328 19 is_stmt 0 view .LVU179
 503 011a 8091 0000 		lds r24,balken_pos_x
 328:main.c        **** 			balk_horiz_richt=1;
 504               		.loc 1 328 6 view .LVU180
 505 011e 8823      		tst r24
 506 0120 01F0      		breq .L27
 328:main.c        **** 			balk_horiz_richt=1;
 507               		.loc 1 328 23 is_stmt 1 discriminator 1 view .LVU181
 328:main.c        **** 			balk_horiz_richt=1;
 508               		.loc 1 328 35 is_stmt 0 discriminator 1 view .LVU182
 509 0122 8091 0000 		lds r24,balken_pos_x
 510 0126 8150      		subi r24,lo8(-(-1))
 511 0128 8093 0000 		sts balken_pos_x,r24
 512               	.L27:
 329:main.c        **** 			balk_refresh=EIN;
 513               		.loc 1 329 4 is_stmt 1 view .LVU183
 329:main.c        **** 			balk_refresh=EIN;
 514               		.loc 1 329 20 is_stmt 0 view .LVU184
 515 012c C093 0000 		sts balk_horiz_richt,r28
 330:main.c        **** 		}
 516               		.loc 1 330 4 is_stmt 1 view .LVU185
 330:main.c        **** 		}
 517               		.loc 1 330 16 is_stmt 0 view .LVU186
 518 0130 C093 0000 		sts balk_refresh,r28
 519               	.L26:
 333:main.c        **** 		balk_end_right=balken_pos_x+balk_lenght;
 520               		.loc 1 333 3 is_stmt 1 view .LVU187
 333:main.c        **** 		balk_end_right=balken_pos_x+balk_lenght;
 521               		.loc 1 333 16 is_stmt 0 view .LVU188
 522 0134 2091 0000 		lds r18,balken_pos_x
 523 0138 2093 0000 		sts balk_end_left,r18
 334:main.c        **** 		
 524               		.loc 1 334 3 is_stmt 1 view .LVU189
 334:main.c        **** 		
 525               		.loc 1 334 30 is_stmt 0 view .LVU190
 526 013c 9091 0000 		lds r25,balken_pos_x
 527 0140 930F      		add r25,r19
 334:main.c        **** 		
 528               		.loc 1 334 17 view .LVU191
 529 0142 9093 0000 		sts balk_end_right,r25
 337:main.c        **** 		
 530               		.loc 1 337 3 is_stmt 1 view .LVU192
 337:main.c        **** 		
 531               		.loc 1 337 16 is_stmt 0 view .LVU193
 532 0146 8091 0000 		lds r24,ball_pos_y
 337:main.c        **** 		
 533               		.loc 1 337 5 view .LVU194
 534 014a 8430      		cpi r24,lo8(4)
 535 014c 01F4      		brne .L28
 337:main.c        **** 		
 536               		.loc 1 337 20 is_stmt 1 discriminator 1 view .LVU195
 337:main.c        **** 		
 537               		.loc 1 337 35 is_stmt 0 discriminator 1 view .LVU196
 538 014e 1092 0000 		sts ball_vert_richt,__zero_reg__
 539               	.L28:
 339:main.c        **** 		{
 540               		.loc 1 339 3 is_stmt 1 view .LVU197
 339:main.c        **** 		{
 541               		.loc 1 339 17 is_stmt 0 view .LVU198
 542 0152 3091 0000 		lds r19,ball_pos_y
 543 0156 8091 0000 		lds r24,ball_pos_x
 544 015a 4091 0000 		lds r20,ball_radius
 545 015e 682F      		mov r22,r24
 546 0160 70E0      		ldi r23,0
 547 0162 A42F      		mov r26,r20
 548 0164 B0E0      		ldi r27,0
 549 0166 FD01      		movw r30,r26
 550 0168 E60F      		add r30,r22
 551 016a F71F      		adc r31,r23
 339:main.c        **** 		{
 552               		.loc 1 339 5 view .LVU199
 553 016c 3A32      		cpi r19,lo8(42)
 554 016e 01F4      		brne .L29
 339:main.c        **** 		{
 555               		.loc 1 339 49 discriminator 1 view .LVU200
 556 0170 30E0      		ldi r19,0
 339:main.c        **** 		{
 557               		.loc 1 339 22 discriminator 1 view .LVU201
 558 0172 2E17      		cp r18,r30
 559 0174 3F07      		cpc r19,r31
 560 0176 04F4      		brge .L29
 339:main.c        **** 		{
 561               		.loc 1 339 78 discriminator 2 view .LVU202
 562 0178 6A1B      		sub r22,r26
 563 017a 7B0B      		sbc r23,r27
 339:main.c        **** 		{
 564               		.loc 1 339 64 discriminator 2 view .LVU203
 565 017c 9617      		cp r25,r22
 566 017e 1706      		cpc __zero_reg__,r23
 567 0180 01F0      		breq .L29
 568 0182 04F0      		brlt .L29
 341:main.c        **** 			if((ball_pos_x+ball_radius)<(balk_end_left+5))
 569               		.loc 1 341 4 is_stmt 1 view .LVU204
 341:main.c        **** 			if((ball_pos_x+ball_radius)<(balk_end_left+5))
 570               		.loc 1 341 19 is_stmt 0 view .LVU205
 571 0184 C093 0000 		sts ball_vert_richt,r28
 342:main.c        **** 			{
 572               		.loc 1 342 4 is_stmt 1 view .LVU206
 342:main.c        **** 			{
 573               		.loc 1 342 31 is_stmt 0 view .LVU207
 574 0188 D901      		movw r26,r18
 575 018a 1496      		adiw r26,4
 342:main.c        **** 			{
 576               		.loc 1 342 6 view .LVU208
 577 018c AE17      		cp r26,r30
 578 018e BF07      		cpc r27,r31
 579 0190 04F4      		brge .+2
 580 0192 00C0      		rjmp .L30
 344:main.c        **** 				ball_horiz_richt=LEFT;
 581               		.loc 1 344 5 is_stmt 1 view .LVU209
 344:main.c        **** 				ball_horiz_richt=LEFT;
 582               		.loc 1 344 17 is_stmt 0 view .LVU210
 583 0194 1093 0000 		sts ball_speed_x,r17
 345:main.c        **** 			}else	if((ball_pos_x-ball_radius)>balk_end_left+10)
 584               		.loc 1 345 5 is_stmt 1 view .LVU211
 345:main.c        **** 			}else	if((ball_pos_x-ball_radius)>balk_end_left+10)
 585               		.loc 1 345 21 is_stmt 0 view .LVU212
 586 0198 1092 0000 		sts ball_horiz_richt,__zero_reg__
 587               	.L29:
 349:main.c        **** 						ball_horiz_richt=RIGHT;
 350:main.c        **** 					}else ball_speed_x=0;
 351:main.c        **** 			
 352:main.c        **** 			
 353:main.c        **** 		}
 354:main.c        **** 		
 355:main.c        **** 		if(ball_pos_x-ball_radius==0)ball_horiz_richt=RIGHT;
 588               		.loc 1 355 3 is_stmt 1 view .LVU213
 589               		.loc 1 355 5 is_stmt 0 view .LVU214
 590 019c 8413      		cpse r24,r20
 591 019e 00C0      		rjmp .L32
 592               		.loc 1 355 32 is_stmt 1 discriminator 1 view .LVU215
 593               		.loc 1 355 48 is_stmt 0 discriminator 1 view .LVU216
 594 01a0 C093 0000 		sts ball_horiz_richt,r28
 595               	.L32:
 356:main.c        **** 		if(ball_pos_x+ball_radius==84)ball_horiz_richt=LEFT;
 596               		.loc 1 356 3 is_stmt 1 view .LVU217
 597               		.loc 1 356 5 is_stmt 0 view .LVU218
 598 01a4 E435      		cpi r30,84
 599 01a6 F105      		cpc r31,__zero_reg__
 600 01a8 01F4      		brne .L33
 601               		.loc 1 356 33 is_stmt 1 discriminator 1 view .LVU219
 602               		.loc 1 356 49 is_stmt 0 discriminator 1 view .LVU220
 603 01aa 1092 0000 		sts ball_horiz_richt,__zero_reg__
 604               	.L33:
 357:main.c        **** 		
 358:main.c        **** 		/*
 359:main.c        **** 		sprintf(buffer, "b_pos_x=%d", ball_pos_y);
 360:main.c        **** 		glcd_draw_string_xy(10, 0, buffer);
 361:main.c        **** 		
 362:main.c        **** 		sprintf(buffer, "end_left=%.d", balk_end_left);
 363:main.c        **** 		glcd_draw_string_xy(20, 10, buffer);
 364:main.c        **** 		
 365:main.c        **** 		sprintf(buffer, "end_right%.d", balk_end_right);
 366:main.c        **** 		glcd_draw_string_xy(20, 20, buffer);
 367:main.c        **** 		*/
 368:main.c        **** 		
 369:main.c        **** 		
 370:main.c        **** 		if((ball_refresh==EIN)||(balk_refresh==EIN))//only draw if anything has changed
 605               		.loc 1 370 3 is_stmt 1 view .LVU221
 606               		.loc 1 370 19 is_stmt 0 view .LVU222
 607 01ae 9091 0000 		lds r25,ball_refresh
 608               		.loc 1 370 5 view .LVU223
 609 01b2 9130      		cpi r25,lo8(1)
 610 01b4 01F0      		breq .L34
 611               		.loc 1 370 40 discriminator 1 view .LVU224
 612 01b6 9091 0000 		lds r25,balk_refresh
 613               		.loc 1 370 25 discriminator 1 view .LVU225
 614 01ba 9130      		cpi r25,lo8(1)
 615 01bc 01F0      		breq .+2
 616 01be 00C0      		rjmp .L23
 617               	.L34:
 371:main.c        **** 		{
 372:main.c        **** 			if(ball_refresh==EIN)//only draw ball when position changed
 618               		.loc 1 372 4 is_stmt 1 view .LVU226
 619               		.loc 1 372 19 is_stmt 0 view .LVU227
 620 01c0 9091 0000 		lds r25,ball_refresh
 621               		.loc 1 372 6 view .LVU228
 622 01c4 9130      		cpi r25,lo8(1)
 623 01c6 01F4      		brne .L36
 373:main.c        **** 			{
 374:main.c        **** 				ball_refresh=AUS;
 624               		.loc 1 374 5 is_stmt 1 view .LVU229
 625               		.loc 1 374 17 is_stmt 0 view .LVU230
 626 01c8 1092 0000 		sts ball_refresh,__zero_reg__
 375:main.c        **** 				//delete old ball draw new one
 376:main.c        **** 				if(ball_vert_richt==DOWN)
 627               		.loc 1 376 5 is_stmt 1 view .LVU231
 628               		.loc 1 376 23 is_stmt 0 view .LVU232
 629 01cc 9091 0000 		lds r25,ball_vert_richt
 377:main.c        **** 				{
 378:main.c        **** 					glcd_draw_circle(ball_pos_x, ball_pos_y-1, ball_radius, WHITE);
 630               		.loc 1 378 6 view .LVU233
 631 01d0 6091 0000 		lds r22,ball_pos_y
 376:main.c        **** 				{
 632               		.loc 1 376 7 view .LVU234
 633 01d4 9111      		cpse r25,__zero_reg__
 634 01d6 00C0      		rjmp .L37
 635               		.loc 1 378 6 is_stmt 1 view .LVU235
 636 01d8 6150      		subi r22,lo8(-(-1))
 637 01da 20E0      		ldi r18,0
 638 01dc 0E94 0000 		call glcd_draw_circle
 639               	.LVL15:
 379:main.c        **** 					glcd_draw_circle(ball_pos_x, ball_pos_y, ball_radius, BLACK);
 640               		.loc 1 379 6 view .LVU236
 641 01e0 6091 0000 		lds r22,ball_pos_y
 642 01e4 21E0      		ldi r18,lo8(1)
 643 01e6 4091 0000 		lds r20,ball_radius
 644 01ea 8091 0000 		lds r24,ball_pos_x
 645               	.L51:
 380:main.c        **** 				}else glcd_draw_circle(ball_pos_x, ball_pos_y+1, ball_radius, WHITE);glcd_draw_circle(ball_pos_
 646               		.loc 1 380 11 is_stmt 0 view .LVU237
 647 01ee 0E94 0000 		call glcd_draw_circle
 648               	.LVL16:
 649               		.loc 1 380 74 is_stmt 1 view .LVU238
 650 01f2 6091 0000 		lds r22,ball_pos_y
 651 01f6 21E0      		ldi r18,lo8(1)
 652 01f8 4091 0000 		lds r20,ball_radius
 653 01fc 8091 0000 		lds r24,ball_pos_x
 654 0200 0E94 0000 		call glcd_draw_circle
 655               	.LVL17:
 656               	.L36:
 381:main.c        **** 			}
 382:main.c        **** 			
 383:main.c        **** 			if(balk_refresh==EIN)//only draw balk when position changed
 657               		.loc 1 383 4 view .LVU239
 658               		.loc 1 383 19 is_stmt 0 view .LVU240
 659 0204 8091 0000 		lds r24,balk_refresh
 660               		.loc 1 383 6 view .LVU241
 661 0208 8130      		cpi r24,lo8(1)
 662 020a 01F4      		brne .L39
 384:main.c        **** 			{
 385:main.c        **** 				balk_refresh=AUS;
 663               		.loc 1 385 5 is_stmt 1 view .LVU242
 664               		.loc 1 385 17 is_stmt 0 view .LVU243
 665 020c 1092 0000 		sts balk_refresh,__zero_reg__
 386:main.c        **** 				//delete old plank draw new one
 387:main.c        **** 				if(balk_horiz_richt==0)
 666               		.loc 1 387 5 is_stmt 1 view .LVU244
 667               		.loc 1 387 24 is_stmt 0 view .LVU245
 668 0210 8091 0000 		lds r24,balk_horiz_richt
 669 0214 6091 0000 		lds r22,balk_vert_pos
 670               		.loc 1 387 7 view .LVU246
 671 0218 8111      		cpse r24,__zero_reg__
 672 021a 00C0      		rjmp .L40
 388:main.c        **** 				{
 389:main.c        **** 					glcd_draw_rect(balken_pos_x-1, balk_vert_pos, 16, 2, WHITE);
 673               		.loc 1 389 6 is_stmt 1 view .LVU247
 674 021c 8091 0000 		lds r24,balken_pos_x
 675 0220 00E0      		ldi r16,0
 676 0222 22E0      		ldi r18,lo8(2)
 677 0224 40E1      		ldi r20,lo8(16)
 678 0226 8150      		subi r24,lo8(-(-1))
 679 0228 0E94 0000 		call glcd_draw_rect
 680               	.LVL18:
 390:main.c        **** 					glcd_draw_rect(balken_pos_x, balk_vert_pos, 16, 2, BLACK);
 681               		.loc 1 390 6 view .LVU248
 682 022c 8091 0000 		lds r24,balken_pos_x
 683 0230 01E0      		ldi r16,lo8(1)
 684 0232 22E0      		ldi r18,lo8(2)
 685 0234 40E1      		ldi r20,lo8(16)
 686 0236 6091 0000 		lds r22,balk_vert_pos
 687               	.L52:
 391:main.c        **** 				}else glcd_draw_rect(balken_pos_x+1, balk_vert_pos, 16, 2, WHITE);glcd_draw_rect(balken_pos_x, 
 688               		.loc 1 391 11 is_stmt 0 view .LVU249
 689 023a 0E94 0000 		call glcd_draw_rect
 690               	.LVL19:
 691               		.loc 1 391 71 is_stmt 1 view .LVU250
 692 023e 8091 0000 		lds r24,balken_pos_x
 693 0242 01E0      		ldi r16,lo8(1)
 694 0244 22E0      		ldi r18,lo8(2)
 695 0246 40E1      		ldi r20,lo8(16)
 696 0248 6091 0000 		lds r22,balk_vert_pos
 697 024c 0E94 0000 		call glcd_draw_rect
 698               	.LVL20:
 699               	.L39:
 392:main.c        **** 			}
 393:main.c        **** 			glcd_write();
 700               		.loc 1 393 4 view .LVU251
 701 0250 0E94 0000 		call glcd_write
 702               	.LVL21:
 703 0254 00C0      		rjmp .L23
 704               	.L30:
 346:main.c        **** 					{
 705               		.loc 1 346 10 view .LVU252
 346:main.c        **** 					{
 706               		.loc 1 346 51 is_stmt 0 view .LVU253
 707 0256 265F      		subi r18,-10
 708 0258 3F4F      		sbci r19,-1
 346:main.c        **** 					{
 709               		.loc 1 346 12 view .LVU254
 710 025a 2617      		cp r18,r22
 711 025c 3707      		cpc r19,r23
 712 025e 04F4      		brge .L31
 348:main.c        **** 						ball_horiz_richt=RIGHT;
 713               		.loc 1 348 7 is_stmt 1 view .LVU255
 348:main.c        **** 						ball_horiz_richt=RIGHT;
 714               		.loc 1 348 19 is_stmt 0 view .LVU256
 715 0260 1093 0000 		sts ball_speed_x,r17
 349:main.c        **** 					}else ball_speed_x=0;
 716               		.loc 1 349 7 is_stmt 1 view .LVU257
 349:main.c        **** 					}else ball_speed_x=0;
 717               		.loc 1 349 23 is_stmt 0 view .LVU258
 718 0264 C093 0000 		sts ball_horiz_richt,r28
 719 0268 00C0      		rjmp .L29
 720               	.L31:
 350:main.c        **** 			
 721               		.loc 1 350 12 is_stmt 1 view .LVU259
 350:main.c        **** 			
 722               		.loc 1 350 24 is_stmt 0 view .LVU260
 723 026a 1092 0000 		sts ball_speed_x,__zero_reg__
 724 026e 00C0      		rjmp .L29
 725               	.L37:
 380:main.c        **** 			}
 726               		.loc 1 380 11 is_stmt 1 view .LVU261
 727 0270 6F5F      		subi r22,lo8(-(1))
 728 0272 20E0      		ldi r18,0
 729 0274 00C0      		rjmp .L51
 730               	.L40:
 391:main.c        **** 			}
 731               		.loc 1 391 11 view .LVU262
 732 0276 8091 0000 		lds r24,balken_pos_x
 733 027a 00E0      		ldi r16,0
 734 027c 22E0      		ldi r18,lo8(2)
 735 027e 40E1      		ldi r20,lo8(16)
 736 0280 8F5F      		subi r24,lo8(-(1))
 737 0282 00C0      		rjmp .L52
 738               		.cfi_endproc
 739               	.LFE15:
 741               		.data
 744               	aktiv.2464:
 745 0000 01        		.byte	1
 746               	.global	batman
 747               		.section	.progmem.data,"a",@progbits
 750               	batman:
 751 0000 00        		.byte	0
 752 0001 00        		.byte	0
 753 0002 00        		.byte	0
 754 0003 00        		.byte	0
 755 0004 00        		.byte	0
 756 0005 00        		.byte	0
 757 0006 00        		.byte	0
 758 0007 00        		.byte	0
 759 0008 00        		.byte	0
 760 0009 00        		.byte	0
 761 000a F0        		.byte	-16
 762 000b 00        		.byte	0
 763 000c 00        		.byte	0
 764 000d 00        		.byte	0
 765 000e 00        		.byte	0
 766 000f 00        		.byte	0
 767 0010 00        		.byte	0
 768 0011 00        		.byte	0
 769 0012 F0        		.byte	-16
 770 0013 0C        		.byte	12
 771 0014 00        		.byte	0
 772 0015 00        		.byte	0
 773 0016 00        		.byte	0
 774 0017 80        		.byte	-128
 775 0018 C0        		.byte	-64
 776 0019 C0        		.byte	-64
 777 001a 20        		.byte	32
 778 001b 00        		.byte	0
 779 001c 00        		.byte	0
 780 001d 00        		.byte	0
 781 001e 00        		.byte	0
 782 001f 00        		.byte	0
 783 0020 00        		.byte	0
 784 0021 00        		.byte	0
 785 0022 00        		.byte	0
 786 0023 00        		.byte	0
 787 0024 00        		.byte	0
 788 0025 00        		.byte	0
 789 0026 00        		.byte	0
 790 0027 00        		.byte	0
 791 0028 00        		.byte	0
 792 0029 00        		.byte	0
 793 002a 00        		.byte	0
 794 002b 00        		.byte	0
 795 002c 00        		.byte	0
 796 002d 00        		.byte	0
 797 002e 00        		.byte	0
 798 002f 00        		.byte	0
 799 0030 00        		.byte	0
 800 0031 00        		.byte	0
 801 0032 00        		.byte	0
 802 0033 00        		.byte	0
 803 0034 00        		.byte	0
 804 0035 00        		.byte	0
 805 0036 00        		.byte	0
 806 0037 00        		.byte	0
 807 0038 00        		.byte	0
 808 0039 00        		.byte	0
 809 003a 00        		.byte	0
 810 003b 00        		.byte	0
 811 003c 00        		.byte	0
 812 003d 00        		.byte	0
 813 003e 00        		.byte	0
 814 003f 00        		.byte	0
 815 0040 00        		.byte	0
 816 0041 00        		.byte	0
 817 0042 00        		.byte	0
 818 0043 00        		.byte	0
 819 0044 00        		.byte	0
 820 0045 00        		.byte	0
 821 0046 00        		.byte	0
 822 0047 00        		.byte	0
 823 0048 00        		.byte	0
 824 0049 00        		.byte	0
 825 004a 00        		.byte	0
 826 004b 00        		.byte	0
 827 004c 00        		.byte	0
 828 004d 00        		.byte	0
 829 004e 00        		.byte	0
 830 004f 00        		.byte	0
 831 0050 00        		.byte	0
 832 0051 00        		.byte	0
 833 0052 00        		.byte	0
 834 0053 00        		.byte	0
 835 0054 00        		.byte	0
 836 0055 00        		.byte	0
 837 0056 00        		.byte	0
 838 0057 00        		.byte	0
 839 0058 00        		.byte	0
 840 0059 00        		.byte	0
 841 005a 00        		.byte	0
 842 005b 00        		.byte	0
 843 005c 80        		.byte	-128
 844 005d 80        		.byte	-128
 845 005e 03        		.byte	3
 846 005f 07        		.byte	7
 847 0060 0C        		.byte	12
 848 0061 98        		.byte	-104
 849 0062 70        		.byte	112
 850 0063 00        		.byte	0
 851 0064 00        		.byte	0
 852 0065 00        		.byte	0
 853 0066 01        		.byte	1
 854 0067 00        		.byte	0
 855 0068 00        		.byte	0
 856 0069 00        		.byte	0
 857 006a 00        		.byte	0
 858 006b 07        		.byte	7
 859 006c 8F        		.byte	-113
 860 006d 9D        		.byte	-99
 861 006e 18        		.byte	24
 862 006f 10        		.byte	16
 863 0070 30        		.byte	48
 864 0071 20        		.byte	32
 865 0072 20        		.byte	32
 866 0073 20        		.byte	32
 867 0074 20        		.byte	32
 868 0075 60        		.byte	96
 869 0076 60        		.byte	96
 870 0077 40        		.byte	64
 871 0078 C0        		.byte	-64
 872 0079 80        		.byte	-128
 873 007a 00        		.byte	0
 874 007b 00        		.byte	0
 875 007c 00        		.byte	0
 876 007d 00        		.byte	0
 877 007e 00        		.byte	0
 878 007f 00        		.byte	0
 879 0080 00        		.byte	0
 880 0081 00        		.byte	0
 881 0082 00        		.byte	0
 882 0083 00        		.byte	0
 883 0084 00        		.byte	0
 884 0085 00        		.byte	0
 885 0086 00        		.byte	0
 886 0087 00        		.byte	0
 887 0088 00        		.byte	0
 888 0089 00        		.byte	0
 889 008a 00        		.byte	0
 890 008b 00        		.byte	0
 891 008c 00        		.byte	0
 892 008d 00        		.byte	0
 893 008e 00        		.byte	0
 894 008f 00        		.byte	0
 895 0090 00        		.byte	0
 896 0091 00        		.byte	0
 897 0092 00        		.byte	0
 898 0093 00        		.byte	0
 899 0094 00        		.byte	0
 900 0095 00        		.byte	0
 901 0096 00        		.byte	0
 902 0097 00        		.byte	0
 903 0098 00        		.byte	0
 904 0099 00        		.byte	0
 905 009a 00        		.byte	0
 906 009b 00        		.byte	0
 907 009c 00        		.byte	0
 908 009d 00        		.byte	0
 909 009e 00        		.byte	0
 910 009f 00        		.byte	0
 911 00a0 00        		.byte	0
 912 00a1 00        		.byte	0
 913 00a2 00        		.byte	0
 914 00a3 00        		.byte	0
 915 00a4 00        		.byte	0
 916 00a5 00        		.byte	0
 917 00a6 00        		.byte	0
 918 00a7 00        		.byte	0
 919 00a8 00        		.byte	0
 920 00a9 00        		.byte	0
 921 00aa 00        		.byte	0
 922 00ab 00        		.byte	0
 923 00ac 00        		.byte	0
 924 00ad 18        		.byte	24
 925 00ae 1E        		.byte	30
 926 00af 11        		.byte	17
 927 00b0 01        		.byte	1
 928 00b1 01        		.byte	1
 929 00b2 01        		.byte	1
 930 00b3 81        		.byte	-127
 931 00b4 C1        		.byte	-63
 932 00b5 60        		.byte	96
 933 00b6 00        		.byte	0
 934 00b7 00        		.byte	0
 935 00b8 00        		.byte	0
 936 00b9 00        		.byte	0
 937 00ba 00        		.byte	0
 938 00bb 00        		.byte	0
 939 00bc 00        		.byte	0
 940 00bd 00        		.byte	0
 941 00be 00        		.byte	0
 942 00bf 00        		.byte	0
 943 00c0 03        		.byte	3
 944 00c1 03        		.byte	3
 945 00c2 00        		.byte	0
 946 00c3 00        		.byte	0
 947 00c4 00        		.byte	0
 948 00c5 80        		.byte	-128
 949 00c6 80        		.byte	-128
 950 00c7 C0        		.byte	-64
 951 00c8 C0        		.byte	-64
 952 00c9 C0        		.byte	-64
 953 00ca C0        		.byte	-64
 954 00cb E0        		.byte	-32
 955 00cc 70        		.byte	112
 956 00cd 3F        		.byte	63
 957 00ce 1F        		.byte	31
 958 00cf 00        		.byte	0
 959 00d0 00        		.byte	0
 960 00d1 00        		.byte	0
 961 00d2 00        		.byte	0
 962 00d3 00        		.byte	0
 963 00d4 00        		.byte	0
 964 00d5 00        		.byte	0
 965 00d6 00        		.byte	0
 966 00d7 00        		.byte	0
 967 00d8 00        		.byte	0
 968 00d9 00        		.byte	0
 969 00da 00        		.byte	0
 970 00db 00        		.byte	0
 971 00dc 00        		.byte	0
 972 00dd 00        		.byte	0
 973 00de 00        		.byte	0
 974 00df 00        		.byte	0
 975 00e0 00        		.byte	0
 976 00e1 00        		.byte	0
 977 00e2 00        		.byte	0
 978 00e3 00        		.byte	0
 979 00e4 00        		.byte	0
 980 00e5 00        		.byte	0
 981 00e6 00        		.byte	0
 982 00e7 00        		.byte	0
 983 00e8 00        		.byte	0
 984 00e9 00        		.byte	0
 985 00ea 00        		.byte	0
 986 00eb 00        		.byte	0
 987 00ec 00        		.byte	0
 988 00ed 00        		.byte	0
 989 00ee 00        		.byte	0
 990 00ef 00        		.byte	0
 991 00f0 00        		.byte	0
 992 00f1 00        		.byte	0
 993 00f2 00        		.byte	0
 994 00f3 00        		.byte	0
 995 00f4 00        		.byte	0
 996 00f5 00        		.byte	0
 997 00f6 00        		.byte	0
 998 00f7 00        		.byte	0
 999 00f8 00        		.byte	0
 1000 00f9 00        		.byte	0
 1001 00fa 00        		.byte	0
 1002 00fb 00        		.byte	0
 1003 00fc 00        		.byte	0
 1004 00fd 00        		.byte	0
 1005 00fe 00        		.byte	0
 1006 00ff 00        		.byte	0
 1007 0100 00        		.byte	0
 1008 0101 00        		.byte	0
 1009 0102 00        		.byte	0
 1010 0103 00        		.byte	0
 1011 0104 00        		.byte	0
 1012 0105 06        		.byte	6
 1013 0106 07        		.byte	7
 1014 0107 01        		.byte	1
 1015 0108 01        		.byte	1
 1016 0109 00        		.byte	0
 1017 010a 08        		.byte	8
 1018 010b 08        		.byte	8
 1019 010c 0C        		.byte	12
 1020 010d 0C        		.byte	12
 1021 010e 0C        		.byte	12
 1022 010f 0C        		.byte	12
 1023 0110 0C        		.byte	12
 1024 0111 0C        		.byte	12
 1025 0112 1C        		.byte	28
 1026 0113 F8        		.byte	-8
 1027 0114 F0        		.byte	-16
 1028 0115 00        		.byte	0
 1029 0116 00        		.byte	0
 1030 0117 1E        		.byte	30
 1031 0118 FF        		.byte	-1
 1032 0119 DF        		.byte	-33
 1033 011a 07        		.byte	7
 1034 011b 03        		.byte	3
 1035 011c 01        		.byte	1
 1036 011d 01        		.byte	1
 1037 011e 00        		.byte	0
 1038 011f 00        		.byte	0
 1039 0120 00        		.byte	0
 1040 0121 00        		.byte	0
 1041 0122 00        		.byte	0
 1042 0123 00        		.byte	0
 1043 0124 00        		.byte	0
 1044 0125 00        		.byte	0
 1045 0126 00        		.byte	0
 1046 0127 00        		.byte	0
 1047 0128 00        		.byte	0
 1048 0129 00        		.byte	0
 1049 012a 00        		.byte	0
 1050 012b 00        		.byte	0
 1051 012c 00        		.byte	0
 1052 012d 00        		.byte	0
 1053 012e 00        		.byte	0
 1054 012f 00        		.byte	0
 1055 0130 00        		.byte	0
 1056 0131 00        		.byte	0
 1057 0132 00        		.byte	0
 1058 0133 00        		.byte	0
 1059 0134 00        		.byte	0
 1060 0135 00        		.byte	0
 1061 0136 00        		.byte	0
 1062 0137 00        		.byte	0
 1063 0138 00        		.byte	0
 1064 0139 00        		.byte	0
 1065 013a 00        		.byte	0
 1066 013b 00        		.byte	0
 1067 013c 00        		.byte	0
 1068 013d 00        		.byte	0
 1069 013e 00        		.byte	0
 1070 013f 00        		.byte	0
 1071 0140 00        		.byte	0
 1072 0141 00        		.byte	0
 1073 0142 00        		.byte	0
 1074 0143 00        		.byte	0
 1075 0144 00        		.byte	0
 1076 0145 00        		.byte	0
 1077 0146 00        		.byte	0
 1078 0147 00        		.byte	0
 1079 0148 00        		.byte	0
 1080 0149 00        		.byte	0
 1081 014a 00        		.byte	0
 1082 014b 00        		.byte	0
 1083 014c 00        		.byte	0
 1084 014d 00        		.byte	0
 1085 014e 00        		.byte	0
 1086 014f 00        		.byte	0
 1087 0150 00        		.byte	0
 1088 0151 00        		.byte	0
 1089 0152 00        		.byte	0
 1090 0153 00        		.byte	0
 1091 0154 00        		.byte	0
 1092 0155 00        		.byte	0
 1093 0156 00        		.byte	0
 1094 0157 00        		.byte	0
 1095 0158 00        		.byte	0
 1096 0159 80        		.byte	-128
 1097 015a E0        		.byte	-32
 1098 015b 30        		.byte	48
 1099 015c 18        		.byte	24
 1100 015d 00        		.byte	0
 1101 015e 08        		.byte	8
 1102 015f 08        		.byte	8
 1103 0160 10        		.byte	16
 1104 0161 20        		.byte	32
 1105 0162 20        		.byte	32
 1106 0163 A0        		.byte	-96
 1107 0164 E0        		.byte	-32
 1108 0165 F0        		.byte	-16
 1109 0166 7E        		.byte	126
 1110 0167 E3        		.byte	-29
 1111 0168 E0        		.byte	-32
 1112 0169 F8        		.byte	-8
 1113 016a C0        		.byte	-64
 1114 016b 44        		.byte	68
 1115 016c 18        		.byte	24
 1116 016d A1        		.byte	-95
 1117 016e FF        		.byte	-1
 1118 016f 1E        		.byte	30
 1119 0170 00        		.byte	0
 1120 0171 00        		.byte	0
 1121 0172 00        		.byte	0
 1122 0173 00        		.byte	0
 1123 0174 00        		.byte	0
 1124 0175 00        		.byte	0
 1125 0176 00        		.byte	0
 1126 0177 00        		.byte	0
 1127 0178 00        		.byte	0
 1128 0179 00        		.byte	0
 1129 017a 00        		.byte	0
 1130 017b 00        		.byte	0
 1131 017c 00        		.byte	0
 1132 017d 00        		.byte	0
 1133 017e 00        		.byte	0
 1134 017f 00        		.byte	0
 1135 0180 00        		.byte	0
 1136 0181 00        		.byte	0
 1137 0182 00        		.byte	0
 1138 0183 00        		.byte	0
 1139 0184 00        		.byte	0
 1140 0185 00        		.byte	0
 1141 0186 00        		.byte	0
 1142 0187 00        		.byte	0
 1143 0188 00        		.byte	0
 1144 0189 00        		.byte	0
 1145 018a 00        		.byte	0
 1146 018b 00        		.byte	0
 1147 018c 00        		.byte	0
 1148 018d 00        		.byte	0
 1149 018e 00        		.byte	0
 1150 018f 00        		.byte	0
 1151 0190 00        		.byte	0
 1152 0191 00        		.byte	0
 1153 0192 00        		.byte	0
 1154 0193 00        		.byte	0
 1155 0194 00        		.byte	0
 1156 0195 00        		.byte	0
 1157 0196 00        		.byte	0
 1158 0197 00        		.byte	0
 1159 0198 00        		.byte	0
 1160 0199 00        		.byte	0
 1161 019a 00        		.byte	0
 1162 019b 00        		.byte	0
 1163 019c 00        		.byte	0
 1164 019d 00        		.byte	0
 1165 019e 00        		.byte	0
 1166 019f 00        		.byte	0
 1167 01a0 00        		.byte	0
 1168 01a1 00        		.byte	0
 1169 01a2 00        		.byte	0
 1170 01a3 00        		.byte	0
 1171 01a4 00        		.byte	0
 1172 01a5 00        		.byte	0
 1173 01a6 00        		.byte	0
 1174 01a7 00        		.byte	0
 1175 01a8 00        		.byte	0
 1176 01a9 00        		.byte	0
 1177 01aa 00        		.byte	0
 1178 01ab 00        		.byte	0
 1179 01ac 00        		.byte	0
 1180 01ad 07        		.byte	7
 1181 01ae 0E        		.byte	14
 1182 01af 0C        		.byte	12
 1183 01b0 0C        		.byte	12
 1184 01b1 0C        		.byte	12
 1185 01b2 06        		.byte	6
 1186 01b3 06        		.byte	6
 1187 01b4 03        		.byte	3
 1188 01b5 13        		.byte	19
 1189 01b6 3B        		.byte	59
 1190 01b7 39        		.byte	57
 1191 01b8 29        		.byte	41
 1192 01b9 68        		.byte	104
 1193 01ba 68        		.byte	104
 1194 01bb 6F        		.byte	111
 1195 01bc 6D        		.byte	109
 1196 01bd 60        		.byte	96
 1197 01be 67        		.byte	103
 1198 01bf 67        		.byte	103
 1199 01c0 67        		.byte	103
 1200 01c1 67        		.byte	103
 1201 01c2 67        		.byte	103
 1202 01c3 65        		.byte	101
 1203 01c4 35        		.byte	53
 1204 01c5 39        		.byte	57
 1205 01c6 39        		.byte	57
 1206 01c7 13        		.byte	19
 1207 01c8 06        		.byte	6
 1208 01c9 00        		.byte	0
 1209 01ca 00        		.byte	0
 1210 01cb 00        		.byte	0
 1211 01cc 00        		.byte	0
 1212 01cd 00        		.byte	0
 1213 01ce 00        		.byte	0
 1214 01cf 00        		.byte	0
 1215 01d0 00        		.byte	0
 1216 01d1 00        		.byte	0
 1217 01d2 00        		.byte	0
 1218 01d3 00        		.byte	0
 1219 01d4 00        		.byte	0
 1220 01d5 00        		.byte	0
 1221 01d6 00        		.byte	0
 1222 01d7 00        		.byte	0
 1223 01d8 00        		.byte	0
 1224 01d9 00        		.byte	0
 1225 01da 00        		.byte	0
 1226 01db 00        		.byte	0
 1227 01dc 00        		.byte	0
 1228 01dd 00        		.byte	0
 1229 01de 00        		.byte	0
 1230 01df 00        		.byte	0
 1231 01e0 00        		.byte	0
 1232 01e1 00        		.byte	0
 1233 01e2 00        		.byte	0
 1234 01e3 00        		.byte	0
 1235 01e4 00        		.byte	0
 1236 01e5 00        		.byte	0
 1237 01e6 00        		.byte	0
 1238 01e7 00        		.byte	0
 1239 01e8 00        		.byte	0
 1240 01e9 00        		.byte	0
 1241 01ea 00        		.byte	0
 1242 01eb 00        		.byte	0
 1243 01ec 00        		.byte	0
 1244 01ed 00        		.byte	0
 1245 01ee 00        		.byte	0
 1246 01ef 00        		.byte	0
 1247 01f0 00        		.byte	0
 1248 01f1 00        		.byte	0
 1249 01f2 00        		.byte	0
 1250 01f3 00        		.byte	0
 1251 01f4 00        		.byte	0
 1252 01f5 00        		.byte	0
 1253 01f6 00        		.byte	0
 1254 01f7 00        		.byte	0
 1255               		.comm	ball_radius,1,1
 1256               		.comm	ball_pos_x,1,1
 1257               		.comm	balk_lenght,1,1
 1258               		.comm	balk_end_right,1,1
 1259               		.comm	balk_end_left,1,1
 1260               		.comm	balk_vert_pos,1,1
 1261               		.comm	ball_speed_x_counter,1,1
 1262               		.comm	ball_speed_y_counter,1,1
 1263               		.comm	ball_speed_x,1,1
 1264               		.comm	ball_speed_y,1,1
 1265               		.comm	balk_refresh,1,1
 1266               		.comm	ball_refresh,1,1
 1267               		.comm	balk_horiz_richt,1,1
 1268               		.comm	ball_horiz_richt,1,1
 1269               		.comm	ball_vert_richt,1,1
 1270               		.comm	balken_pos_x,1,1
 1271               		.comm	ball_pos_y,1,1
 1272               		.comm	state,1,1
 1273               		.comm	entprell,1,1
 1274               		.comm	min,1,1
 1275               		.comm	sec,1,1
 1276               		.comm	ms100,1,1
 1277               		.comm	ms10,1,1
 1278               		.comm	ms,1,1
 1279               	.global	buffer
 1280               		.section .bss
 1283               	buffer:
 1284 0000 0000 0000 		.zero	20
 1284      0000 0000 
 1284      0000 0000 
 1284      0000 0000 
 1284      0000 0000 
 1285               		.section	.progmem.data,"a",@progbits
 1288               	Font5x7:
 1289 01f8 00        		.byte	0
 1290 01f9 00        		.byte	0
 1291 01fa 00        		.byte	0
 1292 01fb 00        		.byte	0
 1293 01fc 00        		.byte	0
 1294 01fd 00        		.byte	0
 1295 01fe 00        		.byte	0
 1296 01ff 5F        		.byte	95
 1297 0200 00        		.byte	0
 1298 0201 00        		.byte	0
 1299 0202 00        		.byte	0
 1300 0203 07        		.byte	7
 1301 0204 00        		.byte	0
 1302 0205 07        		.byte	7
 1303 0206 00        		.byte	0
 1304 0207 14        		.byte	20
 1305 0208 7F        		.byte	127
 1306 0209 14        		.byte	20
 1307 020a 7F        		.byte	127
 1308 020b 14        		.byte	20
 1309 020c 24        		.byte	36
 1310 020d 2A        		.byte	42
 1311 020e 7F        		.byte	127
 1312 020f 2A        		.byte	42
 1313 0210 12        		.byte	18
 1314 0211 23        		.byte	35
 1315 0212 13        		.byte	19
 1316 0213 08        		.byte	8
 1317 0214 64        		.byte	100
 1318 0215 62        		.byte	98
 1319 0216 36        		.byte	54
 1320 0217 49        		.byte	73
 1321 0218 55        		.byte	85
 1322 0219 22        		.byte	34
 1323 021a 50        		.byte	80
 1324 021b 00        		.byte	0
 1325 021c 05        		.byte	5
 1326 021d 03        		.byte	3
 1327 021e 00        		.byte	0
 1328 021f 00        		.byte	0
 1329 0220 00        		.byte	0
 1330 0221 1C        		.byte	28
 1331 0222 22        		.byte	34
 1332 0223 41        		.byte	65
 1333 0224 00        		.byte	0
 1334 0225 00        		.byte	0
 1335 0226 41        		.byte	65
 1336 0227 22        		.byte	34
 1337 0228 1C        		.byte	28
 1338 0229 00        		.byte	0
 1339 022a 08        		.byte	8
 1340 022b 2A        		.byte	42
 1341 022c 1C        		.byte	28
 1342 022d 2A        		.byte	42
 1343 022e 08        		.byte	8
 1344 022f 08        		.byte	8
 1345 0230 08        		.byte	8
 1346 0231 3E        		.byte	62
 1347 0232 08        		.byte	8
 1348 0233 08        		.byte	8
 1349 0234 00        		.byte	0
 1350 0235 50        		.byte	80
 1351 0236 30        		.byte	48
 1352 0237 00        		.byte	0
 1353 0238 00        		.byte	0
 1354 0239 08        		.byte	8
 1355 023a 08        		.byte	8
 1356 023b 08        		.byte	8
 1357 023c 08        		.byte	8
 1358 023d 08        		.byte	8
 1359 023e 00        		.byte	0
 1360 023f 60        		.byte	96
 1361 0240 60        		.byte	96
 1362 0241 00        		.byte	0
 1363 0242 00        		.byte	0
 1364 0243 20        		.byte	32
 1365 0244 10        		.byte	16
 1366 0245 08        		.byte	8
 1367 0246 04        		.byte	4
 1368 0247 02        		.byte	2
 1369 0248 3E        		.byte	62
 1370 0249 51        		.byte	81
 1371 024a 49        		.byte	73
 1372 024b 45        		.byte	69
 1373 024c 3E        		.byte	62
 1374 024d 00        		.byte	0
 1375 024e 42        		.byte	66
 1376 024f 7F        		.byte	127
 1377 0250 40        		.byte	64
 1378 0251 00        		.byte	0
 1379 0252 42        		.byte	66
 1380 0253 61        		.byte	97
 1381 0254 51        		.byte	81
 1382 0255 49        		.byte	73
 1383 0256 46        		.byte	70
 1384 0257 21        		.byte	33
 1385 0258 41        		.byte	65
 1386 0259 45        		.byte	69
 1387 025a 4B        		.byte	75
 1388 025b 31        		.byte	49
 1389 025c 18        		.byte	24
 1390 025d 14        		.byte	20
 1391 025e 12        		.byte	18
 1392 025f 7F        		.byte	127
 1393 0260 10        		.byte	16
 1394 0261 27        		.byte	39
 1395 0262 45        		.byte	69
 1396 0263 45        		.byte	69
 1397 0264 45        		.byte	69
 1398 0265 39        		.byte	57
 1399 0266 3C        		.byte	60
 1400 0267 4A        		.byte	74
 1401 0268 49        		.byte	73
 1402 0269 49        		.byte	73
 1403 026a 30        		.byte	48
 1404 026b 01        		.byte	1
 1405 026c 71        		.byte	113
 1406 026d 09        		.byte	9
 1407 026e 05        		.byte	5
 1408 026f 03        		.byte	3
 1409 0270 36        		.byte	54
 1410 0271 49        		.byte	73
 1411 0272 49        		.byte	73
 1412 0273 49        		.byte	73
 1413 0274 36        		.byte	54
 1414 0275 06        		.byte	6
 1415 0276 49        		.byte	73
 1416 0277 49        		.byte	73
 1417 0278 29        		.byte	41
 1418 0279 1E        		.byte	30
 1419 027a 00        		.byte	0
 1420 027b 36        		.byte	54
 1421 027c 36        		.byte	54
 1422 027d 00        		.byte	0
 1423 027e 00        		.byte	0
 1424 027f 00        		.byte	0
 1425 0280 56        		.byte	86
 1426 0281 36        		.byte	54
 1427 0282 00        		.byte	0
 1428 0283 00        		.byte	0
 1429 0284 00        		.byte	0
 1430 0285 08        		.byte	8
 1431 0286 14        		.byte	20
 1432 0287 22        		.byte	34
 1433 0288 41        		.byte	65
 1434 0289 14        		.byte	20
 1435 028a 14        		.byte	20
 1436 028b 14        		.byte	20
 1437 028c 14        		.byte	20
 1438 028d 14        		.byte	20
 1439 028e 41        		.byte	65
 1440 028f 22        		.byte	34
 1441 0290 14        		.byte	20
 1442 0291 08        		.byte	8
 1443 0292 00        		.byte	0
 1444 0293 02        		.byte	2
 1445 0294 01        		.byte	1
 1446 0295 51        		.byte	81
 1447 0296 09        		.byte	9
 1448 0297 06        		.byte	6
 1449 0298 32        		.byte	50
 1450 0299 49        		.byte	73
 1451 029a 79        		.byte	121
 1452 029b 41        		.byte	65
 1453 029c 3E        		.byte	62
 1454 029d 7E        		.byte	126
 1455 029e 11        		.byte	17
 1456 029f 11        		.byte	17
 1457 02a0 11        		.byte	17
 1458 02a1 7E        		.byte	126
 1459 02a2 7F        		.byte	127
 1460 02a3 49        		.byte	73
 1461 02a4 49        		.byte	73
 1462 02a5 49        		.byte	73
 1463 02a6 36        		.byte	54
 1464 02a7 3E        		.byte	62
 1465 02a8 41        		.byte	65
 1466 02a9 41        		.byte	65
 1467 02aa 41        		.byte	65
 1468 02ab 22        		.byte	34
 1469 02ac 7F        		.byte	127
 1470 02ad 41        		.byte	65
 1471 02ae 41        		.byte	65
 1472 02af 22        		.byte	34
 1473 02b0 1C        		.byte	28
 1474 02b1 7F        		.byte	127
 1475 02b2 49        		.byte	73
 1476 02b3 49        		.byte	73
 1477 02b4 49        		.byte	73
 1478 02b5 41        		.byte	65
 1479 02b6 7F        		.byte	127
 1480 02b7 09        		.byte	9
 1481 02b8 09        		.byte	9
 1482 02b9 01        		.byte	1
 1483 02ba 01        		.byte	1
 1484 02bb 3E        		.byte	62
 1485 02bc 41        		.byte	65
 1486 02bd 41        		.byte	65
 1487 02be 51        		.byte	81
 1488 02bf 32        		.byte	50
 1489 02c0 7F        		.byte	127
 1490 02c1 08        		.byte	8
 1491 02c2 08        		.byte	8
 1492 02c3 08        		.byte	8
 1493 02c4 7F        		.byte	127
 1494 02c5 00        		.byte	0
 1495 02c6 41        		.byte	65
 1496 02c7 7F        		.byte	127
 1497 02c8 41        		.byte	65
 1498 02c9 00        		.byte	0
 1499 02ca 20        		.byte	32
 1500 02cb 40        		.byte	64
 1501 02cc 41        		.byte	65
 1502 02cd 3F        		.byte	63
 1503 02ce 01        		.byte	1
 1504 02cf 7F        		.byte	127
 1505 02d0 08        		.byte	8
 1506 02d1 14        		.byte	20
 1507 02d2 22        		.byte	34
 1508 02d3 41        		.byte	65
 1509 02d4 7F        		.byte	127
 1510 02d5 40        		.byte	64
 1511 02d6 40        		.byte	64
 1512 02d7 40        		.byte	64
 1513 02d8 40        		.byte	64
 1514 02d9 7F        		.byte	127
 1515 02da 02        		.byte	2
 1516 02db 04        		.byte	4
 1517 02dc 02        		.byte	2
 1518 02dd 7F        		.byte	127
 1519 02de 7F        		.byte	127
 1520 02df 04        		.byte	4
 1521 02e0 08        		.byte	8
 1522 02e1 10        		.byte	16
 1523 02e2 7F        		.byte	127
 1524 02e3 3E        		.byte	62
 1525 02e4 41        		.byte	65
 1526 02e5 41        		.byte	65
 1527 02e6 41        		.byte	65
 1528 02e7 3E        		.byte	62
 1529 02e8 7F        		.byte	127
 1530 02e9 09        		.byte	9
 1531 02ea 09        		.byte	9
 1532 02eb 09        		.byte	9
 1533 02ec 06        		.byte	6
 1534 02ed 3E        		.byte	62
 1535 02ee 41        		.byte	65
 1536 02ef 51        		.byte	81
 1537 02f0 21        		.byte	33
 1538 02f1 5E        		.byte	94
 1539 02f2 7F        		.byte	127
 1540 02f3 09        		.byte	9
 1541 02f4 19        		.byte	25
 1542 02f5 29        		.byte	41
 1543 02f6 46        		.byte	70
 1544 02f7 46        		.byte	70
 1545 02f8 49        		.byte	73
 1546 02f9 49        		.byte	73
 1547 02fa 49        		.byte	73
 1548 02fb 31        		.byte	49
 1549 02fc 01        		.byte	1
 1550 02fd 01        		.byte	1
 1551 02fe 7F        		.byte	127
 1552 02ff 01        		.byte	1
 1553 0300 01        		.byte	1
 1554 0301 3F        		.byte	63
 1555 0302 40        		.byte	64
 1556 0303 40        		.byte	64
 1557 0304 40        		.byte	64
 1558 0305 3F        		.byte	63
 1559 0306 1F        		.byte	31
 1560 0307 20        		.byte	32
 1561 0308 40        		.byte	64
 1562 0309 20        		.byte	32
 1563 030a 1F        		.byte	31
 1564 030b 7F        		.byte	127
 1565 030c 20        		.byte	32
 1566 030d 18        		.byte	24
 1567 030e 20        		.byte	32
 1568 030f 7F        		.byte	127
 1569 0310 63        		.byte	99
 1570 0311 14        		.byte	20
 1571 0312 08        		.byte	8
 1572 0313 14        		.byte	20
 1573 0314 63        		.byte	99
 1574 0315 03        		.byte	3
 1575 0316 04        		.byte	4
 1576 0317 78        		.byte	120
 1577 0318 04        		.byte	4
 1578 0319 03        		.byte	3
 1579 031a 61        		.byte	97
 1580 031b 51        		.byte	81
 1581 031c 49        		.byte	73
 1582 031d 45        		.byte	69
 1583 031e 43        		.byte	67
 1584 031f 00        		.byte	0
 1585 0320 00        		.byte	0
 1586 0321 7F        		.byte	127
 1587 0322 41        		.byte	65
 1588 0323 41        		.byte	65
 1589 0324 02        		.byte	2
 1590 0325 04        		.byte	4
 1591 0326 08        		.byte	8
 1592 0327 10        		.byte	16
 1593 0328 20        		.byte	32
 1594 0329 41        		.byte	65
 1595 032a 41        		.byte	65
 1596 032b 7F        		.byte	127
 1597 032c 00        		.byte	0
 1598 032d 00        		.byte	0
 1599 032e 04        		.byte	4
 1600 032f 02        		.byte	2
 1601 0330 01        		.byte	1
 1602 0331 02        		.byte	2
 1603 0332 04        		.byte	4
 1604 0333 40        		.byte	64
 1605 0334 40        		.byte	64
 1606 0335 40        		.byte	64
 1607 0336 40        		.byte	64
 1608 0337 40        		.byte	64
 1609 0338 00        		.byte	0
 1610 0339 01        		.byte	1
 1611 033a 02        		.byte	2
 1612 033b 04        		.byte	4
 1613 033c 00        		.byte	0
 1614 033d 20        		.byte	32
 1615 033e 54        		.byte	84
 1616 033f 54        		.byte	84
 1617 0340 54        		.byte	84
 1618 0341 78        		.byte	120
 1619 0342 7F        		.byte	127
 1620 0343 48        		.byte	72
 1621 0344 44        		.byte	68
 1622 0345 44        		.byte	68
 1623 0346 38        		.byte	56
 1624 0347 38        		.byte	56
 1625 0348 44        		.byte	68
 1626 0349 44        		.byte	68
 1627 034a 44        		.byte	68
 1628 034b 20        		.byte	32
 1629 034c 38        		.byte	56
 1630 034d 44        		.byte	68
 1631 034e 44        		.byte	68
 1632 034f 48        		.byte	72
 1633 0350 7F        		.byte	127
 1634 0351 38        		.byte	56
 1635 0352 54        		.byte	84
 1636 0353 54        		.byte	84
 1637 0354 54        		.byte	84
 1638 0355 18        		.byte	24
 1639 0356 08        		.byte	8
 1640 0357 7E        		.byte	126
 1641 0358 09        		.byte	9
 1642 0359 01        		.byte	1
 1643 035a 02        		.byte	2
 1644 035b 08        		.byte	8
 1645 035c 14        		.byte	20
 1646 035d 54        		.byte	84
 1647 035e 54        		.byte	84
 1648 035f 3C        		.byte	60
 1649 0360 7F        		.byte	127
 1650 0361 08        		.byte	8
 1651 0362 04        		.byte	4
 1652 0363 04        		.byte	4
 1653 0364 78        		.byte	120
 1654 0365 00        		.byte	0
 1655 0366 44        		.byte	68
 1656 0367 7D        		.byte	125
 1657 0368 40        		.byte	64
 1658 0369 00        		.byte	0
 1659 036a 20        		.byte	32
 1660 036b 40        		.byte	64
 1661 036c 44        		.byte	68
 1662 036d 3D        		.byte	61
 1663 036e 00        		.byte	0
 1664 036f 00        		.byte	0
 1665 0370 7F        		.byte	127
 1666 0371 10        		.byte	16
 1667 0372 28        		.byte	40
 1668 0373 44        		.byte	68
 1669 0374 00        		.byte	0
 1670 0375 41        		.byte	65
 1671 0376 7F        		.byte	127
 1672 0377 40        		.byte	64
 1673 0378 00        		.byte	0
 1674 0379 7C        		.byte	124
 1675 037a 04        		.byte	4
 1676 037b 18        		.byte	24
 1677 037c 04        		.byte	4
 1678 037d 78        		.byte	120
 1679 037e 7C        		.byte	124
 1680 037f 08        		.byte	8
 1681 0380 04        		.byte	4
 1682 0381 04        		.byte	4
 1683 0382 78        		.byte	120
 1684 0383 38        		.byte	56
 1685 0384 44        		.byte	68
 1686 0385 44        		.byte	68
 1687 0386 44        		.byte	68
 1688 0387 38        		.byte	56
 1689 0388 7C        		.byte	124
 1690 0389 14        		.byte	20
 1691 038a 14        		.byte	20
 1692 038b 14        		.byte	20
 1693 038c 08        		.byte	8
 1694 038d 08        		.byte	8
 1695 038e 14        		.byte	20
 1696 038f 14        		.byte	20
 1697 0390 18        		.byte	24
 1698 0391 7C        		.byte	124
 1699 0392 7C        		.byte	124
 1700 0393 08        		.byte	8
 1701 0394 04        		.byte	4
 1702 0395 04        		.byte	4
 1703 0396 08        		.byte	8
 1704 0397 48        		.byte	72
 1705 0398 54        		.byte	84
 1706 0399 54        		.byte	84
 1707 039a 54        		.byte	84
 1708 039b 20        		.byte	32
 1709 039c 04        		.byte	4
 1710 039d 3F        		.byte	63
 1711 039e 44        		.byte	68
 1712 039f 40        		.byte	64
 1713 03a0 20        		.byte	32
 1714 03a1 3C        		.byte	60
 1715 03a2 40        		.byte	64
 1716 03a3 40        		.byte	64
 1717 03a4 20        		.byte	32
 1718 03a5 7C        		.byte	124
 1719 03a6 1C        		.byte	28
 1720 03a7 20        		.byte	32
 1721 03a8 40        		.byte	64
 1722 03a9 20        		.byte	32
 1723 03aa 1C        		.byte	28
 1724 03ab 3C        		.byte	60
 1725 03ac 40        		.byte	64
 1726 03ad 30        		.byte	48
 1727 03ae 40        		.byte	64
 1728 03af 3C        		.byte	60
 1729 03b0 44        		.byte	68
 1730 03b1 28        		.byte	40
 1731 03b2 10        		.byte	16
 1732 03b3 28        		.byte	40
 1733 03b4 44        		.byte	68
 1734 03b5 0C        		.byte	12
 1735 03b6 50        		.byte	80
 1736 03b7 50        		.byte	80
 1737 03b8 50        		.byte	80
 1738 03b9 3C        		.byte	60
 1739 03ba 44        		.byte	68
 1740 03bb 64        		.byte	100
 1741 03bc 54        		.byte	84
 1742 03bd 4C        		.byte	76
 1743 03be 44        		.byte	68
 1744 03bf 00        		.byte	0
 1745 03c0 08        		.byte	8
 1746 03c1 36        		.byte	54
 1747 03c2 41        		.byte	65
 1748 03c3 00        		.byte	0
 1749 03c4 00        		.byte	0
 1750 03c5 00        		.byte	0
 1751 03c6 7F        		.byte	127
 1752 03c7 00        		.byte	0
 1753 03c8 00        		.byte	0
 1754 03c9 00        		.byte	0
 1755 03ca 41        		.byte	65
 1756 03cb 36        		.byte	54
 1757 03cc 08        		.byte	8
 1758 03cd 00        		.byte	0
 1759 03ce 08        		.byte	8
 1760 03cf 08        		.byte	8
 1761 03d0 2A        		.byte	42
 1762 03d1 1C        		.byte	28
 1763 03d2 08        		.byte	8
 1764 03d3 08        		.byte	8
 1765 03d4 1C        		.byte	28
 1766 03d5 2A        		.byte	42
 1767 03d6 08        		.byte	8
 1768 03d7 08        		.byte	8
 1769               		.text
 1770               	.Letext0:
 1771               		.file 2 "/usr/avr/include/stdint.h"
 1772               		.file 3 "/usr/lib/gcc/avr/8.2.0/include/stddef.h"
 1773               		.file 4 "glcd/glcd.h"
 1774               		.file 5 "glcd/unit_tests.h"
 1775               		.file 6 "/usr/avr/include/stdio.h"
 1776               		.file 7 "/usr/avr/include/stdlib.h"
 1777               		.file 8 "glcd/fonts/Liberation_Sans15x21_Numbers.h"
 1778               		.file 9 "glcd/fonts/font5x7.h"
 1779               		.file 10 "glcd/glcd_devices.h"
 1780               		.file 11 "glcd/glcd_controllers.h"
 1781               		.file 12 "glcd/glcd_text_tiny.h"
 1782               		.file 13 "glcd/glcd_graphics.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccLshrB6.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccLshrB6.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccLshrB6.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccLshrB6.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccLshrB6.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccLshrB6.s:12     .text:0000000000000000 __vector_11
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001
                            *COM*:0000000000000001 ms10
                            *COM*:0000000000000001 entprell
                            *COM*:0000000000000001 ball_speed_y_counter
                            *COM*:0000000000000001 ball_speed_y
                            *COM*:0000000000000001 ball_refresh
                            *COM*:0000000000000001 ball_vert_richt
                            *COM*:0000000000000001 ball_pos_y
                            *COM*:0000000000000001 ball_speed_x_counter
                            *COM*:0000000000000001 ball_speed_x
                            *COM*:0000000000000001 ball_horiz_richt
                            *COM*:0000000000000001 ball_pos_x
                            *COM*:0000000000000001 ms100
                            *COM*:0000000000000001 sec
                            *COM*:0000000000000001 min
     /tmp/ccLshrB6.s:177    .text:00000000000000e4 block1
     /tmp/ccLshrB6.s:744    .data:0000000000000000 aktiv.2464
                            *COM*:0000000000000001 ball_radius
     /tmp/ccLshrB6.s:293    .text.startup:0000000000000000 main
                            *COM*:0000000000000001 balk_lenght
                            *COM*:0000000000000001 balken_pos_x
                            *COM*:0000000000000001 balk_horiz_richt
                            *COM*:0000000000000001 balk_vert_pos
                            *COM*:0000000000000001 balk_end_left
                            *COM*:0000000000000001 balk_end_right
                            *COM*:0000000000000001 balk_refresh
     /tmp/ccLshrB6.s:1288   .progmem.data:00000000000001f8 Font5x7
                            *COM*:0000000000000001 state
     /tmp/ccLshrB6.s:750    .progmem.data:0000000000000000 batman
                            *COM*:0000000000000001 ms
     /tmp/ccLshrB6.s:1283   .bss:0000000000000000 buffer

UNDEFINED SYMBOLS
glcd_draw_rect
glcd_init
glcd_clear
glcd_write
glcd_tiny_set_font
glcd_clear_buffer
glcd_draw_circle
__do_copy_data
__do_clear_bss
